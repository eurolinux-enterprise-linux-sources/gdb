https://bugzilla.redhat.com/show_bug.cgi?id=750341
[patch] gdb crash in cp_scan_for_anonymous_namespace
http://sourceware.org/ml/gdb-patches/2011-10/msg00570.html
http://sourceware.org/ml/gdb-cvs/2011-10/msg00154.html

### src/gdb/ChangeLog	2011/10/20 13:34:13	1.13446
### src/gdb/ChangeLog	2011/10/20 20:06:11	1.13447
## -1,3 +1,15 @@
+2011-10-20  Aleksandar Ristovski  <aristovski@qnx.com>
+
+	* cp-namespace.c (cp_scan_for_anonymous_namespaces): Changed function
+	arguments by adding OBJFILE.  Instead of getting objfile from
+	symbol's symtab, use new argument OBJFILE.
+	* cp-support.h (cp_scan_for_anonymous_namespaces): Changed function
+	arguments by adding OBJFILE.
+	* gdb/dwarf2read.c (new_symbol_full): Change call to
+	cp_scan_for_anonymous_namespaces to match new signature.
+	* gdb/stabsread.c (define_symbol): Change call to
+	cp_scan_for_anonymous_namespaces to match new signature.
+
 2011-10-20  Phil Muldoon  <pmuldoon@redhat.com>
 
         PR python/13308
Index: gdb-7.2/gdb/cp-namespace.c
===================================================================
--- gdb-7.2.orig/gdb/cp-namespace.c	2012-01-14 20:38:58.000000000 +0100
+++ gdb-7.2/gdb/cp-namespace.c	2012-01-14 20:42:29.985135172 +0100
@@ -75,7 +75,8 @@ static void maintenance_cplus_namespace 
 #define ANONYMOUS_NAMESPACE_LEN 21
 
 void
-cp_scan_for_anonymous_namespaces (const struct symbol *symbol)
+cp_scan_for_anonymous_namespaces (const struct symbol *const symbol,
+				  struct objfile *const objfile)
 {
   if (SYMBOL_DEMANGLED_NAME (symbol) != NULL)
     {
@@ -116,7 +117,7 @@ cp_scan_for_anonymous_namespaces (const 
 		 namespace given by the previous component if there is
 		 one, or to the global namespace if there isn't.  */
 	      cp_add_using_directive (dest, src, NULL, NULL,
-	                              &SYMBOL_SYMTAB (symbol)->objfile->objfile_obstack);
+	                              &objfile->objfile_obstack);
 	    }
 	  /* The "+ 2" is for the "::".  */
 	  previous_component = next_component + 2;
Index: gdb-7.2/gdb/cp-support.h
===================================================================
--- gdb-7.2.orig/gdb/cp-support.h	2012-01-14 20:38:58.000000000 +0100
+++ gdb-7.2/gdb/cp-support.h	2012-01-14 20:41:24.055118300 +0100
@@ -140,7 +140,8 @@ extern void cp_set_block_scope (const st
 				const char *processing_current_prefix,
 				int processing_has_namespace_info);
 
-extern void cp_scan_for_anonymous_namespaces (const struct symbol *symbol);
+extern void cp_scan_for_anonymous_namespaces (const struct symbol *symbol,
+					      struct objfile *objfile);
 
 extern struct symbol *cp_lookup_symbol_nonlocal (const char *name,
 						 const struct block *block,
Index: gdb-7.2/gdb/dwarf2read.c
===================================================================
--- gdb-7.2.orig/gdb/dwarf2read.c	2012-01-14 20:39:00.000000000 +0100
+++ gdb-7.2/gdb/dwarf2read.c	2012-01-14 20:41:24.070118305 +0100
@@ -10873,7 +10873,7 @@ variable_or_member:
 	 namespaces based on the demangled name.  */
       if (!processing_has_namespace_info
 	  && cu->language == language_cplus)
-	cp_scan_for_anonymous_namespaces (sym);
+	cp_scan_for_anonymous_namespaces (sym, objfile);
     }
   return (sym);
 }
Index: gdb-7.2/gdb/stabsread.c
===================================================================
--- gdb-7.2.orig/gdb/stabsread.c	2010-05-17 01:49:58.000000000 +0200
+++ gdb-7.2/gdb/stabsread.c	2012-01-14 20:41:47.050125291 +0100
@@ -712,7 +712,7 @@ define_symbol (CORE_ADDR valu, char *str
 	  memcpy (name, string, p - string);
 	  name[p - string] = '\0';
 	  new_name = cp_canonicalize_string (name);
-	  cp_scan_for_anonymous_namespaces (sym);
+	  cp_scan_for_anonymous_namespaces (sym, objfile);
 	}
       if (new_name != NULL)
 	{
