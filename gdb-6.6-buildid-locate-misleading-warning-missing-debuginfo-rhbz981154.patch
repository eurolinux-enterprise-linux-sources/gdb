Patch by Jan Kratochvil

Index: gdb-7.2/gdb/elfread.c
===================================================================
--- gdb-7.2.orig/gdb/elfread.c
+++ gdb-7.2/gdb/elfread.c
@@ -45,6 +45,7 @@
 #include "elf/external.h"
 #include "stap-probe.h"
 #include "arch-utils.h"
+#include "filenames.h"
 #include <sys/stat.h>
 
 extern void _initialize_elfread (void);
@@ -1300,6 +1301,42 @@ build_id_verify (const char *filename, s
   return retval;
 }
 
+static char *
+link_resolve (const char *symlink, int level)
+{
+  char buf[PATH_MAX + 1], *target, *retval;
+  ssize_t got;
+
+  if (level > 10)
+    return xstrdup (symlink);
+
+  got = readlink (symlink, buf, sizeof (buf));
+  if (got < 0 || got >= sizeof (buf))
+    return xstrdup (symlink);
+  buf[got] = '\0';
+
+  if (IS_ABSOLUTE_PATH (buf))
+    target = xstrdup (buf);
+  else
+    {
+      char *dir = ldirname (symlink);
+
+      if (dir == NULL)
+	return xstrdup (symlink);
+      target = xstrprintf ("%s"
+#ifndef HAVE_DOS_BASED_FILE_SYSTEM
+			   "/"
+#else /* HAVE_DOS_BASED_FILE_SYSTEM */
+			   "\\"
+#endif /* HAVE_DOS_BASED_FILE_SYSTEM */
+			   "%s", dir, buf);
+    }
+
+  retval = link_resolve (target, level + 1);
+  xfree (target);
+  return retval;
+}
+
 char *
 build_id_to_filename (struct build_id *build_id, char **link_return,
 		      int add_debug_suffix)
@@ -1321,6 +1358,8 @@ build_id_to_filename (struct build_id *b
       size_t size = build_id->size;
       unsigned seqno;
       struct stat statbuf_trash;
+      /* Initialize it just to avoid a GCC false warning.  */
+      char *link0 = NULL, *link0_resolved;
 
       while (*debugdir == DIRNAME_SEPARATOR)
 	debugdir++;
@@ -1362,6 +1401,13 @@ build_id_to_filename (struct build_id *b
 	  else
 	    *s2 = 0;
 
+	  if (!seqno)
+	    {
+	      /* If none of the real files is found report as missing file
+		 always the non-.%u-suffixed file.  */
+	      link0 = xstrdup (link);
+	    }
+
 	  /* `access' automatically dereferences LINK.  */
 	  if (lstat (link, &statbuf_trash) != 0)
 	    {
@@ -1387,21 +1433,29 @@ build_id_to_filename (struct build_id *b
 	  break;
 	}
 
+      /* If the symlink has target request to install the target.
+         BASE-debuginfo.rpm contains the symlink but BASE.rpm may be missing.
+         https://bugzilla.redhat.com/show_bug.cgi?id=981154  */
+      link0_resolved = link_resolve (link0, 0);
+      xfree (link0);
+
 	if (link_all == NULL)
-	  link_all = xstrdup (link);
+	  link_all = xstrdup (link0_resolved);
 	else
 	  {
 	    size_t len_orig = strlen (link_all);
 
-	    link_all = xrealloc (link_all, len_orig + 1 + strlen (link) + 1);
+	    link_all = xrealloc (link_all,
+				 len_orig + 1 + strlen (link0_resolved) + 1);
 
 	    /* Use whitespace instead of DIRNAME_SEPARATOR to be compatible with
 	       its possible use as an argument for installation command.  */
 	    link_all[len_orig] = ' ';
 
-	    strcpy (&link_all[len_orig + 1], link);
+	    strcpy (&link_all[len_orig + 1], link0_resolved);
 	  }
 
+      xfree (link0_resolved);
       debugdir = debugdir_end;
     }
   while (*debugdir != 0);
@@ -1651,8 +1705,7 @@ missing_rpm_enlist (const char *filename
 
 	  /* Base package name for `debuginfo-install'.  We do not use the
 	     `yum' command directly as the line
-		 yum --disablerepo='*' --enablerepo='*-debug*' \
-		     install NAME-debuginfo.ARCH
+		 yum --enablerepo='*-debug*' install NAME-debuginfo.ARCH
 	     would be more complicated than just:
 		 debuginfo-install NAME-VERSION-RELEASE.ARCH
 	     Do not supply the rpm base name (derived from .src.rpm name) as
@@ -1791,7 +1844,7 @@ debug_flush_missing (void)
 }
 
 /* This MISSING_FILEPAIR_HASH tracker is used only for the duplicite messages
-     yum --disablerepo='*' --enablerepo='*-debug*' install ...
+     yum --enablerepo='*-debug*' install ...
    avoidance.  */
 
 struct missing_filepair
@@ -1948,8 +2001,7 @@ debug_print_missing (const char *binary,
 			    _("Missing separate debuginfo for %s\n"), binary);
         if (debug != NULL)
 	  fprintf_unfiltered (gdb_stdlog, _("Try: %s %s\n"),
-			      "yum --disablerepo='*' --enablerepo='*-debug*'"
-			      " install", debug);
+			      "yum --enablerepo='*-debug*' install", debug);
       }
 }
 
Index: gdb-7.2/gdb/testsuite/gdb.base/rhbz981154-misleading-yum-install-warning.exp
===================================================================
--- /dev/null
+++ gdb-7.2/gdb/testsuite/gdb.base/rhbz981154-misleading-yum-install-warning.exp
@@ -0,0 +1,99 @@
+#   Copyright (C) 2014  Free Software Foundation, Inc.
+
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 3 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program.  If not, see <http://www.gnu.org/licenses/>.
+
+set testfile "rhbz981154-misleading-yum-install-warning"
+set srcfile "normal.c"
+set binfile ${objdir}/${subdir}/${testfile}
+
+if { [prepare_for_testing ${testfile}.exp ${testfile} ${srcfile}] } {
+    return -1
+}
+
+# Get the build-id of the file
+set build_id_debug_file [build_id_debug_filename_get $binfile]
+regsub -all ".debug$" $build_id_debug_file "" build_id_without_debug
+
+# Run to main
+if { ![runto_main] } {
+    return -1
+}
+
+# We first need to generate a corefile
+set escapedfilename [string_to_regexp ${objdir}/${subdir}/gcore.test]
+set core_supported 0
+gdb_test_multiple "gcore ${objdir}/${subdir}/gcore.test" \
+	"save a corefile" \
+{
+  -re "Saved corefile ${escapedfilename}\[\r\n\]+$gdb_prompt $" {
+    pass "save a corefile"
+    global core_supported
+    set core_supported 1
+  }
+  -re "Can't create a corefile\[\r\n\]+$gdb_prompt $" {
+    unsupported "save a corefile"
+    global core_supported
+    set core_supported 0
+  }
+}
+
+if {!$core_supported} {
+  return -1
+}
+
+# Move the binfile to a temporary name
+remote_exec build "mv $binfile ${binfile}.old"
+
+# Reinitialize GDB and see if we get a yum warning
+gdb_exit
+gdb_start
+gdb_reinitialize_dir $srcdir/$subdir
+
+with_test_prefix "first run:" {
+  gdb_test "set build-id-verbose 1" "" \
+    "set build-id-verbose"
+
+  gdb_test "set debug-file-directory ${objdir}/${subdir}" "" \
+    "set debug-file-directory"
+
+  gdb_test "core-file ${objdir}/${subdir}/gcore.test" \
+    "Missing separate debuginfo for the main executable file\r\nTry: yum --enablerepo='\\*-debug\\*' install $objdir/$subdir/$build_id_without_debug\r\n.*" \
+    "test first yum warning"
+}
+
+# Now we define and create our .build-id
+file mkdir [file dirname ${objdir}/${subdir}/${build_id_without_debug}]
+# Cannot use "file link" (from TCL) because it requires the target file to
+# exist.
+remote_exec build "ln -s $binfile ${objdir}/${subdir}/${build_id_without_debug}"
+
+# Reinitialize GDB to get the second yum warning
+gdb_exit
+gdb_start
+gdb_reinitialize_dir $srcdir/$subdir
+
+with_test_prefix "second run:" {
+  gdb_test "set build-id-verbose 1" "" \
+    "set build-id-verbose"
+
+  gdb_test "set debug-file-directory ${objdir}/${subdir}" "" \
+    "set debug-file-directory"
+
+  gdb_test "core-file ${objdir}/${subdir}/gcore.test" \
+    "Missing separate debuginfo for the main executable file\r\nTry: yum --enablerepo='\\*-debug\\*' install $binfile\r\n.*" \
+    "test second yum warning"
+}
+
+# Leaving the link there will cause breakage in the next run.
+remote_exec build "rm -f ${objdir}/${subdir}/${build_id_without_debug}"
