commit 6e22494e5076e4d3c0b2c2785883162f83db499e
Author: Jan Kratochvil <jan.kratochvil@redhat.com>
Date:   Fri Jun 26 15:11:14 2015 +0200

    Do not skip prologue for asm (.S) files
    
    GDB tries to skip prologue for .S files according to .debug_line but it then
    places the breakpoint to a location where it is never hit.
    
    This is because #defines in .S files cause prologue skipping which is
    completely inappropriate, for s390x:
    
    glibc/sysdeps/unix/syscall-template.S
    78:/* This is a "normal" system call stub: if there is an error,
    79:   it returns -1 and sets errno.  */
    80:
    81:T_PSEUDO (SYSCALL_SYMBOL, SYSCALL_NAME, SYSCALL_NARGS)
    82:     ret
    
    00000000000f4210 T __select
     Line Number Statements:
      Extended opcode 2: set Address to 0xf41c8
      Advance Line by 80 to 81
      Copy
      Advance PC by 102 to 0xf422e
      Special opcode 6: advance Address by 0 to 0xf422e and Line by 1 to 82
      Special opcode 34: advance Address by 2 to 0xf4230 and Line by 1 to 83
      Advance PC by 38 to 0xf4256
      Extended opcode 1: End of Sequence
      Compilation Unit @ offset 0x28b3e0:
     <0><28b3eb>: Abbrev Number: 1 (DW_TAG_compile_unit)
        <28b3ec>   DW_AT_stmt_list   : 0x7b439
        <28b3f0>   DW_AT_low_pc	 : 0xf41c8
        <28b3f8>   DW_AT_high_pc     : 0xf4256
        <28b400>   DW_AT_name        : ../sysdeps/unix/syscall-template.S
        <28b423>   DW_AT_comp_dir    : /usr/src/debug////////glibc-2.17-c758a686/misc
        <28b452>   DW_AT_producer    : GNU AS 2.23.52.0.1
        <28b465>   DW_AT_language    : 32769        (MIPS assembler)
    
    without debuginfo or with debuginfo and the fix - correct address:
    (gdb) b select
    Breakpoint 1 at 0xf4210
    
    It is also where .dynsym+.symtab point to:
    00000000000f4210 T __select
    00000000000f4210 W select
    
    with debuginfo, without the fix:
    (gdb) b select
    Breakpoint 1 at 0xf41c8: file ../sysdeps/unix/syscall-template.S, line 81.
    
    One part is to behave for asm files similar way like for 'locations_valid':
      /* Symtab has been compiled with both optimizations and debug info so that
         GDB may stop skipping prologues as variables locations are valid already
         at function entry points.  */
      unsigned int locations_valid : 1;
    
    The other part is to extend the 'locations_valid'-like functionality more.
    
    Both minsym_found and find_function_start_sal need to be patched, otherwise
    their addresses do not match and GDB regresses on ppc64:
    
    gdb/ChangeLog
    2015-06-26  Jan Kratochvil  <jan.kratochvil@redhat.com>
    
    	* linespec.c (minsym_found): Reset sal.PC for COMPUNIT_LOCATIONS_VALID
    	and language_asm..
    	* symtab.c (find_function_start_sal): Likewise.
    
    gdb/testsuite/ChangeLog
    2015-06-26  Jan Kratochvil  <jan.kratochvil@redhat.com>
    
    	* gdb.arch/amd64-prologue-skip.S: New file.
    	* gdb.arch/amd64-prologue-skip.exp: New file.

Index: gdb-7.6.1/gdb/linespec.c
===================================================================
--- gdb-7.6.1.orig/gdb/linespec.c
+++ gdb-7.6.1/gdb/linespec.c
@@ -3386,7 +3386,9 @@ collect_symbols (struct symbol *sym, voi
 }
 
 /* We've found a minimal symbol MSYMBOL in OBJFILE to associate with our
-   linespec; return the SAL in RESULT.  */
+   linespec; return the SAL in RESULT.  This function should return SALs
+   matching those from find_function_start_sal, otherwise false
+   multiple-locations breakpoints could be placed.  */
 
 static void
 minsym_found (struct linespec_state *self, struct objfile *objfile,
@@ -3408,7 +3410,23 @@ minsym_found (struct linespec_state *sel
     sal = find_pc_sect_line (pc, NULL, 0);
 
   if (self->funfirstline)
-    skip_prologue_sal (&sal);
+    {
+      if (sal.symtab != NULL
+	  && (sal.symtab->locations_valid
+	      || sal.symtab->language == language_asm))
+	{
+	  /* If gdbarch_convert_from_func_ptr_addr does not apply then
+	     sal.SECTION, sal.LINE&co. will stay correct from above.
+	     If gdbarch_convert_from_func_ptr_addr applies then
+	     sal.SECTION is cleared from above and sal.LINE&co. will
+	     stay correct from the last find_pc_sect_line above.  */
+	  sal.pc = SYMBOL_VALUE_ADDRESS (msymbol);
+	  sal.pc = gdbarch_convert_from_func_ptr_addr (gdbarch, sal.pc,
+						       &current_target);
+	}
+      else
+	skip_prologue_sal (&sal);
+    }
 
   if (maybe_add_address (self->addr_set, objfile->pspace, sal.pc))
     add_sal_to_sals (self, result, &sal, SYMBOL_NATURAL_NAME (msymbol), 0);
Index: gdb-7.6.1/gdb/symtab.c
===================================================================
--- gdb-7.6.1.orig/gdb/symtab.c
+++ gdb-7.6.1/gdb/symtab.c
@@ -2762,7 +2762,9 @@ skip_prologue_using_lineinfo (CORE_ADDR
 /* Given a function symbol SYM, find the symtab and line for the start
    of the function.
    If the argument FUNFIRSTLINE is nonzero, we want the first line
-   of real code inside the function.  */
+   of real code inside the function.
+   This function should return SALs matching those from minsym_found,
+   otherwise false multiple-locations breakpoints could be placed.  */
 
 struct symtab_and_line
 find_function_start_sal (struct symbol *sym, int funfirstline)
@@ -2773,6 +2775,14 @@ find_function_start_sal (struct symbol *
   sal = find_pc_sect_line (BLOCK_START (SYMBOL_BLOCK_VALUE (sym)),
 			   SYMBOL_OBJ_SECTION (sym), 0);
 
+  if (funfirstline && sal.symtab != NULL
+      && (sal.symtab->locations_valid
+	  || sal.symtab->language == language_asm))
+    {
+      sal.pc = BLOCK_START (SYMBOL_BLOCK_VALUE (sym));
+      return sal;
+    }
+
   /* We always should have a line for the function start address.
      If we don't, something is odd.  Create a plain SAL refering
      just the PC and hope that skip_prologue_sal (if requested)
Index: gdb-7.6.1/gdb/testsuite/gdb.arch/amd64-prologue-skip.S
===================================================================
--- /dev/null
+++ gdb-7.6.1/gdb/testsuite/gdb.arch/amd64-prologue-skip.S
@@ -0,0 +1,28 @@
+/* This testcase is part of GDB, the GNU debugger.
+
+   Copyright 2015 Free Software Foundation, Inc.
+
+   This program is free software; you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation; either version 3 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
+
+	.text
+/*0*/	hlt
+pushrbp: .globl pushrbp
+#define PUSHRBP push %rbp; mov %rsp, %rbp; nop
+/*1*/	PUSHRBP
+/*6*/	hlt
+
+/*7*/	hlt
+#define MINSYM nop; .globl minsym; minsym: nop
+/*8*/	MINSYM
+/*a*/	hlt
Index: gdb-7.6.1/gdb/testsuite/gdb.arch/amd64-prologue-skip.exp
===================================================================
--- /dev/null
+++ gdb-7.6.1/gdb/testsuite/gdb.arch/amd64-prologue-skip.exp
@@ -0,0 +1,35 @@
+# Copyright 2010-2015 Free Software Foundation, Inc.
+
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 3 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program.  If not, see <http://www.gnu.org/licenses/>.
+
+standard_testfile .S
+set binfile ${binfile}.o
+
+if { ![istarget x86_64-*-* ] || ![is_lp64_target] } {
+    verbose "Skipping ${testfile}."
+    return
+}
+
+if { [gdb_compile "${srcdir}/${subdir}/${srcfile}" "${binfile}" object {debug}] != "" } {
+    untested ${testfile}
+    return
+}
+
+clean_restart ${binfile}
+
+gdb_test "break *pushrbp" " at 0x1: file .*"
+gdb_test "break pushrbp" " at 0x1: file .*"
+
+gdb_test "break *minsym" " at 0x9: file .*"
+gdb_test "break minsym" " at 0x9: file .*"
