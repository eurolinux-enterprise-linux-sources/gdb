http://sourceware.org/ml/gdb-patches/2011-04/msg00148.html
Subject: [patch]#2 Fix Python access to inlined frames

On Sun, 10 Apr 2011 16:11:59 +0200, Jan Kratochvil wrote:
> frapy_block part generalizes it, I find it still doc/ compliant.

this change had a regression.  lookup_objfile_from_block returns
separate_debug_objfile_backlink if it exists, which is exactly against the
purpose of the BLOCK life cycle management in this function.

It is also unrelated to the real fix so I just dropped that part.

Without that part the rest of the patch is re-attached.


Thanks,
Jan


gdb/
2011-04-11  Jan Kratochvil  <jan.kratochvil@redhat.com>

	Fix Python access to inlined frames.
	* python/py-frame.c (frapy_read_var): Find BLOCK using get_frame_block.
	* python/py-symbol.c (gdbpy_lookup_symbol): Likewise.

gdb/testsuite/
2011-04-10  Jan Kratochvil  <jan.kratochvil@redhat.com>

	Fix Python access to inlined frames.
	* gdb.python/py-frame-inline.c: New file.
	* gdb.python/py-frame-inline.exp: New file.

--- a/gdb/python/py-frame.c
+++ b/gdb/python/py-frame.c
@@ -436,7 +423,7 @@ frapy_read_var (PyObject *self, PyObject *args)
 	  FRAPY_REQUIRE_VALID ((frame_object *) self, frame);
 
 	  if (!block)
-	    block = block_for_pc (get_frame_address_in_block (frame));
+	    block = get_frame_block (frame, NULL);
 	  var = lookup_symbol (var_name, block, VAR_DOMAIN, NULL);
 	}
       GDB_PY_HANDLE_EXCEPTION (except);
--- a/gdb/python/py-symbol.c
+++ b/gdb/python/py-symbol.c
@@ -275,8 +275,8 @@ gdbpy_lookup_symbol (PyObject *self, PyObject *args, PyObject *kw)
 
       TRY_CATCH (except, RETURN_MASK_ALL)
 	{
-	  selected_frame  = get_selected_frame (_("No frame selected."));
-	  block = block_for_pc (get_frame_address_in_block (selected_frame));
+	  selected_frame = get_selected_frame (_("No frame selected."));
+	  block = get_frame_block (selected_frame, NULL);
 	}
       GDB_PY_HANDLE_EXCEPTION (except);
     }
--- /dev/null
+++ b/gdb/testsuite/gdb.python/py-frame-inline.c
@@ -0,0 +1,43 @@
+/* This test is part of GDB, the GNU debugger.
+
+   Copyright 2011 Free Software Foundation, Inc.
+
+   This program is free software; you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation; either version 3 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
+
+volatile int v = 42;
+
+__attribute__((__always_inline__)) static int
+f (void)
+{
+  /* Provide first stub line so that GDB understand the PC is already inside
+     the inlined function and does not expect a step into it.  */
+  v++;
+  v++;		/* break-here */
+
+  return v;
+}
+
+__attribute__((__noinline__)) static int
+g (void)
+{
+  volatile int l = v;
+
+  return f ();
+}
+
+int
+main (void)
+{
+  return g ();
+}
--- /dev/null
+++ b/gdb/testsuite/gdb.python/py-frame-inline.exp
@@ -0,0 +1,39 @@
+# Copyright (C) 2011 Free Software Foundation, Inc.
+
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 3 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program.  If not, see <http://www.gnu.org/licenses/>.
+
+load_lib gdb-python.exp
+
+set testfile "py-frame-inline"
+set srcfile ${testfile}.c
+if { [prepare_for_testing ${testfile}.exp ${testfile} ${srcfile}] } {
+    return -1
+}
+
+# Skip all tests if Python scripting is not enabled.
+if { [skip_python_tests] } { continue }
+
+if ![runto main] then {
+    fail "Can't run to function f"
+    return 0
+}
+
+gdb_breakpoint [gdb_get_line_number "break-here"]
+gdb_continue_to_breakpoint "Block break here."
+
+gdb_test "info frame" "inlined into frame 1\r\n.*"
+
+gdb_test "up" "#1  g .*"
+
+gdb_test "python print gdb.selected_frame().read_var('l')" "\r\n42"

