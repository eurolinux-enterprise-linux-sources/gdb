Re: [1/4] RFC: skip DIEs which only declare an enum
http://sourceware.org/ml/gdb-patches/2011-07/msg00428.html
http://sourceware.org/ml/gdb-cvs/2011-07/msg00171.html

### src/gdb/ChangeLog	2011/07/20 15:06:52	1.13201
### src/gdb/ChangeLog	2011/07/20 15:13:48	1.13202
## -1,5 +1,10 @@
 2011-07-20  Tom Tromey  <tromey@redhat.com>
 
+	* dwarf2read.c (process_enumeration_scope): Do not call new_symbol
+	in some declaration-only cases.
+
+2011-07-18  Tom Tromey  <tromey@redhat.com>
+
 	PR symtab/12984:
 	* dwarf2read.c (dwarf2_section_info_def): New typedef.
 	(struct dwarf2_per_objfile) <types>: Change to a VEC.
Index: gdb-7.2/gdb/dwarf2read.c
===================================================================
--- gdb-7.2.orig/gdb/dwarf2read.c	2011-07-26 20:08:32.000000000 +0200
+++ gdb-7.2/gdb/dwarf2read.c	2011-07-26 20:11:02.000000000 +0200
@@ -1170,6 +1170,11 @@ static struct die_info *follow_die_sig (
 					struct attribute *,
 					struct dwarf2_cu **);
 
+static struct signatured_type *lookup_signatured_type_at_offset
+    (struct objfile *objfile,
+     struct dwarf2_section_info *section,
+     unsigned int offset);
+
 static void read_signatured_type_at_offset (struct objfile *objfile,
 					    unsigned int offset);
 
@@ -6859,6 +6864,27 @@ process_enumeration_scope (struct die_in
 	TYPE_UNSIGNED (this_type) = 1;
     }
 
+  /* If we are reading an enum from a .debug_types unit, and the enum
+     is a declaration, and the enum is not the signatured type in the
+     unit, then we do not want to add a symbol for it.  Adding a
+     symbol would in some cases obscure the true definition of the
+     enum, giving users an incomplete type when the definition is
+     actually available.  Note that we do not want to do this for all
+     enums which are just declarations, because C++0x allows forward
+     enum declarations.  */
+  if (cu->per_cu->debug_type_section
+      && die_is_declaration (die, cu))
+    {
+      struct signatured_type *type_sig;
+
+      type_sig
+	= lookup_signatured_type_at_offset (dwarf2_per_objfile->objfile,
+					    cu->per_cu->debug_type_section,
+					    cu->per_cu->offset);
+      if (type_sig->type_offset != die->offset)
+	return;
+    }
+
   new_symbol (die, this_type, cu);
 }
 
