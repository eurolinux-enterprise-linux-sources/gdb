From 253b0509388a097b446d818ead7b528d46a99886 Mon Sep 17 00:00:00 2001
From: Jan Kratochvil <jan.kratochvil@redhat.com>
Date: Wed, 18 Apr 2012 06:51:05 +0000
Subject: [PATCH] Forgotten commit for:
 gdb/testsuite/
 	PR symtab/7259:
 	* gdb.base/enumval.c: New test case.
 	* gdb.base/enumval.exp: New test case.

---
 gdb/testsuite/gdb.base/enumval.c   |   30 ++++++++++++++++++++++++++++++
 gdb/testsuite/gdb.base/enumval.exp |   31 +++++++++++++++++++++++++++++++
 2 files changed, 61 insertions(+), 0 deletions(-)
 create mode 100644 gdb/testsuite/gdb.base/enumval.c
 create mode 100644 gdb/testsuite/gdb.base/enumval.exp

Index: gdb-7.2-patched/gdb/testsuite/gdb.base/enumval.c
===================================================================
--- /dev/null
+++ gdb-7.2-patched/gdb/testsuite/gdb.base/enumval.c
@@ -0,0 +1,30 @@
+/* This testcase is part of GDB, the GNU debugger.
+
+   Copyright 2012 Free Software Foundation, Inc.
+
+   This program is free software; you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation; either version 3 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
+
+enum e { I, J = 0xffffffffU, K = 0xf000000000000000ULL } e = J, f = K;
+
+void
+dummy()
+{
+}
+
+int
+main(void)
+{
+  dummy();
+  return 0;
+}
Index: gdb-7.2-patched/gdb/testsuite/gdb.base/enumval.exp
===================================================================
--- /dev/null
+++ gdb-7.2-patched/gdb/testsuite/gdb.base/enumval.exp
@@ -0,0 +1,35 @@
+# This testcase is part of GDB, the GNU debugger.
+
+# Copyright 2012 Free Software Foundation, Inc.
+
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 3 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program.  If not, see <http://www.gnu.org/licenses/>.
+
+set testfile "enumval"
+
+if { [istarget "i\[34567\]86-*-linux*"] } {
+    set srcfile ${testfile}.S
+} else {
+    set srcfile ${testfile}.c
+}
+
+if { [prepare_for_testing ${testfile}.exp ${testfile} ${srcfile} {debug}] } {
+    return -1
+}
+
+# Check the real contents.
+gdb_test "print e" "= J"
+gdb_test "print f" "= K"
+
+gdb_test "print J" "= J"
+gdb_test "print K" "= K"
Index: gdb-7.2-patched/gdb/testsuite/gdb.base/enumval.S
===================================================================
--- /dev/null
+++ gdb-7.2-patched/gdb/testsuite/gdb.base/enumval.S
@@ -0,0 +1,335 @@
+/* This testcase is part of GDB, the GNU debugger.
+
+   Copyright 2012 Free Software Foundation, Inc.
+
+   This program is free software; you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation; either version 3 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program.  If not, see <http://www.gnu.org/licenses/>.
+
+   This testcase was generated by the following command:
+
+      gcc -Wall -g -dA -S -m32 -o gdb.base/enumval.s gdb.base/enumval.c
+
+   Please regenerate this testcase if enumval.c is modified.  */
+
+	.file	"enumval.c"
+	.section	.debug_abbrev,"",@progbits
+.Ldebug_abbrev0:
+	.section	.debug_info,"",@progbits
+.Ldebug_info0:
+	.section	.debug_line,"",@progbits
+.Ldebug_line0:
+	.text
+.Ltext0:
+	.cfi_sections	.debug_frame
+.globl e
+	.data
+	.align 8
+	.type	e, @object
+	.size	e, 8
+e:
+	.long	-1
+	.long	0
+.globl f
+	.align 8
+	.type	f, @object
+	.size	f, 8
+f:
+	.long	0
+	.long	-268435456
+	.text
+.globl dummy
+	.type	dummy, @function
+dummy:
+.LFB0:
+	.file 1 "gdb/testsuite/gdb.base/enumval.c"
+	# gdb/testsuite/gdb.base/enumval.c:22
+	.loc 1 22 0
+	.cfi_startproc
+	# basic block 2
+	pushl	%ebp
+	.cfi_def_cfa_offset 8
+	.cfi_offset 5, -8
+	movl	%esp, %ebp
+	.cfi_def_cfa_register 5
+	# gdb/testsuite/gdb.base/enumval.c:23
+	.loc 1 23 0
+	popl	%ebp
+	.cfi_restore 5
+	.cfi_def_cfa 4, 4
+	ret
+	.cfi_endproc
+.LFE0:
+	.size	dummy, .-dummy
+.globl main
+	.type	main, @function
+main:
+.LFB1:
+	# gdb/testsuite/gdb.base/enumval.c:27
+	.loc 1 27 0
+	.cfi_startproc
+	# basic block 2
+	pushl	%ebp
+	.cfi_def_cfa_offset 8
+	.cfi_offset 5, -8
+	movl	%esp, %ebp
+	.cfi_def_cfa_register 5
+	# gdb/testsuite/gdb.base/enumval.c:28
+	.loc 1 28 0
+	call	dummy
+	# gdb/testsuite/gdb.base/enumval.c:29
+	.loc 1 29 0
+	movl	$0, %eax
+	# gdb/testsuite/gdb.base/enumval.c:30
+	.loc 1 30 0
+	popl	%ebp
+	.cfi_restore 5
+	.cfi_def_cfa 4, 4
+	ret
+	.cfi_endproc
+.LFE1:
+	.size	main, .-main
+.Letext0:
+	.section	.debug_info
+	.long	0x95	# Length of Compilation Unit Info
+	.value	0x3	# DWARF version number
+	.long	.Ldebug_abbrev0	# Offset Into Abbrev. Section
+	.byte	0x4	# Pointer Size (in bytes)
+	.uleb128 0x1	# (DIE (0xb) DW_TAG_compile_unit)
+	.long	.LASF0	# DW_AT_producer: "GNU C 4.4.6 20120305 (Red Hat 4.4.6-4)"
+	.byte	0x1	# DW_AT_language
+	.long	.LASF1	# DW_AT_name: "gdb/testsuite/gdb.base/enumval.c"
+	.long	.LASF2	# DW_AT_comp_dir: "/root/gdb/g/gdb-7.2-patched"
+	.long	.Ltext0	# DW_AT_low_pc
+	.long	.Letext0	# DW_AT_high_pc
+	.long	.Ldebug_line0	# DW_AT_stmt_list
+	.uleb128 0x2	# (DIE (0x25) DW_TAG_enumeration_type)
+	.ascii "e\0"	# DW_AT_name
+	.byte	0x8	# DW_AT_byte_size
+	.byte	0x1	# DW_AT_decl_file (gdb/testsuite/gdb.base/enumval.c)
+	.byte	0x12	# DW_AT_decl_line
+	.long	0x48	# DW_AT_sibling
+	.uleb128 0x3	# (DIE (0x2f) DW_TAG_enumerator)
+	.ascii "I\0"	# DW_AT_name
+	.sleb128 0	# DW_AT_const_value
+	.uleb128 0x3	# (DIE (0x33) DW_TAG_enumerator)
+	.ascii "J\0"	# DW_AT_name
+	.sleb128 4294967295	# DW_AT_const_value
+	.uleb128 0x3	# (DIE (0x3b) DW_TAG_enumerator)
+	.ascii "K\0"	# DW_AT_name
+	.sleb128 -1152921504606846976	# DW_AT_const_value
+	.byte	0x0	# end of children of DIE 0x25
+	.uleb128 0x4	# (DIE (0x48) DW_TAG_subprogram)
+	.byte	0x1	# DW_AT_external
+	.long	.LASF3	# DW_AT_name: "dummy"
+	.byte	0x1	# DW_AT_decl_file (gdb/testsuite/gdb.base/enumval.c)
+	.byte	0x15	# DW_AT_decl_line
+	.long	.LFB0	# DW_AT_low_pc
+	.long	.LFE0	# DW_AT_high_pc
+	.byte	0x1	# DW_AT_frame_base
+	.byte	0x9c	# DW_OP_call_frame_cfa
+	.uleb128 0x5	# (DIE (0x5a) DW_TAG_subprogram)
+	.byte	0x1	# DW_AT_external
+	.long	.LASF4	# DW_AT_name: "main"
+	.byte	0x1	# DW_AT_decl_file (gdb/testsuite/gdb.base/enumval.c)
+	.byte	0x1a	# DW_AT_decl_line
+	.byte	0x1	# DW_AT_prototyped
+	.long	0x71	# DW_AT_type
+	.long	.LFB1	# DW_AT_low_pc
+	.long	.LFE1	# DW_AT_high_pc
+	.byte	0x1	# DW_AT_frame_base
+	.byte	0x9c	# DW_OP_call_frame_cfa
+	.uleb128 0x6	# (DIE (0x71) DW_TAG_base_type)
+	.byte	0x4	# DW_AT_byte_size
+	.byte	0x5	# DW_AT_encoding
+	.ascii "int\0"	# DW_AT_name
+	.uleb128 0x7	# (DIE (0x78) DW_TAG_variable)
+	.ascii "e\0"	# DW_AT_name
+	.byte	0x1	# DW_AT_decl_file (gdb/testsuite/gdb.base/enumval.c)
+	.byte	0x12	# DW_AT_decl_line
+	.long	0x25	# DW_AT_type
+	.byte	0x1	# DW_AT_external
+	.byte	0x5	# DW_AT_location
+	.byte	0x3	# DW_OP_addr
+	.long	e
+	.uleb128 0x7	# (DIE (0x88) DW_TAG_variable)
+	.ascii "f\0"	# DW_AT_name
+	.byte	0x1	# DW_AT_decl_file (gdb/testsuite/gdb.base/enumval.c)
+	.byte	0x12	# DW_AT_decl_line
+	.long	0x25	# DW_AT_type
+	.byte	0x1	# DW_AT_external
+	.byte	0x5	# DW_AT_location
+	.byte	0x3	# DW_OP_addr
+	.long	f
+	.byte	0x0	# end of children of DIE 0xb
+	.section	.debug_abbrev
+	.uleb128 0x1	# (abbrev code)
+	.uleb128 0x11	# (TAG: DW_TAG_compile_unit)
+	.byte	0x1	# DW_children_yes
+	.uleb128 0x25	# (DW_AT_producer)
+	.uleb128 0xe	# (DW_FORM_strp)
+	.uleb128 0x13	# (DW_AT_language)
+	.uleb128 0xb	# (DW_FORM_data1)
+	.uleb128 0x3	# (DW_AT_name)
+	.uleb128 0xe	# (DW_FORM_strp)
+	.uleb128 0x1b	# (DW_AT_comp_dir)
+	.uleb128 0xe	# (DW_FORM_strp)
+	.uleb128 0x11	# (DW_AT_low_pc)
+	.uleb128 0x1	# (DW_FORM_addr)
+	.uleb128 0x12	# (DW_AT_high_pc)
+	.uleb128 0x1	# (DW_FORM_addr)
+	.uleb128 0x10	# (DW_AT_stmt_list)
+	.uleb128 0x6	# (DW_FORM_data4)
+	.byte	0x0
+	.byte	0x0
+	.uleb128 0x2	# (abbrev code)
+	.uleb128 0x4	# (TAG: DW_TAG_enumeration_type)
+	.byte	0x1	# DW_children_yes
+	.uleb128 0x3	# (DW_AT_name)
+	.uleb128 0x8	# (DW_FORM_string)
+	.uleb128 0xb	# (DW_AT_byte_size)
+	.uleb128 0xb	# (DW_FORM_data1)
+	.uleb128 0x3a	# (DW_AT_decl_file)
+	.uleb128 0xb	# (DW_FORM_data1)
+	.uleb128 0x3b	# (DW_AT_decl_line)
+	.uleb128 0xb	# (DW_FORM_data1)
+	.uleb128 0x1	# (DW_AT_sibling)
+	.uleb128 0x13	# (DW_FORM_ref4)
+	.byte	0x0
+	.byte	0x0
+	.uleb128 0x3	# (abbrev code)
+	.uleb128 0x28	# (TAG: DW_TAG_enumerator)
+	.byte	0x0	# DW_children_no
+	.uleb128 0x3	# (DW_AT_name)
+	.uleb128 0x8	# (DW_FORM_string)
+	.uleb128 0x1c	# (DW_AT_const_value)
+	.uleb128 0xd	# (DW_FORM_sdata)
+	.byte	0x0
+	.byte	0x0
+	.uleb128 0x4	# (abbrev code)
+	.uleb128 0x2e	# (TAG: DW_TAG_subprogram)
+	.byte	0x0	# DW_children_no
+	.uleb128 0x3f	# (DW_AT_external)
+	.uleb128 0xc	# (DW_FORM_flag)
+	.uleb128 0x3	# (DW_AT_name)
+	.uleb128 0xe	# (DW_FORM_strp)
+	.uleb128 0x3a	# (DW_AT_decl_file)
+	.uleb128 0xb	# (DW_FORM_data1)
+	.uleb128 0x3b	# (DW_AT_decl_line)
+	.uleb128 0xb	# (DW_FORM_data1)
+	.uleb128 0x11	# (DW_AT_low_pc)
+	.uleb128 0x1	# (DW_FORM_addr)
+	.uleb128 0x12	# (DW_AT_high_pc)
+	.uleb128 0x1	# (DW_FORM_addr)
+	.uleb128 0x40	# (DW_AT_frame_base)
+	.uleb128 0xa	# (DW_FORM_block1)
+	.byte	0x0
+	.byte	0x0
+	.uleb128 0x5	# (abbrev code)
+	.uleb128 0x2e	# (TAG: DW_TAG_subprogram)
+	.byte	0x0	# DW_children_no
+	.uleb128 0x3f	# (DW_AT_external)
+	.uleb128 0xc	# (DW_FORM_flag)
+	.uleb128 0x3	# (DW_AT_name)
+	.uleb128 0xe	# (DW_FORM_strp)
+	.uleb128 0x3a	# (DW_AT_decl_file)
+	.uleb128 0xb	# (DW_FORM_data1)
+	.uleb128 0x3b	# (DW_AT_decl_line)
+	.uleb128 0xb	# (DW_FORM_data1)
+	.uleb128 0x27	# (DW_AT_prototyped)
+	.uleb128 0xc	# (DW_FORM_flag)
+	.uleb128 0x49	# (DW_AT_type)
+	.uleb128 0x13	# (DW_FORM_ref4)
+	.uleb128 0x11	# (DW_AT_low_pc)
+	.uleb128 0x1	# (DW_FORM_addr)
+	.uleb128 0x12	# (DW_AT_high_pc)
+	.uleb128 0x1	# (DW_FORM_addr)
+	.uleb128 0x40	# (DW_AT_frame_base)
+	.uleb128 0xa	# (DW_FORM_block1)
+	.byte	0x0
+	.byte	0x0
+	.uleb128 0x6	# (abbrev code)
+	.uleb128 0x24	# (TAG: DW_TAG_base_type)
+	.byte	0x0	# DW_children_no
+	.uleb128 0xb	# (DW_AT_byte_size)
+	.uleb128 0xb	# (DW_FORM_data1)
+	.uleb128 0x3e	# (DW_AT_encoding)
+	.uleb128 0xb	# (DW_FORM_data1)
+	.uleb128 0x3	# (DW_AT_name)
+	.uleb128 0x8	# (DW_FORM_string)
+	.byte	0x0
+	.byte	0x0
+	.uleb128 0x7	# (abbrev code)
+	.uleb128 0x34	# (TAG: DW_TAG_variable)
+	.byte	0x0	# DW_children_no
+	.uleb128 0x3	# (DW_AT_name)
+	.uleb128 0x8	# (DW_FORM_string)
+	.uleb128 0x3a	# (DW_AT_decl_file)
+	.uleb128 0xb	# (DW_FORM_data1)
+	.uleb128 0x3b	# (DW_AT_decl_line)
+	.uleb128 0xb	# (DW_FORM_data1)
+	.uleb128 0x49	# (DW_AT_type)
+	.uleb128 0x13	# (DW_FORM_ref4)
+	.uleb128 0x3f	# (DW_AT_external)
+	.uleb128 0xc	# (DW_FORM_flag)
+	.uleb128 0x2	# (DW_AT_location)
+	.uleb128 0xa	# (DW_FORM_block1)
+	.byte	0x0
+	.byte	0x0
+	.byte	0x0
+	.section	.debug_pubnames,"",@progbits
+	.long	0x2d	# Length of Public Names Info
+	.value	0x2	# DWARF Version
+	.long	.Ldebug_info0	# Offset of Compilation Unit Info
+	.long	0x99	# Compilation Unit Length
+	.long	0x48	# DIE offset
+	.ascii "dummy\0"	# external name
+	.long	0x5a	# DIE offset
+	.ascii "main\0"	# external name
+	.long	0x78	# DIE offset
+	.ascii "e\0"	# external name
+	.long	0x88	# DIE offset
+	.ascii "f\0"	# external name
+	.long	0x0
+	.section	.debug_pubtypes,"",@progbits
+	.long	0x14	# Length of Public Type Names Info
+	.value	0x2	# DWARF Version
+	.long	.Ldebug_info0	# Offset of Compilation Unit Info
+	.long	0x99	# Compilation Unit Length
+	.long	0x25	# DIE offset
+	.ascii "e\0"	# external name
+	.long	0x0
+	.section	.debug_aranges,"",@progbits
+	.long	0x1c	# Length of Address Ranges Info
+	.value	0x2	# DWARF Version
+	.long	.Ldebug_info0	# Offset of Compilation Unit Info
+	.byte	0x4	# Size of Address
+	.byte	0x0	# Size of Segment Descriptor
+	.value	0x0	# Pad to 8 byte boundary
+	.value	0x0
+	.long	.Ltext0	# Address
+	.long	.Letext0-.Ltext0	# Length
+	.long	0x0
+	.long	0x0
+	.section	.debug_str,"MS",@progbits,1
+.LASF0:
+	.string	"GNU C 4.4.6 20120305 (Red Hat 4.4.6-4)"
+.LASF1:
+	.string	"gdb/testsuite/gdb.base/enumval.c"
+.LASF3:
+	.string	"dummy"
+.LASF2:
+	.string	"/root/gdb/g/gdb-7.2-patched"
+.LASF4:
+	.string	"main"
+	.ident	"GCC: (GNU) 4.4.6 20120305 (Red Hat 4.4.6-4)"
+	.section	.note.GNU-stack,"",@progbits
