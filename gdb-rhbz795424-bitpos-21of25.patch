Date: Thu, 27 Sep 2012 18:51:00 +0530
From: Siddhesh Poyarekar <siddhesh at redhat dot com>
To: gdb-patches at sourceware dot org
Subject: [PATCH 2/4] Add a check to ensure that a type may fit into host memory
Message-ID: <20120927185100.53c5efd3@spoyarek>

Hi,

This is part two of the bitpos expansion patch.  This implements checks
in some places in the code to ensure that a type size in ULONGEST is
small enough to fit into host memory.  Tested for regressions on x86_64
Fedora 16.

Regards,
Siddhesh

gdb/ChangeLog

	* alpha-tdep.c (alpha_push_dummy_call) Check for underflow in
	SP.
	* cp-valprint (cp_print_value): Ensure BASECLASS fits into
	size_t.
	* dwarf2loc.c (read_pieced_value): Ensure that THIS_SIZE fits
	into size_t.
	(write_pieced_value): Likewise.
	* findcmd.c (parse_find_args): Ensure PATTERN_BUF_SIZE fits into
	size_t.
	* p-valprint (pascal_object_print_value): Ensure BASECLASS fits
	into size_t.
	* utils.c (ulongest_fits_host_or_error): New function to find if
	a ULONGEST number fits into size_t.
	* utils.h: Declare ulongest_fits_host_or_error.
	* valops.c (search_struct_method): Ensure BASECLASS fits into
	size_t.
	* value.c (allocate_value_lazy): Ensure TYPE fits into size_t.
	(allocate_value_contents): Likewise.
	(set_value_enclosing_type): Ensure NEW_ENCL_TYPE fits into
	size_t.
	* vax-tdep.c (vax_return_value): Ensure that TYPE fits into
	size_t.

Index: gdb-7.2/gdb/alpha-tdep.c
===================================================================
--- gdb-7.2.orig/gdb/alpha-tdep.c
+++ gdb-7.2/gdb/alpha-tdep.c
@@ -407,6 +407,13 @@ alpha_push_dummy_call (struct gdbarch *g
     accumulate_size = 0;
   else
     accumulate_size -= sizeof(arg_reg_buffer);
+
+  /* Check for underflow.  */
+  if (sp - accumulate_size > sp)
+    error (_("Insufficient memory in GDB host for arguments, "
+	     "need %s bytes, but less than %s bytes available."),
+	   plongest (accumulate_size), plongest (CORE_ADDR_MAX - sp));
+
   sp -= accumulate_size;
 
   /* Keep sp aligned to a multiple of 16 as the ABI requires.  */
Index: gdb-7.2/gdb/cp-valprint.c
===================================================================
--- gdb-7.2.orig/gdb/cp-valprint.c
+++ gdb-7.2/gdb/cp-valprint.c
@@ -495,6 +495,8 @@ cp_print_value (struct type *type, struc
 	      gdb_byte *buf;
 	      struct cleanup *back_to;
 
+	      ulongest_fits_host_or_error (TYPE_LENGTH (baseclass));
+
 	      buf = xmalloc (TYPE_LENGTH (baseclass));
 	      back_to = make_cleanup (xfree, buf);
 
Index: gdb-7.2/gdb/dwarf2loc.c
===================================================================
--- gdb-7.2.orig/gdb/dwarf2loc.c
+++ gdb-7.2/gdb/dwarf2loc.c
@@ -705,6 +705,8 @@ read_pieced_value (struct value *v)
 
       this_size = (this_size_bits + source_offset_bits % 8 + 7) / 8;
       source_offset = source_offset_bits / 8;
+      ulongest_fits_host_or_error (this_size);
+
       if (buffer_size < this_size)
 	{
 	  buffer_size = this_size;
@@ -885,6 +887,7 @@ write_pieced_value (struct value *to, st
 	}
       else
 	{
+	  ulongest_fits_host_or_error (this_size);
 	  if (buffer_size < this_size)
 	    {
 	      buffer_size = this_size;
Index: gdb-7.2/gdb/findcmd.c
===================================================================
--- gdb-7.2.orig/gdb/findcmd.c
+++ gdb-7.2/gdb/findcmd.c
@@ -75,6 +75,7 @@ increase_pattern_buffer (char **pattern_
 	size_t current_offset = *pattern_buf_end - *pattern_buf;
 
 	*pattern_buf_size *= 2;
+	ulongest_fits_host_or_error (*pattern_buf_size);
 	*pattern_buf = xrealloc (*pattern_buf, *pattern_buf_size);
 	*pattern_buf_end = *pattern_buf + current_offset;
       }
Index: gdb-7.2/gdb/p-valprint.c
===================================================================
--- gdb-7.2.orig/gdb/p-valprint.c
+++ gdb-7.2/gdb/p-valprint.c
@@ -944,6 +944,7 @@ pascal_object_print_value (struct type *
 	  gdb_byte *buf;
 	  struct cleanup *back_to;
 
+	  ulongest_fits_host_or_error (TYPE_LENGTH (baseclass));
 	  buf = xmalloc (TYPE_LENGTH (baseclass));
 	  back_to = make_cleanup (xfree, buf);
 
Index: gdb-7.2/gdb/utils.c
===================================================================
--- gdb-7.2.orig/gdb/utils.c
+++ gdb-7.2/gdb/utils.c
@@ -3577,6 +3577,18 @@ host_address_to_string (const void *addr
   return str;
 }
 
+/* Ensure that the input NUM is not larger than the maximum capacity of the
+   host system.  We choose SIZE_MAX / 8 as a conservative estimate of the size
+   of a resource that a system may allocate.  */
+void
+ulongest_fits_host_or_error (ULONGEST num)
+{
+  if (num > SIZE_MAX / 8)
+    error (_("Insufficient memory in host GDB for object of size %s bytes, "
+	     "maximum allowed %s bytes."), pulongest (num),
+	   pulongest (SIZE_MAX / 8));
+}
+
 char *
 gdb_realpath (const char *filename)
 {
Index: gdb-7.2/gdb/valops.c
===================================================================
--- gdb-7.2.orig/gdb/valops.c
+++ gdb-7.2/gdb/valops.c
@@ -2163,6 +2163,7 @@ search_struct_method (const char *name, 
 	      gdb_byte *tmp;
 	      struct cleanup *back_to;
 
+	      ulongest_fits_host_or_error (TYPE_LENGTH (baseclass));
 	      tmp = xmalloc (TYPE_LENGTH (baseclass));
 	      back_to = make_cleanup (xfree, tmp);
 
Index: gdb-7.2/gdb/value.c
===================================================================
--- gdb-7.2.orig/gdb/value.c
+++ gdb-7.2/gdb/value.c
@@ -265,6 +265,7 @@ allocate_value_lazy (struct type *type)
      description correctly.  */
   check_typedef (type);
 
+  ulongest_fits_host_or_error (TYPE_LENGTH (type));
   val = (struct value *) xzalloc (sizeof (struct value));
   val->contents = NULL;
   val->next = all_values;
@@ -296,6 +297,8 @@ allocate_value_lazy (struct type *type)
 void
 allocate_value_contents (struct value *val)
 {
+  ulongest_fits_host_or_error (TYPE_LENGTH (val->enclosing_type));
+
   if (!val->contents)
     val->contents = (gdb_byte *) xzalloc (TYPE_LENGTH (val->enclosing_type));
 }
@@ -2045,8 +2048,12 @@ struct value *
 value_change_enclosing_type (struct value *val, struct type *new_encl_type)
 {
   if (TYPE_LENGTH (new_encl_type) > TYPE_LENGTH (value_enclosing_type (val))) 
-    val->contents =
-      (gdb_byte *) xrealloc (val->contents, TYPE_LENGTH (new_encl_type));
+    {
+      ulongest_fits_host_or_error (TYPE_LENGTH (new_encl_type));
+
+      val->contents =
+	(gdb_byte *) xrealloc (val->contents, TYPE_LENGTH (new_encl_type));
+    }
 
   val->enclosing_type = new_encl_type;
   return val;
Index: gdb-7.2/gdb/vax-tdep.c
===================================================================
--- gdb-7.2.orig/gdb/vax-tdep.c
+++ gdb-7.2/gdb/vax-tdep.c
@@ -223,6 +223,7 @@ vax_return_value (struct gdbarch *gdbarc
 	  ULONGEST addr;
 
 	  regcache_raw_read_unsigned (regcache, VAX_R0_REGNUM, &addr);
+	  ulongest_fits_host_or_error (TYPE_LENGTH (type));
 	  read_memory (addr, readbuf, TYPE_LENGTH (type));
 	}
 
Index: gdb-7.2/gdb/defs.h
===================================================================
--- gdb-7.2.orig/gdb/defs.h
+++ gdb-7.2/gdb/defs.h
@@ -312,6 +312,8 @@ extern void set_display_time (int);
 
 extern void set_display_space (int);
 
+extern void ulongest_fits_host_or_error (ULONGEST num);
+
 #define	ALL_CLEANUPS	((struct cleanup *)0)
 
 extern void do_cleanups (struct cleanup *);
