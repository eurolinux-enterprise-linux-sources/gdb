Date: Thu, 27 Sep 2012 18:46:19 +0530
From: Siddhesh Poyarekar <siddhesh at redhat dot com>
To: gdb-patches at sourceware dot org
Subject: [PATCH 1/4] Expand bitpos and type.length to LONGEST and ULONGEST
Message-ID: <20120927184619.7c0c2e46@spoyarek>

Hi,

This is patch 1/4, which implements the bulk of the changes in type
length and bitpos/type offset. I have verified that there are no
regressions resulting from this patch by running the testsuite on
Fedora 16 x86_64.  Patch and changelog attached.

Regards,
Siddhesh

gdb/ChangeLog

2012-08-05  Siddhesh Poyarekar  <siddhesh@redhat.com>

	* ada-lang.c (fat_pntr_bounds_bitpos): Return LONGEST.
	(fat_pntr_data_bitpos): Likewise.
	(desc_bound_bitpos): Likewise.
	(constrained_packed_array_type): Expand ELT_BITS parameter to
	LONGEST.
	(move_bits): Expand parameters SRC_OFFSET and N to LONGEST.
	(cond_offset_host): Expand parameter OFFSET to LONGEST.
	(cond_offset_target): Likewise.
	(ada_type_of_array): Expand ARRAY_BITSIZE to LONGEST.
	(decode_constrained_packed_array_type): Expand BITS to LONGEST.
	(decode_constrained_packed_array): Expand BIT_POS to LONGEST.
	(ada_value_primitive_packed_val): Expand parameter OFFSET to
	LONGEST.  Expand TARG, NTARG and NEW_OFFSET to LONGEST.
	(ada_value_assign): Expand FROM_SIZE to LONGEST.
	(value_assign_to_component): Expand BITS to LONGEST.
	(ensure_lval): Expand LEN to LONGEST.
	(value_pointer): Expand LEN to ULONGEST.
	(value_tag_from_contents_and_address): Expand TAG_BYTE_OFFSET to
	LONGEST.
	(ada_value_primitive_field): Expand parameter OFFSET to LONGEST.
	Expand bit_pos to LONGEST.
	(find_struct_field): Expand parameters OFFSET and BYTE_OFFSET_P to
	LONGEST.  Expand BIT_POS and FLD_OFFSET to LONGEST.
	(ada_search_struct_field): Expand parameter OFFSET to LONGEST.
	Expand VAR_OFFSET to LONGEST.
	(ada_index_struct_field): Expand parameters INDEX and OFFSET to
	LONGEST.
	(ada_index_struct_field_1): Expand parameters INDEX_P and OFFSET
	to LONGEST.
	(ada_value_struct_elt): Expand BYTE_OFFSET to LONGEST.
	(align_value): Return ULONGEST.  Expand parameter OFF and
	ALIGNMENT to ULONGEST.
	(ada_template_to_fixed_record_type_1): Expand OFF, BIT_LEN and
	fld_bit_len to LONGEST.  Expand FIELD_OFFSET to LONGEST.  Use
	pulongest function to print TYPE_LENGTH.
	(to_fixed_array_type): Expand LEN to LONGEST.
	* ada-lang.h (ada_val_print): Expand parameter EMBEDDED_OFFSET to
	LONGEST.
	(ada_printstr): Expand parameter LENGTH to ULONGEST.
	(ada_value_primitive_packed_val): Expand parameter OFFSET to
	LONGEST.
	* ada-typeprint.c (ada_print_type): Use pulongest to print
	TYPE_LENGTH.
	* ada-valprint.c (val_print_packed_array_elements): Expand ELTLEN
	to ULONGEST.
	(char_at): Expand parameter I to LONGEST.
	(printstr): Expand parameter LENGTH, I, REP1, REPS to ULONGEST.
	Use pulongest to format print REPS.
	(ada_printstr): Expand parameter LENGTH to LONGEST.
	(ada_val_print): Expand parameter EMBEDDED_OFFSET to LONGEST.
	(ada_val_print_array): Expand ELTLEN, LEN to ULONGEST and TEMP_LEN
	to LONGEST.
	(ada_val_print_1): Expand parameter OFFSET to LONGEST.
	(print_variant_part): Expand parameters OFFSET and OUTER_OFFSET to
	LONGEST.
	(print_field_values): Likewise.  Expand BIT_POS to LONGEST.
	* annotate.c (annotate_array_section_begin): Expand parameter
	IDX to LONGEST.  Use plongest to format-print IDX.
	(annotate_elt_rep): Expand parameter REPCOUNT to ULONGEST.  Use
	plongest to format-print REPCOUNT.
	* annotate.h: Likewise.
	* arm-linux-nat.c (arm_linux_region_ok_for_hw_watchpoint):
	Expand parameter parameter LEN to LONGEST.
	* ax-gdb.c (gen_left_shift): Expand parameter DISTANCE to LONGEST.
	(gen_offset): Expand parameter OFFSET to LONGEST.
	(gen_bitfield_ref): Expand parameters START, END to LONGEST.
	Expand BOUND_START, BOUND_END, OFFSET to LONGEST.
	(gen_primitive_field): Expand parameter OFFSET to LONGEST.
	(gen_struct_ref_recursive): Likewise.
	* ax-general.c (ax_trace_quick): Expand parameter N to LONGEST.
	* ax.h (ax_trace_quick): Likewise.
	* breakpoint.c (breakpoint_address_match_range): Expand parameter
	LEN1 to LONGEST.
	(can_use_hardware_watchpoint): Expand LEN to LONGEST.
	* breakpoint.h (struct bp_target_info): Expand member LENGTH to
	LONGEST.
	(struct bp_location): Likewise.
	* c-lang.c (c_printstr): Expand parameter LENGTH to ULONGEST.
	(evaluate_subexp_c): Expand ELEMENT_SIZE, I to LONGEST.
	* c-lang.h (c_val_print): Expand parameter EMBEDDED_OFFSET to
	LONGEST.
	(c_printstr): Expand parameter LENGTH to ULONGEST.
	(cp_print_value_fields): Expand parameter OFFSET to LONGEST.
	(cp_print_value_fields_rtti): Likewise.
	* c-typeprint.c (c_type_print_varspec_suffix): Remove cast down to
	int and use plongest to print LONGEST.
	* c-valprint.c (c_val_print): Expand parameter EMBEDDED_OFFSET to
	LONGEST.  Expand OFFSET to LONGEST, ELTLEN to ULONGEST.
	(c_value_print): Expand TOP to LONGEST.
	* cp-abi.c (baseclass_offset): Return LONGEST.  Expand parameter
	EMBEDDED_OFFSET to LONGEST.  Expand RES to LONGEST.
	(value_virtual_fn_field): Expand parameter OFFSET to LONGEST.
	(value_rtti_type): Expand parameter TOP to point to LONGEST.
	* cp-abi.h (value_virtual_fn_field): Expand OFFSET to LONGEST.
	(value_rtti_type): Expand TOP to point to LONGEST.
	(baseclass_offset): Return LONGEST.  Expand parameter
	EMBEDDED_OFFSET to LONGEST.
	(struct cp_abi_ops): Expand parameter OFFSET for VIRTUAL_FN_FIELD
	to LONGEST.  Expand parameter TOP to point to LONGEST in
	VALUE_RTTI_TYPE.  Return LONGEST from BASECLASS_OFFSET and expand
	parameter EMBEDDED_OFFSET to LONGEST.
	* cp-valprint.c (cp_print_value_fields): Expand parameter OFFSET
	to LONGEST.  Expand I_OFFSET to LONGEST.
	(cp_print_value_fields_rtti): Expand parameter OFFSET to
	LONGEST.  Expand TOP to LONGEST.
	(cp_print_value): Expand parameter OFFSET to LONGEST.  Expand
	THISOFFSET, BOFFSET to LONGEST.
	* d-lang.h (d_val_print): Expand parameter EMBEDDED_OFFSET to
	LONGEST.
	* d-valprint.c (dynamic_array_type): Likewise.
	(d_val_print): Likewise.
	* doublest.c (floatformat_from_length): Expand parameter LEN to
	LONGEST.  Use plongest to format string for LONGEST.
	* dwarf2loc.c (copy_bitwise): Expand parameters DEST_OFFSET_BITS,
	BIT_COUNT to ULONGEST.  Rename parameter SOURCE_OFFSET_BITS to
	SOURCE_OFFSET and expand to ULONGEST.  New variable
	SOURCE_OFFSET_BITS.
	(read_pieced_value): Expand OFFSET, DEST_OFFSET_BITS,
	SOURCE_OFFSET_BITS, SOURCE_OFFSET to LONGEST.  Expand TYPE_LEN,
	THIS_SIZE, THIS_SIZE_BITS to ULONGEST.
	(write_pieced_value): Likewise.
	(check_pieced_value_bits): Expand parameters BIT_OFFSET and
	BIT_LENGTH to LONGEST.  Expand THIS_SIZE_BITS to ULONGEST.
	(check_pieced_value_validity): Expand parameters BIT_OFFSET and
	BIT_LENGTH to LONGEST.
	(check_pieced_synthetic_pointer): Likewise.
	(indirect_pieced_value): Expand BIT_LENGTH, BYTE_OFFSET and
	BIT_OFFSET to LONGEST.
	(dwarf2_evaluate_loc_desc_full): Expand N to ULONGEST.
	* dwarf2read.c (dwarf2_const_value_length_mismatch_complaint):
	Expand parameters ARG2 and ARG3 to LONGEST.  Use plongest to
	print ARG2 and ARG3.
	(dwarf2_add_field): Expand ANONYMOUS_SIZE, BIT_OFFSET to
	LONGEST.
	* eval.c (evaluate_struct_tuple): Expand BITPOS to LONGEST.
	(init_array_element): Expand ELEMENT_SIZE to LONGEST.
	(binop_promote): Expand PROMOTED_LEN1, PROMOTED_LEN2, RESULT_LEN
	to ULONGEST.
	(evaluate_subexp_standard): Expand MEM_OFFSET, TOP, ELEMENT_SIZE
	to LONGEST.
	* f-lang.c (f_printstr): Expand parameter LENGTH to ULONGEST.
	* f-lang.h (f_val_print): Expand parameter EMBEDDED_OFFSET to
	LONGEST.
	* f-valprint.c (f77_array_offset_tbl): Make LONGEST.
	(f77_create_arrayprint_offset_tbl): Expand ELTLEN to LONGEST.
	(f77_print_array_1): Expand parameter EMBEDDED_OFFSET to
	LONGEST.  Expand I to LONGEST.
	(f77_print_array): Expand parameter EMBEDDED_OFFSET to LONGEST.
	(f_val_print): Likewise.  Expand OFFSET to LONGEST.
	* findvar.c (default_value_from_register): Expand LEN to LONGEST.
	(read_frame_register_value): Expand OFFSET, REG_OFFSET, LEN,
	REG_LEN to LONGEST.
	* frame.c (get_frame_register_bytes): Expand parameter LEN to
	LONGEST.
	* frame.h (get_frame_register_bytes): Likewise.
	* gdbtypes.c (init_type): Expand parameter LENGTH to LONGEST.
	(is_unique_ancestor_worker): Expand parameters OFFSET,
	EMBEDDED_OFFSET to LONGEST.  Expand THIS_OFFSET to LONGEST.
	(is_unique_ancestor): Expand OFFSET to LONGEST.
	(recursive_dump_type): Use pulongest to format print TYPE_LENGTH.
	Use plongest to format print TYPE_FIELD_BITPOS.
	(arch_type): Expand parameter LENGTH to LONGEST.
	* gdbtypes.h (struct type.main_type.fld_bnds.fields): Expand
	member BITPOS to LONGEST.
	(struct type): Expand member LENGTH to ULONGEST.
	(init_type): Expand parameter LENGTH to LONGEST.
	(arch_type): Likewise.
	* gnu-v2-abi.c (gnuv2_virtual_fn_field): Expand parameter OFFSET
	to LONGEST.
	(gnuv2_value_rtti_type): Expand parameter TOP to point to LONGEST.
	(gnuv2_baseclass_offset): Return LONGEST.  Expand parameter
	EMBEDDED_OFFSET to LONGEST.  Expand FIELD_OFFSET, BOFFSET,
	FIELD_LENGTH to LONGEST.
	* gnu-v3-abi.c (build_gdb_vtable_type): Expand OFFSET to LONGEST.
	(vtable_address_point_offset): Return LONGEST.
	(gnuv3_rtti_type): Expand parameter TOP_P to point to LONGEST.
	(gnuv3_virtual_fn_field): Expand parameter OFFSET to LONGEST.
	(gnuv3_baseclass_offset): Return LONGEST.  Expand parameter
	EMBEDDED_OFSET to LONGEST.  Expand CUR_BASE_OFFSET, BASE_OFFSET to
	LONGEST.
	(gnuv3_find_method_in): Expand POS to LONGEST.
	* go-lang.h (go_val_print): Expand parameter EMBEDDED_OFFSET to
	LONGEST.
	* go-valprint.c (print_go_string): Likewise.
	(go_val_print): Likewise.
	* i386-nat.c (i386_handle_nonaligned_watchpoint): Expand
	parameter LEN to LONGEST.
	(i386_region_ok_for_watchpoint): Likewise.
	* inf-ttrace.c (inf_ttrace_region_ok_for_hw_watchpoint): Expand
	parameter LEN to LONGEST.
	* jv-lang.c (java_link_class_type): Expand BOFFSET to LONGEST.
	(java_printstr): Expand parameter LENGTH to ULONGEST.
	* jv-lang.h (java_val_print): Expand parameter EMBEDDED_OFFSET to
	LONGEST.
	* jv-valprint.c (java_print_value_fields): Expand parameter OFFSET
	to LONGEST.
	(java_val_print): Expand parameter EMBEDDED_OFFSET to LONGEST.
	* language.c (unk_lang_printstr): Expand parameter LENGTH to
	ULONGEST.
	(unk_lang_val_print): Expand parameter EMBEDDED_OFFSET to LONGEST.
	* language.h (language_defn): Expand parameter LENGTH of
	LA_PRINTSTR to ULONGEST.  Expand parameter EMBEDDED_OFFSET of
	LA_VAL_PRINT to LONGEST.
	* m2-lang.c (m2_printstr): Expand parameter LENGTH to ULONGEST.
	Expand I, REP1, REPS to ULONGEST.  Use pulongest to format print
	REPS.
	* m2-lang.h (m2_val_print): Expand parameter embedded_offset to
	LONGEST.
	* m2-typeprint.c (m2_array): New variable VAL.  Use pulongest to
	* format print VAL.
	(m2_enum): expand LASTVAL to LONGEST.
	* m2-valprint.c (m2_print_long_set): Expand parameter
	EMBEDDED_OFFSET to LONGEST.
	(m2_print_unbounded_array): Likewise.
	(m2_print_array_contents): Likewise.
	(m2_val_print): Expand parameter EMBEDDED_OFFSET to LONGEST.
	Expand I, LEN, TEMP_LEN to ULONGEST.
	* memrange.c (mem_ranges_overlap): Expand parameters LEN1, LEN2 to
	LONGEST.
	* memrange.h (struct mem_range): Expand member LENGTH to LONGEST.
	(mem_ranges_overlap): Expand parameters LEN1, LEN2 to LONGEST.
	* mips-linux-nat.c (mips_linux_region_ok_for_hw_watchpoint):
	Expand parameter LEN to LONGEST.
	* objc-lang.c (objc_printstr): Expand parameter LENGTH to
	ULONGEST.  Expand I, REP1, REPS to ULONGEST.  use pulongest to
	format print REPS.
	* opencl-lang.c (lookup_opencl_vector_type): Expand parameter
	EL_LENGTH to ULONGEST.  Expand LENGTH to ULONGEST.
	(lval_func_read): Expand OFFSET, N, I, J and ELSIZE to LONGEST.
	(lval_func_write): Likewise.
	(lval_func_check_validity): Expand parameter LENGTH to LONGEST.
	Expand ELSIZE, START, END, I, STARTREST, ENDREST, COMP_OFFSET,
	COMP_LENGTH to LONGEST.
	(lval_func_check_any_valid): Expand ELSIZE to LONGEST.
	(lval_func_check_synthetic_pointer): Expand parameters OFFSET and
	LENGTH to LONGEST.  Expand ELSIZE, START, END, I, STARTREST,
	ENDREST, COMP_LENGTH, COMP_OFFSET to LONGEST.
	* p-lang.c (is_pascal_string_type): Expand parameters LENGTH_POS,
	STRING_POS, LENGTH_SIZE to point to LONGEST.
	(pascal_printstr): Expand parameter LENGTH to ULONGEST.  Expand
	I, REP1, REPS to ULONGEST.  Use pulongest to format print REPS.
	* p-lang.h (pascal_val_print): Expand parameter EMBEDDED_OFFSET
	to LONGEST.
	(is_pascal_string_type): Expand parameters LENGTH_POS, STRING_POS,
	LENGTH_SIZE to point to LONGEST.
	(pascal_printstr): Expand parameter LENGTH to ULONGEST.
	(pascal_object_print_value_fields): Expand parameter OFFSET to
	LONGEST.
	* p-valprint.c (pascal_val_print): Expand parameter
	EMBEDDED_OFFSET to LONGEST.  Expand ELTLEN to ULONGEST.  Expand
	LENGTH_SIZE, LENGTH_POS, STRING_POS to LONGEST.
	(pascal_object_print_value_fields): Expand parameter OFFSET to
	LONGEST.
	(pascal_object_print_value): Likewise.  Expand BOFFSET,
	THISOFFSET to LONGEST.
	* ppc-linux-nat.c (ppc_linux_region_ok_for_hw_watchpoint):
	Expand parameter LEN to point to LONGEST.
	* printcmd.c (print_formatted): Expand LEN to LONGEST.
	(print_scalar_formatted): Likewise.
	* procfs.c (procfs_region_ok_for_hw_watchpoint): Expand
	parameter LEN to LONGEST.
	* python/py-prettyprint.c (apply_val_pretty_printer): Expand
	parameter EMBEDDED_OFFSET to LONGEST.
	* python/python.h (apply_val_pretty_printer): Likewise.
	* regcache.c (regcache_xfer_part): Expand parameter OFFSET to
	LONGEST.
	(regcache_raw_read_part): Likewise.
	(regcache_raw_write_part): Likewise.
	(regcache_cooked_read_part): Likewise.
	(regcache_cooked_write_part): Likewise.
	* regcache.h (regcache_raw_read_part): Likewise.
	(regcache_raw_write_part): Likewise.
	(regcache_cooked_read_part): Likewise.
	(regcache_cooked_write_part): Likewise.
	* remote.c (remote_region_ok_for_hw_watchpoint): Expand
	parameter LEN to LONGEST.
	* s390-nat.c (s390_region_ok_for_hw_watchpoint): Expand
	parameter LEN to LONGEST.
	* spu-multiarch.c (spu_region_ok_for_hw_watchpoint): Expand
	parameter len to LONGEST.
	* stack.c (print_frame_nameless_args): Expand parameter START to
	LONGEST.
	(print_frame_args): Expand HIGHEST_OFFSET, CURRENT_OFFSET,
	ARG_SIZE, START to LONGEST.
	* symmisc.c (print_symbol): Expand I to ULONGEST.  Use pulongest
	to format print TYPE_LENGTH.
	* target.c (default_region_ok_for_hw_watchpoint): Expand parameter
	LEN to LONGEST.
	(debug_to_region_ok_for_hw_watchpoint): Likewise.
	* target.h (struct target_ops): Expand parameter LEN to LONGEST
	for TO_REGION_OK_FOR_HW_WATCHPOINT.
	* tracepoint.c (add_memrange): Expand parameter LEN to LONGEST.
	Use plongest to format print LEN.
	(collect_symbol): Expand LEN to ULONGEST.  Use pulongest to
	format print LEN.
	(scope_info): Expand J to LONGEST.  Use pulongest to format
	print TYPE_LENGTH.
	* typeprint.c (whatis_exp): Expand TOP to LONGEST.
	* valarith.c (value_subscripted_rvalue): Expand parameters INDEX
	and LOWERBOUND to LONGEST.  Expand ELT_SIZE, ELT_OFFS to ULONGEST.
	(value_concat): expand INVAL1LEN and INVAL2LEN to ssize_t.
	(value_logical_not): Expand LEN to LONGEST.
	(value_strcmp): Expand LEN1, LEN2, I, LEN to LONGEST.
	* valops.c (value_allocate_space_in_inferior): Expand parameter
	LEN to LONGEST.
	(value_cast_structs): Expand TOP to LONGEST.
	(value_cast): Expand ELEMENT_LENGTH to ULONGEST.  Expand
	VAL_LENGTH to LONGEST.
	(dynamic_cast_check_1): Expand parameter EMBEDDED_OFFSET to
	LONGEST.  Expand OFFSET to LONGEST.
	(dynamic_cast_check_2): Likewise.
	(value_dynamic_cast): Expand TOP to LONGEST.
	(read_value_memory): Expand EMBEDDED_OFFSET to LONGEST.
	(value_assign): Expand CHANGED_LEN, OFFSET to LONGEST.
	(value_array): Expand TYPELENGTH to ULONGEST.
	(update_search_result): Expand parameters LAST_BOFFSET, BOFFSET
	to LONGEST.
	(do_search_struct_field): Expand parameter OFFSET, LAST_BOFFSET
	to LONGEST.  Expand NEW_OFFSET, BOFFSET to LONGEST.
	(search_struct_field): Expand parameter OFFSET to LONGEST.
	Expand BOFFSET to LONGEST.
	(search_struct_method): Expand parameter OFFSET to LONGEST.
	Expand BASE_OFFSET, THIS_OFFSET to LONGEST.
	(find_method_list): Expand parameters OFFSET, BOFFSET to
	LONGEST.  Expand BASE_OFFSET to LONGEST.
	(value_find_oload_method_list): Expand parameter BOFFSET to point
	to LONGEST.
	(find_overload_match): Expand BOFFSET to LONGEST.
	(value_struct_elt_for_reference): Expand parameter OFFSET to
	LONGEST.  Remove unneeded cast.  Expand BASE_OFFSET to LONGEST.
	(value_rtti_indirect_type): Expand parameter TOP to point to
	LONGEST.
	(value_full_object): Expand parameter XTOP to LONGEST.  Expand
	TOP to LONGEST.
	* valprint.c (valprint_check_validity): Expand parameter
	EMBEDDED_OFFSET to LONGEST.
	(generic_val_print): Likewise.
	(val_print): Likewise.
	(val_print_scalar_formatted): Likewise.
	(print_hex_chars): Expand parameter LEN to ULONGEST.
	(val_print_array_elements): Expand parameter EMBEDDED_OFFSET to
	LONGEST, I to ULONGEST.  Expand LEN, ELTLEN, REP1, REPS to
	ULONGEST.  Use pulongest to format print REPS.
	(generic_printstr): Expand parameter LENGTH to ULONGEST.
	* valprint.h (val_print_array_elements): Expand parameter
	EMBEDDED_OFFSET to LONGEST.
	(val_print_scalar_formatted): Likewise.
	(print_hex_chars): Expand parameter LEN to ULONGEST.
	(generic_val_print): Expand parameter EMBEDDED_OFFSET to LONGEST.
	(generic_printstr): Expand parameter LENGTH to ULONGEST.
	* value.c (struct range): Expand members OFFSET, LENGTH to
	LONGEST.
	(ranges_overlap): Expand parameters OFFSET1, OFFSET2, LEN1 AND
	LEN2 to LONGEST.
	(range_contain): Expand parameter OFFSET, LENGTH to LONGEST.
	(struct value): Expand members OFFSET, EMBEDDED_OFFSET,
	POINTED_TO_OFFSET to LONGEST.
	(value_bytes_available): Expand parameters OFFSET, LENGTH to
	LONGEST.
	(mark_value_bytes_unavailable): Likewise.
	(find_first_range_overlap): Likewise.
	(value_available_contents_eq): Expand parameters OFFSET1, OFFSET2
	and LENGTH to LONGEST.
	(value_offset): Return LONGEST.
	(set_value_offset): Expand parameter OFFSET to LONGEST.
	(value_contents_copy_raw): Expand parameters SRC_OFFSET,
	DST_OFFSET, LENGTH to ssize_t.
	(value_contents_copy): Likewise.
	(value_bits_valid): Expand parameters OFFSET, LENGTH to LONGEST.
	(value_bits_synthetic_pointer): Likewise.
	(value_embedded_offset): Return LONGEST.
	(set_value_embedded_offset): Expand parameter VAL to LONGEST.
	(value_pointed_to_offset): Return LONGEST.
	(set_value_pointed_to_offset): Expand parameter VAL to LONGEST.
	(set_internalvar_component): Expand parameter OFFSET to LONGEST.
	(value_primitive_field): Likewise.  Expand BITPOS, BOFFSET,
	CONTAINER_BITSIZE to LONGEST.
	(value_fn_field): Expand parameter OFFSET to LONGEST.
	(unpack_value_bits_as_long_1): Expand parameters EMBEDDED_OFFSET,
	BITPOS to LONGEST.  Expand READ_OFFSET to LONGEST.
	(unpack_value_bits_as_long): Expand parameter EMBEDED_OFFSET to
	LONGEST.
	(unpack_value_field_as_long_1): Likewise.  Expand BITPOS to
	LONGEST.
	(unpack_value_field_as_long): Expand parameter EMBEDDED_OFFSET to
	LONGEST.
	(value_field_bitfield): Likewise.
	(modify_field): Expand parameter BITPOS to LONGEST.  Expand
	BYTESIZE to LONGEST.
	* value.h (value_offset): Return LONGEST.
	(set_value_offset): Expand parameter OFFSET to LONGEST.
	(value_pointed_to_offset): Return LONGEST.
	(set_value_pointed_to_offset): Expand parameter VAL to LONGEST.
	(value_embedded_offset): Return LONGEST.
	(set_value_embedded_offset): Expand parameter VAL to LONGEST.
	(struct lval_funcs): Expand parameters OFFSET and LENGTH to
	LONGEST for CHECK_VALIDITY.  Likewise for CHECK_SYNTHETIC_POINTER.
	(valprint_check_validity): Expand parameter EMBEDDED_OFFSET to
	LONGEST.
	(value_bits_valid): Expand parameters OFFSET, LENGTH to LONGEST.
	(value_bits_synthetic_pointer): Likewise.
	(value_bytes_available): Likewise.
	(mark_value_bytes_unavailable): Likewise.
	(value_available_contents_eq): Fix comment.  Expand parameters
	OFFSET1, OFFSET2, LENGTH to LONGEST.
	(read_value_memory): Expand parameter EMBEDDED_OFFSET to
	LONGEST.
	(unpack_value_bits_as_long): Expand parameter EMBEDDED_OFFSET to
	LONGEST.
	(unpack_value_field_as_long): Likewise.
	(value_field_bitfield): Likewise.
	(value_contents_copy_raw): Expand parameters SRC_OFFSET,
	DST_OFFSET, LENGTH to LONGEST.
	(value_contents_copy): Likewise.
	(value_primitive_field): Expand parameter OFFSET to LONGEST.
	(value_rtti_indirect_type): Expand parameter TOP to point to
	LONGEST.
	(value_full_object): Expand parameter XTOP to LONGEST.
	(set_internalvar_component): Expand parameter OFFSET to LONGEST.
	(value_fn_field): Expand parameter OFFSET to LONGEST.
	(modify_field): Expand parameter BITPOS to LONGEST.
	(val_print): Expand parameter EMBEDDED_OFFSET to LONGEST.
	(value_allocate_space_in_inferior): Expand parameter LEN to
	LONGEST.

gdb/testsuite/ChangeLog:

2012-08-05  Siddhesh Poyarekar  <siddhesh@redhat.com>

	* gdb.base/longest-types.exp: Add test case to get offset of
	BUF2.

--MP_/yp5f+W_ED2JtUlSyBi8xujr
Content-Type: text/x-patch
Content-Transfer-Encoding: 7bit
Content-Disposition: attachment; filename=bitpos-main.patch

Index: gdb-7.2-patched/gdb/ada-lang.c
===================================================================
--- gdb-7.2-patched.orig/gdb/ada-lang.c
+++ gdb-7.2-patched/gdb/ada-lang.c
@@ -77,7 +77,7 @@ static struct type *desc_bounds_type (st
 
 static struct value *desc_bounds (struct value *);
 
-static int fat_pntr_bounds_bitpos (struct type *);
+static LONGEST fat_pntr_bounds_bitpos (struct type *);
 
 static int fat_pntr_bounds_bitsize (struct type *);
 
@@ -85,13 +85,13 @@ static struct type *desc_data_target_typ
 
 static struct value *desc_data (struct value *);
 
-static int fat_pntr_data_bitpos (struct type *);
+static LONGEST fat_pntr_data_bitpos (struct type *);
 
 static int fat_pntr_data_bitsize (struct type *);
 
 static struct value *desc_one_bound (struct value *, int, int);
 
-static int desc_bound_bitpos (struct type *, int, int);
+static LONGEST desc_bound_bitpos (struct type *, int, int);
 
 static int desc_bound_bitsize (struct type *, int, int);
 
@@ -173,7 +173,7 @@ static struct type *static_unwrap_type (
 
 static struct value *unwrap_value (struct value *);
 
-static struct type *constrained_packed_array_type (struct type *, long *);
+static struct type *constrained_packed_array_type (struct type *, LONGEST *);
 
 static struct type *decode_constrained_packed_array_type (struct type *);
 
@@ -188,7 +188,8 @@ static int ada_is_unconstrained_packed_a
 static struct value *value_subscript_packed (struct value *, int,
                                              struct value **);
 
-static void move_bits (gdb_byte *, int, const gdb_byte *, int, int, int);
+static void move_bits (gdb_byte *, int, const gdb_byte *, LONGEST, LONGEST,
+		       int);
 
 static struct value *coerce_unspec_val_to_type (struct value *,
                                                 struct type *);
@@ -214,14 +215,14 @@ static struct value *value_val_atr (stru
 static struct symbol *standard_lookup (const char *, const struct block *,
                                        domain_enum);
 
-static struct value *ada_search_struct_field (char *, struct value *, int,
+static struct value *ada_search_struct_field (char *, struct value *, LONGEST,
                                               struct type *);
 
-static struct value *ada_value_primitive_field (struct value *, int, int,
+static struct value *ada_value_primitive_field (struct value *, LONGEST, int,
                                                 struct type *);
 
-static int find_struct_field (char *, struct type *, int,
-                              struct type **, int *, int *, int *, int *);
+static int find_struct_field (char *, struct type *, LONGEST,
+                              struct type **, LONGEST *, int *, int *, int *);
 
 static struct value *ada_to_fixed_value_create (struct type *, CORE_ADDR,
                                                 struct value *);
@@ -239,7 +240,7 @@ static void ada_language_arch_info (stru
 
 static void check_size (const struct type *);
 
-static struct value *ada_index_struct_field (int, struct value *, int,
+static struct value *ada_index_struct_field (LONGEST, struct value *, LONGEST,
 					     struct type *);
 
 static struct value *assign_aggregate (struct value *, struct value *, 
@@ -540,7 +541,7 @@ coerce_unspec_val_to_type (struct value 
 }
 
 static const gdb_byte *
-cond_offset_host (const gdb_byte *valaddr, long offset)
+cond_offset_host (const gdb_byte *valaddr, LONGEST offset)
 {
   if (valaddr == NULL)
     return NULL;
@@ -549,7 +550,7 @@ cond_offset_host (const gdb_byte *valadd
 }
 
 static CORE_ADDR
-cond_offset_target (CORE_ADDR address, long offset)
+cond_offset_target (CORE_ADDR address, LONGEST offset)
 {
   if (address == 0)
     return 0;
@@ -1501,7 +1502,7 @@ desc_bounds (struct value *arr)
 /* If TYPE is the type of an array-descriptor (fat pointer),  the bit
    position of the field containing the address of the bounds data.  */
 
-static int
+static LONGEST
 fat_pntr_bounds_bitpos (struct type *type)
 {
   return TYPE_FIELD_BITPOS (desc_base_type (type), 1);
@@ -1567,7 +1568,7 @@ desc_data (struct value *arr)
 /* If TYPE is the type of an array-descriptor (fat pointer), the bit
    position of the field containing the address of the data.  */
 
-static int
+static LONGEST
 fat_pntr_data_bitpos (struct type *type)
 {
   return TYPE_FIELD_BITPOS (desc_base_type (type), 0);
@@ -1602,7 +1603,7 @@ desc_one_bound (struct value *bounds, in
    of the Ith lower bound stored in it, if WHICH is 0, and the Ith upper
    bound, if WHICH is 1.  The first bound is I=1.  */
 
-static int
+static LONGEST
 desc_bound_bitpos (struct type *type, int i, int which)
 {
   return TYPE_FIELD_BITPOS (desc_base_type (type), 2 * i + which - 2);
@@ -1918,7 +1919,7 @@ decode_packed_array_bitsize (struct type
    in bits.  */
 
 static struct type *
-constrained_packed_array_type (struct type *type, long *elt_bits)
+constrained_packed_array_type (struct type *type, LONGEST *elt_bits)
 {
   struct type *new_elt_type;
   struct type *new_type;
@@ -1962,7 +1963,7 @@ decode_constrained_packed_array_type (st
   char *name;
   char *tail;
   struct type *shadow_type;
-  long bits;
+  LONGEST bits;
 
   if (!raw_name)
     raw_name = ada_type_name (desc_base_type (type));
@@ -2032,7 +2033,8 @@ decode_constrained_packed_array (struct 
  	 array with no wrapper.  In order to interpret the value through
  	 the (left-justified) packed array type we just built, we must
  	 first left-justify it.  */
-      int bit_size, bit_pos;
+      int bit_size;
+      LONGEST bit_pos;
       ULONGEST mod;
 
       mod = ada_modulus (value_type (arr)) - 1;
@@ -2131,15 +2133,16 @@ has_negatives (struct type *type)
 
 struct value *
 ada_value_primitive_packed_val (struct value *obj, const gdb_byte *valaddr,
-				long offset, int bit_offset, int bit_size,
+				LONGEST offset, int bit_offset, int bit_size,
                                 struct type *type)
 {
   struct value *v;
-  int src,                      /* Index into the source area */
-    targ,                       /* Index into the target area */
-    srcBitsLeft,                /* Number of source bits left to move */
-    nsrc, ntarg,                /* Number of source and target bytes */
-    unusedLS,                   /* Number of bits in next significant
+  int src;                      /* Index into the source area */
+  LONGEST targ;                 /* Index into the target area */
+  int srcBitsLeft,              /* Number of source bits left to move */
+    nsrc;                       /* Number of source bytes */
+  LONGEST ntarg;                /* Number of target bytes */
+  int unusedLS,                 /* Number of bits in next significant
                                    byte of source that are unused */
     accumSize;                  /* Number of meaningful bits in accum */
   unsigned char *bytes;         /* First byte containing data to unpack */
@@ -2286,7 +2289,7 @@ ada_value_primitive_packed_val (struct v
    not overlap.  */
 static void
 move_bits (gdb_byte *target, int targ_offset, const gdb_byte *source,
-	   int src_offset, int n, int bits_big_endian_p)
+	   LONGEST src_offset, LONGEST n, int bits_big_endian_p)
 {
   unsigned int accum, mask;
   int accum_bits, chunk_size;
@@ -2376,7 +2379,7 @@ ada_value_assign (struct value *toval, s
     {
       int len = (value_bitpos (toval)
 		 + bits + HOST_CHAR_BIT - 1) / HOST_CHAR_BIT;
-      int from_size;
+      LONGEST from_size;
       char *buffer = (char *) alloca (len);
       struct value *val;
       CORE_ADDR to_addr = value_address (toval);
@@ -2422,7 +2425,7 @@ value_assign_to_component (struct value 
     (LONGEST)  (value_address (component) - value_address (container));
   int bit_offset_in_container = 
     value_bitpos (component) - value_bitpos (container);
-  int bits;
+  LONGEST bits;
   
   val = value_cast (value_type (component), val);
 
@@ -3918,7 +3921,7 @@ ensure_lval (struct value *val, struct g
 {
   if (! VALUE_LVAL (val))
     {
-      int len = TYPE_LENGTH (ada_check_typedef (value_type (val)));
+      LONGEST len = TYPE_LENGTH (ada_check_typedef (value_type (val)));
 
       /* The following is taken from the structure-return code in
 	 call_function_by_hand. FIXME: Therefore, some refactoring seems 
@@ -4014,7 +4017,7 @@ static CORE_ADDR
 value_pointer (struct value *value, struct type *type)
 {
   struct gdbarch *gdbarch = get_type_arch (type);
-  unsigned len = TYPE_LENGTH (type);
+  ULONGEST len = TYPE_LENGTH (type);
   gdb_byte *buf = alloca (len);
   CORE_ADDR addr;
 
@@ -5562,7 +5565,7 @@ value_tag_from_contents_and_address (str
 				     const gdb_byte *valaddr,
                                      CORE_ADDR address)
 {
-  int tag_byte_offset;
+  LONGEST tag_byte_offset;
   struct type *tag_type;
 
   if (find_struct_field ("_tag", type, 0, &tag_type, &tag_byte_offset,
@@ -5940,7 +5943,7 @@ ada_in_variant (LONGEST val, struct type
    only in that it can handle packed values of arbitrary type.  */
 
 static struct value *
-ada_value_primitive_field (struct value *arg1, int offset, int fieldno,
+ada_value_primitive_field (struct value *arg1, LONGEST offset, int fieldno,
                            struct type *arg_type)
 {
   struct type *type;
@@ -5952,7 +5955,7 @@ ada_value_primitive_field (struct value 
 
   if (TYPE_FIELD_BITSIZE (arg_type, fieldno) != 0)
     {
-      int bit_pos = TYPE_FIELD_BITPOS (arg_type, fieldno);
+      LONGEST bit_pos = TYPE_FIELD_BITPOS (arg_type, fieldno);
       int bit_size = TYPE_FIELD_BITSIZE (arg_type, fieldno);
 
       return ada_value_primitive_packed_val (arg1, value_contents (arg1),
@@ -5979,9 +5982,9 @@ ada_value_primitive_field (struct value 
    Returns 1 if found, 0 otherwise. */
 
 static int
-find_struct_field (char *name, struct type *type, int offset,
+find_struct_field (char *name, struct type *type, LONGEST offset,
                    struct type **field_type_p,
-                   int *byte_offset_p, int *bit_offset_p, int *bit_size_p,
+                   LONGEST *byte_offset_p, int *bit_offset_p, int *bit_size_p,
 		   int *index_p)
 {
   int i;
@@ -5999,8 +6002,8 @@ find_struct_field (char *name, struct ty
 
   for (i = 0; i < TYPE_NFIELDS (type); i += 1)
     {
-      int bit_pos = TYPE_FIELD_BITPOS (type, i);
-      int fld_offset = offset + bit_pos / 8;
+      LONGEST bit_pos = TYPE_FIELD_BITPOS (type, i);
+      LONGEST fld_offset = offset + bit_pos / 8;
       char *t_field_name = TYPE_FIELD_NAME (type, i);
 
       if (t_field_name == NULL)
@@ -6070,7 +6073,7 @@ num_visible_fields (struct type *type)
    Searches recursively through wrapper fields (e.g., '_parent').  */
 
 static struct value *
-ada_search_struct_field (char *name, struct value *arg, int offset,
+ada_search_struct_field (char *name, struct value *arg, LONGEST offset,
                          struct type *type)
 {
   int i;
@@ -6103,7 +6106,7 @@ ada_search_struct_field (char *name, str
           int j;
           struct type *field_type = ada_check_typedef (TYPE_FIELD_TYPE (type,
 									i));
-          int var_offset = offset + TYPE_FIELD_BITPOS (type, i) / 8;
+	  LONGEST var_offset = offset + TYPE_FIELD_BITPOS (type, i) / 8;
 
           for (j = 0; j < TYPE_NFIELDS (field_type); j += 1)
             {
@@ -6120,8 +6123,8 @@ ada_search_struct_field (char *name, str
   return NULL;
 }
 
-static struct value *ada_index_struct_field_1 (int *, struct value *,
-					       int, struct type *);
+static struct value *ada_index_struct_field_1 (LONGEST *, struct value *,
+					       LONGEST, struct type *);
 
 
 /* Return field #INDEX in ARG, where the index is that returned by
@@ -6130,7 +6133,7 @@ static struct value *ada_index_struct_fi
  * If found, return value, else return NULL. */
 
 static struct value *
-ada_index_struct_field (int index, struct value *arg, int offset,
+ada_index_struct_field (LONGEST index, struct value *arg, LONGEST offset,
 			struct type *type)
 {
   return ada_index_struct_field_1 (&index, arg, offset, type);
@@ -6142,7 +6145,7 @@ ada_index_struct_field (int index, struc
  * *INDEX_P. */
 
 static struct value *
-ada_index_struct_field_1 (int *index_p, struct value *arg, int offset,
+ada_index_struct_field_1 (LONGEST *index_p, struct value *arg, LONGEST offset,
 			  struct type *type)
 {
   int i;
@@ -6232,7 +6235,8 @@ ada_value_struct_elt (struct value *arg,
     v = ada_search_struct_field (name, arg, 0, t);
   else
     {
-      int bit_offset, bit_size, byte_offset;
+      int bit_offset, bit_size;
+      LONGEST byte_offset;
       struct type *field_type;
       CORE_ADDR address;
 
@@ -6537,8 +6541,8 @@ ada_coerce_ref (struct value *val0)
 /* Return OFF rounded upward if necessary to a multiple of
    ALIGNMENT (a power of 2).  */
 
-static unsigned int
-align_value (unsigned int off, unsigned int alignment)
+static ULONGEST
+align_value (ULONGEST off, ULONGEST alignment)
 {
   return (off + alignment - 1) & ~(alignment - 1);
 }
@@ -6911,10 +6915,10 @@ ada_template_to_fixed_record_type_1 (str
   struct value *mark = value_mark ();
   struct value *dval;
   struct type *rtype;
-  int nfields, bit_len;
+  int nfields;
   int variant_field;
-  long off;
-  int fld_bit_len, bit_incr;
+  int bit_incr;
+  LONGEST off, bit_len, fld_bit_len;
   int f;
 
   /* Compute the number of fields in this record type that are going
@@ -6985,7 +6989,7 @@ ada_template_to_fixed_record_type_1 (str
 	     that follow this one.  */
 	  if (ada_is_aligner_type (field_type))
 	    {
-	      long field_offset = TYPE_FIELD_BITPOS (field_type, f);
+	      LONGEST field_offset = TYPE_FIELD_BITPOS (field_type, f);
 
 	      field_valaddr = cond_offset_host (field_valaddr, field_offset);
 	      field_address = cond_offset_target (field_address, field_offset);
@@ -7081,11 +7085,11 @@ ada_template_to_fixed_record_type_1 (str
   if (TYPE_LENGTH (type) <= 0)
     {
       if (TYPE_NAME (rtype))
-	warning (_("Invalid type size for `%s' detected: %d."),
-		 TYPE_NAME (rtype), TYPE_LENGTH (type));
+	warning (_("Invalid type size for `%s' detected: %s."),
+		 TYPE_NAME (rtype), pulongest (TYPE_LENGTH (type)));
       else
-	warning (_("Invalid type size for <unnamed> detected: %d."),
-		 TYPE_LENGTH (type));
+	warning (_("Invalid type size for <unnamed> detected: %s."),
+		 pulongest (TYPE_LENGTH (type)));
     }
   else
     {
@@ -7416,7 +7420,8 @@ to_fixed_array_type (struct type *type0,
 	 type was a regular (non-packed) array type.  As a result, the
 	 bitsize of the array elements needs to be set again, and the array
 	 length needs to be recomputed based on that bitsize.  */
-      int len = TYPE_LENGTH (result) / TYPE_LENGTH (TYPE_TARGET_TYPE (result));
+      LONGEST len = (TYPE_LENGTH (result)
+		     / TYPE_LENGTH (TYPE_TARGET_TYPE (result)));
       int elt_bitsize = TYPE_FIELD_BITSIZE (type0, 0);
 
       TYPE_FIELD_BITSIZE (result, 0) = TYPE_FIELD_BITSIZE (type0, 0);
Index: gdb-7.2-patched/gdb/ada-lang.h
===================================================================
--- gdb-7.2-patched.orig/gdb/ada-lang.h
+++ gdb-7.2-patched/gdb/ada-lang.h
@@ -162,7 +162,7 @@ extern void ada_print_type (struct type 
 extern void ada_print_typedef (struct type *type, struct symbol *new_symbol,
 			       struct ui_file *stream);
 
-extern int ada_val_print (struct type *, const gdb_byte *, int, CORE_ADDR,
+extern int ada_val_print (struct type *, const gdb_byte *, LONGEST, CORE_ADDR,
                           struct ui_file *, int,
 			  const struct value *,
 			  const struct value_print_options *);
@@ -177,7 +177,7 @@ extern void ada_emit_char (int, struct t
 extern void ada_printchar (int, struct type *, struct ui_file *);
 
 extern void ada_printstr (struct ui_file *, struct type *, const gdb_byte *,
-			  unsigned int, const char *, int,
+			  ULONGEST, const char *, int,
 			  const struct value_print_options *);
 
 struct value *ada_convert_actual (struct value *actual,
@@ -255,7 +255,7 @@ extern int ada_is_constrained_packed_arr
 
 extern struct value *ada_value_primitive_packed_val (struct value *,
 						     const gdb_byte *,
-                                                     long, int, int,
+						     LONGEST, int, int,
                                                      struct type *);
 
 extern struct type *ada_coerce_to_simple_array_type (struct type *);
Index: gdb-7.2-patched/gdb/ada-typeprint.c
===================================================================
--- gdb-7.2-patched.orig/gdb/ada-typeprint.c
+++ gdb-7.2-patched/gdb/ada-typeprint.c
@@ -790,8 +790,8 @@ ada_print_type (struct type *type0, cons
 	    char *name = ada_type_name (type);
 
 	    if (!ada_is_range_type_name (name))
-	      fprintf_filtered (stream, _("<%d-byte integer>"),
-				TYPE_LENGTH (type));
+	      fprintf_filtered (stream, _("<%s-byte integer>"),
+				pulongest (TYPE_LENGTH (type)));
 	    else
 	      {
 		fprintf_filtered (stream, "range ");
@@ -812,7 +812,8 @@ ada_print_type (struct type *type0, cons
 	  }
 	break;
       case TYPE_CODE_FLT:
-	fprintf_filtered (stream, _("<%d-byte float>"), TYPE_LENGTH (type));
+	fprintf_filtered (stream, _("<%s-byte float>"),
+			  pulongest (TYPE_LENGTH (type)));
 	break;
       case TYPE_CODE_ENUM:
 	if (show < 0)
Index: gdb-7.2-patched/gdb/ada-valprint.c
===================================================================
--- gdb-7.2-patched.orig/gdb/ada-valprint.c
+++ gdb-7.2-patched/gdb/ada-valprint.c
@@ -50,7 +50,8 @@ static int print_field_values (struct ty
 
 static void adjust_type_signedness (struct type *);
 
-static int ada_val_print_1 (struct type *, const gdb_byte *, int, CORE_ADDR,
+static int ada_val_print_1 (struct type *, const gdb_byte *, LONGEST,
+			    CORE_ADDR,
 			    struct ui_file *, int,
 			    const struct value *,
 			    const struct value_print_options *);
@@ -143,7 +144,7 @@ val_print_packed_array_elements (struct 
   unsigned int things_printed = 0;
   unsigned len;
   struct type *elttype, *index_type;
-  unsigned eltlen;
+  ULONGEST eltlen;
   unsigned long bitsize = TYPE_FIELD_BITSIZE (type, 0);
   struct value *mark = value_mark ();
   LONGEST low = 0;
@@ -287,7 +288,7 @@ ada_emit_char (int c, struct type *type,
    or 2) of a character.  */
 
 static int
-char_at (const gdb_byte *string, int i, int type_len,
+char_at (const gdb_byte *string, LONGEST i, int type_len,
 	 enum bfd_endian byte_order)
 {
   if (type_len == 1)
@@ -459,11 +460,11 @@ ada_print_scalar (struct type *type, LON
 
 static void
 printstr (struct ui_file *stream, struct type *elttype, const gdb_byte *string,
-	  unsigned int length, int force_ellipses, int type_len,
+	  ULONGEST length, int force_ellipses, int type_len,
 	  const struct value_print_options *options)
 {
   enum bfd_endian byte_order = gdbarch_byte_order (get_type_arch (elttype));
-  unsigned int i;
+  ULONGEST i;
   unsigned int things_printed = 0;
   int in_quotes = 0;
   int need_comma = 0;
@@ -478,9 +479,9 @@ printstr (struct ui_file *stream, struct
     {
       /* Position of the character we are examining
          to see whether it is repeated.  */
-      unsigned int rep1;
+      ULONGEST rep1;
       /* Number of repetitions we have detected so far.  */
-      unsigned int reps;
+      ULONGEST reps;
 
       QUIT;
 
@@ -514,7 +515,8 @@ printstr (struct ui_file *stream, struct
 	  ada_emit_char (char_at (string, i, type_len, byte_order),
 			 elttype, stream, '\'', type_len);
 	  fputs_filtered ("'", stream);
-	  fprintf_filtered (stream, _(" <repeats %u times>"), reps);
+	  fprintf_filtered (stream, _(" <repeats %s times>"),
+			    pulongest (reps));
 	  i = rep1 - 1;
 	  things_printed += options->repeat_count_threshold;
 	  need_comma = 1;
@@ -550,7 +552,7 @@ printstr (struct ui_file *stream, struct
 
 void
 ada_printstr (struct ui_file *stream, struct type *type, const gdb_byte *string,
-	      unsigned int length, const char *encoding, int force_ellipses,
+	      ULONGEST length, const char *encoding, int force_ellipses,
 	      const struct value_print_options *options)
 {
   printstr (stream, type, string, length, force_ellipses, TYPE_LENGTH (type),
@@ -570,7 +572,7 @@ ada_printstr (struct ui_file *stream, st
 
 int
 ada_val_print (struct type *type, const gdb_byte *valaddr0,
-	       int embedded_offset, CORE_ADDR address,
+	       LONGEST embedded_offset, CORE_ADDR address,
 	       struct ui_file *stream, int recurse,
 	       const struct value *val,
 	       const struct value_print_options *options)
@@ -603,8 +605,8 @@ ada_val_print_array (struct type *type, 
 {
   enum bfd_endian byte_order = gdbarch_byte_order (get_type_arch (type));
   struct type *elttype = TYPE_TARGET_TYPE (type);
-  unsigned int eltlen;
-  unsigned int len;
+  ULONGEST eltlen;
+  ULONGEST len;
   int result = 0;
 
   if (elttype == NULL)
@@ -627,7 +629,7 @@ ada_val_print_array (struct type *type, 
          elements up to it.  */
       if (options->stop_print_at_null)
         {
-          int temp_len;
+          LONGEST temp_len;
 
           /* Look for a NULL char.  */
           for (temp_len = 0;
@@ -662,7 +664,7 @@ ada_val_print_array (struct type *type, 
 
 static int
 ada_val_print_1 (struct type *type, const gdb_byte *valaddr0,
-		 int embedded_offset, CORE_ADDR address,
+		 LONGEST embedded_offset, CORE_ADDR address,
 		 struct ui_file *stream, int recurse,
 		 const struct value *original_value,
 		 const struct value_print_options *options)
@@ -1082,7 +1084,7 @@ print_field_values (struct type *type, c
 	    }
 	  else
 	    {
-	      int bit_pos = TYPE_FIELD_BITPOS (type, i);
+	      LONGEST bit_pos = TYPE_FIELD_BITPOS (type, i);
 	      int bit_size = TYPE_FIELD_BITSIZE (type, i);
 	      struct value_print_options opts;
 
Index: gdb-7.2-patched/gdb/annotate.c
===================================================================
--- gdb-7.2-patched.orig/gdb/annotate.c
+++ gdb-7.2-patched/gdb/annotate.c
@@ -522,21 +522,21 @@ annotate_frame_end (void)
 }
 
 void
-annotate_array_section_begin (int index, struct type *elttype)
+annotate_array_section_begin (LONGEST index, struct type *elttype)
 {
   if (annotation_level == 2)
     {
-      printf_filtered (("\n\032\032array-section-begin %d "), index);
+      printf_filtered (("\n\032\032array-section-begin %s "), plongest (index));
       print_value_flags (elttype);
       printf_filtered (("\n"));
     }
 }
 
 void
-annotate_elt_rep (unsigned int repcount)
+annotate_elt_rep (ULONGEST repcount)
 {
   if (annotation_level == 2)
-    printf_filtered (("\n\032\032elt-rep %u\n"), repcount);
+    printf_filtered (("\n\032\032elt-rep %s\n"), pulongest (repcount));
 }
 
 void
Index: gdb-7.2-patched/gdb/annotate.h
===================================================================
--- gdb-7.2-patched.orig/gdb/annotate.h
+++ gdb-7.2-patched/gdb/annotate.h
@@ -94,8 +94,8 @@ extern void annotate_frame_source_end (v
 extern void annotate_frame_where (void);
 extern void annotate_frame_end (void);
 
-extern void annotate_array_section_begin (int, struct type *);
-extern void annotate_elt_rep (unsigned int);
+extern void annotate_array_section_begin (LONGEST, struct type *);
+extern void annotate_elt_rep (ULONGEST);
 extern void annotate_elt_rep_end (void);
 extern void annotate_elt (void);
 extern void annotate_array_section_end (void);
Index: gdb-7.2-patched/gdb/ax-gdb.c
===================================================================
--- gdb-7.2-patched.orig/gdb/ax-gdb.c
+++ gdb-7.2-patched/gdb/ax-gdb.c
@@ -75,12 +75,12 @@ static void gen_traced_pop (struct gdbar
 static void gen_sign_extend (struct agent_expr *, struct type *);
 static void gen_extend (struct agent_expr *, struct type *);
 static void gen_fetch (struct agent_expr *, struct type *);
-static void gen_left_shift (struct agent_expr *, int);
+static void gen_left_shift (struct agent_expr *, LONGEST);
 
 
 static void gen_frame_args_address (struct gdbarch *, struct agent_expr *);
 static void gen_frame_locals_address (struct gdbarch *, struct agent_expr *);
-static void gen_offset (struct agent_expr *ax, int offset);
+static void gen_offset (struct agent_expr *ax, LONGEST offset);
 static void gen_sym_offset (struct agent_expr *, struct symbol *);
 static void gen_var_ref (struct gdbarch *, struct agent_expr *ax,
 			 struct axs_value *value, struct symbol *var);
@@ -130,15 +130,16 @@ static void gen_deref (struct agent_expr
 static void gen_address_of (struct agent_expr *, struct axs_value *);
 static void gen_bitfield_ref (struct expression *exp, struct agent_expr *ax,
 			      struct axs_value *value,
-			      struct type *type, int start, int end);
+			      struct type *type, LONGEST start, LONGEST end);
 static void gen_primitive_field (struct expression *exp,
 				 struct agent_expr *ax,
 				 struct axs_value *value,
-				 int offset, int fieldno, struct type *type);
+				 LONGEST offset, int fieldno,
+				 struct type *type);
 static int gen_struct_ref_recursive (struct expression *exp,
 				     struct agent_expr *ax,
 				     struct axs_value *value,
-				     char *field, int offset,
+				     char *field, LONGEST offset,
 				     struct type *type);
 static void gen_struct_ref (struct expression *exp, struct agent_expr *ax,
 			    struct axs_value *value,
@@ -528,7 +529,7 @@ gen_fetch (struct agent_expr *ax, struct
    right shift it by -DISTANCE bits if DISTANCE < 0.  This generates
    unsigned (logical) right shifts.  */
 static void
-gen_left_shift (struct agent_expr *ax, int distance)
+gen_left_shift (struct agent_expr *ax, LONGEST distance)
 {
   if (distance > 0)
     {
@@ -582,7 +583,7 @@ gen_frame_locals_address (struct gdbarch
    programming in ML, it would be clearer why these are the same
    thing.  */
 static void
-gen_offset (struct agent_expr *ax, int offset)
+gen_offset (struct agent_expr *ax, LONGEST offset)
 {
   /* It would suffice to simply push the offset and add it, but this
      makes it easier to read positive and negative offsets in the
@@ -1242,7 +1243,7 @@ gen_address_of (struct agent_expr *ax, s
 static void
 gen_bitfield_ref (struct expression *exp, struct agent_expr *ax,
 		  struct axs_value *value, struct type *type,
-		  int start, int end)
+		  LONGEST start, LONGEST end)
 {
   /* Note that ops[i] fetches 8 << i bits.  */
   static enum agent_op ops[]
@@ -1277,13 +1278,13 @@ gen_bitfield_ref (struct expression *exp
 
   /* The first and one-after-last bits in the field, but rounded down
      and up to byte boundaries.  */
-  int bound_start = (start / TARGET_CHAR_BIT) * TARGET_CHAR_BIT;
-  int bound_end = (((end + TARGET_CHAR_BIT - 1)
-		    / TARGET_CHAR_BIT)
-		   * TARGET_CHAR_BIT);
+  LONGEST bound_start = (start / TARGET_CHAR_BIT) * TARGET_CHAR_BIT;
+  LONGEST bound_end = (((end + TARGET_CHAR_BIT - 1)
+			/ TARGET_CHAR_BIT)
+		       * TARGET_CHAR_BIT);
 
   /* current bit offset within the structure */
-  int offset;
+  LONGEST offset;
 
   /* The index in ops of the opcode we're considering.  */
   int op;
@@ -1402,7 +1403,7 @@ gen_bitfield_ref (struct expression *exp
 static void
 gen_primitive_field (struct expression *exp,
 		     struct agent_expr *ax, struct axs_value *value,
-		     int offset, int fieldno, struct type *type)
+		     LONGEST offset, int fieldno, struct type *type)
 {
   /* Is this a bitfield?  */
   if (TYPE_FIELD_PACKED (type, fieldno))
@@ -1427,7 +1428,7 @@ gen_primitive_field (struct expression *
 static int
 gen_struct_ref_recursive (struct expression *exp, struct agent_expr *ax,
 			  struct axs_value *value,
-			  char *field, int offset, struct type *type)
+			  char *field, LONGEST offset, struct type *type)
 {
   int i, rslt;
   int nbases = TYPE_N_BASECLASSES (type);
Index: gdb-7.2-patched/gdb/ax-general.c
===================================================================
--- gdb-7.2-patched.orig/gdb/ax-general.c
+++ gdb-7.2-patched/gdb/ax-general.c
@@ -178,7 +178,7 @@ ax_zero_ext (struct agent_expr *x, int n
 
 /* Append a trace_quick instruction to EXPR, to record N bytes.  */
 void
-ax_trace_quick (struct agent_expr *x, int n)
+ax_trace_quick (struct agent_expr *x, LONGEST n)
 {
   /* N must fit in a byte.  */
   if (n < 0 || n > 255)
Index: gdb-7.2-patched/gdb/ax.h
===================================================================
--- gdb-7.2-patched.orig/gdb/ax.h
+++ gdb-7.2-patched/gdb/ax.h
@@ -231,7 +231,7 @@ extern void ax_ext (struct agent_expr *E
 extern void ax_zero_ext (struct agent_expr *EXPR, int N);
 
 /* Append a trace_quick instruction to EXPR, to record N bytes.  */
-extern void ax_trace_quick (struct agent_expr *EXPR, int N);
+extern void ax_trace_quick (struct agent_expr *EXPR, LONGEST N);
 
 /* Append a goto op to EXPR.  OP is the actual op (must be aop_goto or
    aop_if_goto).  We assume we don't know the target offset yet,
Index: gdb-7.2-patched/gdb/breakpoint.h
===================================================================
--- gdb-7.2-patched.orig/gdb/breakpoint.h
+++ gdb-7.2-patched/gdb/breakpoint.h
@@ -316,7 +316,7 @@ struct bp_location
   CORE_ADDR address;
 
   /* For hardware watchpoints, the size of data ad ADDRESS being watches.  */
-  int length;
+  LONGEST length;
 
   /* Type of hardware watchpoint. */
   enum target_hw_bp_type watchpoint_type;
Index: gdb-7.2-patched/gdb/c-lang.c
===================================================================
--- gdb-7.2-patched.orig/gdb/c-lang.c
+++ gdb-7.2-patched/gdb/c-lang.c
@@ -372,7 +372,7 @@ c_printchar (int c, struct type *type, s
 
 void
 c_printstr (struct ui_file *stream, struct type *type, const gdb_byte *string,
-	    unsigned int length, const char *user_encoding, int force_ellipses,
+	    ULONGEST length, const char *user_encoding, int force_ellipses,
 	    const struct value_print_options *options)
 {
   enum bfd_endian byte_order = gdbarch_byte_order (get_type_arch (type));
@@ -1046,7 +1046,7 @@ evaluate_subexp_c (struct type *expect_t
 	  }
 	else
 	  {
-	    int i;
+	    LONGEST i;
 
 	    /* Write the terminating character.  */
 	    for (i = 0; i < TYPE_LENGTH (type); ++i)
@@ -1055,7 +1055,7 @@ evaluate_subexp_c (struct type *expect_t
 	    if (satisfy_expected)
 	      {
 		LONGEST low_bound, high_bound;
-		int element_size = TYPE_LENGTH (type);
+		LONGEST element_size = TYPE_LENGTH (type);
 
 		if (get_discrete_bounds (TYPE_INDEX_TYPE (expect_type),
 					 &low_bound, &high_bound) < 0)
Index: gdb-7.2-patched/gdb/c-lang.h
===================================================================
--- gdb-7.2-patched.orig/gdb/c-lang.h
+++ gdb-7.2-patched/gdb/c-lang.h
@@ -68,7 +68,7 @@ extern void c_print_type (struct type *,
 
 extern void c_print_typedef (struct type *, struct symbol *, struct ui_file *);
 
-extern int c_val_print (struct type *, const gdb_byte *, int, CORE_ADDR,
+extern int c_val_print (struct type *, const gdb_byte *, LONGEST, CORE_ADDR,
 			struct ui_file *, int,
 			const struct value *,
 			const struct value_print_options *);
@@ -81,7 +81,7 @@ extern int c_value_print (struct value *
 extern void c_printchar (int, struct type *, struct ui_file *);
 
 extern void c_printstr (struct ui_file * stream, struct type *elttype,
-			const gdb_byte *string, unsigned int length,
+			const gdb_byte *string, ULONGEST length,
 			const char *user_encoding, int force_ellipses,
 			const struct value_print_options *options);
 
@@ -103,14 +103,14 @@ extern void cp_print_class_member (const
 				   struct ui_file *, char *);
 
 extern void cp_print_value_fields (struct type *, struct type *,
-				   const gdb_byte *, int, CORE_ADDR,
+				   const gdb_byte *, LONGEST, CORE_ADDR,
 				   struct ui_file *, int,
 				   const struct value *,
 				   const struct value_print_options *,
 				   struct type **, int);
 
 extern void cp_print_value_fields_rtti (struct type *,
-					const gdb_byte *, int, CORE_ADDR,
+					const gdb_byte *, LONGEST, CORE_ADDR,
 					struct ui_file *, int,
 					const struct value *,
 					const struct value_print_options *,
Index: gdb-7.2-patched/gdb/c-valprint.c
===================================================================
--- gdb-7.2-patched.orig/gdb/c-valprint.c
+++ gdb-7.2-patched/gdb/c-valprint.c
@@ -148,7 +148,7 @@ c_textual_element_type (struct type *typ
    printed.  */
 
 int
-c_val_print (struct type *type, const gdb_byte *valaddr, int embedded_offset,
+c_val_print (struct type *type, const gdb_byte *valaddr, LONGEST embedded_offset,
 	     CORE_ADDR address, struct ui_file *stream, int recurse,
 	     const struct value *original_value,
 	     const struct value_print_options *options)
@@ -159,7 +159,7 @@ c_val_print (struct type *type, const gd
   unsigned len;
   struct type *elttype, *unresolved_elttype;
   struct type *unresolved_type = type;
-  unsigned eltlen;
+  ULONGEST eltlen;
   LONGEST val;
   CORE_ADDR addr;
 
@@ -389,8 +389,8 @@ c_val_print (struct type *type, const gd
 	  /* Print the unmangled name if desired.  */
 	  /* Print vtable entry - we only get here if NOT using
 	     -fvtable_thunks.  (Otherwise, look under TYPE_CODE_PTR.) */
-	  int offset = (embedded_offset +
-			TYPE_FIELD_BITPOS (type, VTBL_FNADDR_OFFSET) / 8);
+	  LONGEST offset = (embedded_offset +
+			    TYPE_FIELD_BITPOS (type, VTBL_FNADDR_OFFSET) / 8);
 	  struct type *field_type = TYPE_FIELD_TYPE (type, VTBL_FNADDR_OFFSET);
 	  CORE_ADDR addr
 	    = extract_typed_address (valaddr + offset, field_type);
@@ -603,7 +603,8 @@ c_value_print (struct value *val, struct
 	       const struct value_print_options *options)
 {
   struct type *type, *real_type, *val_type;
-  int full, top, using_enc;
+  int full, using_enc;
+  LONGEST top;
   struct value_print_options opts = *options;
 
   opts.deref_ref = 1;
Index: gdb-7.2-patched/gdb/cp-abi.c
===================================================================
--- gdb-7.2-patched.orig/gdb/cp-abi.c
+++ gdb-7.2-patched/gdb/cp-abi.c
@@ -69,7 +69,7 @@ is_operator_name (const char *name)
   return (*current_cp_abi.is_operator_name) (name);
 }
 
-int
+LONGEST
 baseclass_offset (struct type *type, int index, const bfd_byte *valaddr,
 		  CORE_ADDR address)
 {
@@ -80,7 +80,7 @@ baseclass_offset (struct type *type, int
 
 struct value *
 value_virtual_fn_field (struct value **arg1p, struct fn_field *f, int j,
-			struct type *type, int offset)
+			struct type *type, LONGEST offset)
 {
   if ((current_cp_abi.virtual_fn_field) == NULL)
     return NULL;
@@ -88,7 +88,7 @@ value_virtual_fn_field (struct value **a
 }
 
 struct type *
-value_rtti_type (struct value *v, int *full, int *top, int *using_enc)
+value_rtti_type (struct value *v, int *full, LONGEST *top, int *using_enc)
 {
   struct type *ret = NULL;
   struct gdb_exception e;
Index: gdb-7.2-patched/gdb/cp-abi.h
===================================================================
--- gdb-7.2-patched.orig/gdb/cp-abi.h
+++ gdb-7.2-patched/gdb/cp-abi.h
@@ -106,7 +106,8 @@ extern int is_operator_name (const char 
    type within *VALUEP.  */
 extern struct value *value_virtual_fn_field (struct value **valuep,
 					     struct fn_field *f, int j,
-					     struct type *type, int offset);
+					     struct type *type,
+					     LONGEST offset);
 
 
 /* Try to find the run-time type of VALUE, using C++ run-time type
@@ -133,7 +134,7 @@ extern struct value *value_virtual_fn_fi
    FULL, TOP, and USING_ENC can each be zero, in which case we don't
    provide the corresponding piece of information.  */
 extern struct type *value_rtti_type (struct value *value,
-                                     int *full, int *top, int *using_enc);
+                                     int *full, LONGEST *top, int *using_enc);
 
 /* Compute the offset of the baseclass which is
    the INDEXth baseclass of class TYPE,
@@ -143,8 +144,8 @@ extern struct type *value_rtti_type (str
 
    -1 is returned on error. */
 
-extern int baseclass_offset (struct type *type, int index,
-			     const bfd_byte *valaddr, CORE_ADDR address);
+extern LONGEST baseclass_offset (struct type *type, int index,
+				 const bfd_byte *valaddr, CORE_ADDR address);
                   
 /* Describe the target of a pointer to method.  CONTENTS is the byte
    pattern representing the pointer to method.  TYPE is the pointer to
@@ -188,11 +189,11 @@ struct cp_abi_ops
   int (*is_vtable_name) (const char *name);
   int (*is_operator_name) (const char *name);
   struct value *(*virtual_fn_field) (struct value **arg1p, struct fn_field * f,
-				     int j, struct type * type, int offset);
-  struct type *(*rtti_type) (struct value *v, int *full, int *top,
+				     int j, struct type * type, LONGEST offset);
+  struct type *(*rtti_type) (struct value *v, int *full, LONGEST *top,
 			     int *using_enc);
-  int (*baseclass_offset) (struct type *type, int index,
-			   const bfd_byte *valaddr, CORE_ADDR address);
+  LONGEST (*baseclass_offset) (struct type *type, int index,
+			       const bfd_byte *valaddr, CORE_ADDR address);
   void (*print_method_ptr) (const gdb_byte *contents, struct type *type,
 			    struct ui_file *stream);
   int (*method_ptr_size) (struct type *);
Index: gdb-7.2-patched/gdb/cp-valprint.c
===================================================================
--- gdb-7.2-patched.orig/gdb/cp-valprint.c
+++ gdb-7.2-patched/gdb/cp-valprint.c
@@ -80,7 +80,7 @@ static void cp_print_static_field (struc
 				   const struct value_print_options *);
 
 static void cp_print_value (struct type *, struct type *, const gdb_byte *,
-			    int, CORE_ADDR, struct ui_file *, int,
+			    LONGEST, CORE_ADDR, struct ui_file *, int,
 			    const struct value *,
 			    const struct value_print_options *, struct type **);
 
@@ -150,7 +150,7 @@ cp_is_vtbl_member (struct type *type)
 
 void
 cp_print_value_fields (struct type *type, struct type *real_type,
-		       const gdb_byte *valaddr, int offset, CORE_ADDR address,
+		       const gdb_byte *valaddr, LONGEST offset, CORE_ADDR address,
 		       struct ui_file *stream, int recurse,
 		       const struct value *val,
 		       const struct value_print_options *options,
@@ -390,7 +390,7 @@ cp_print_value_fields (struct type *type
 
 void
 cp_print_value_fields_rtti (struct type *type,
-			    const gdb_byte *valaddr, int offset,
+			    const gdb_byte *valaddr, LONGEST offset,
 			    CORE_ADDR address,
 			    struct ui_file *stream, int recurse,
 			    const struct value *val,
@@ -406,7 +406,8 @@ cp_print_value_fields_rtti (struct type 
 			TARGET_CHAR_BIT * TYPE_LENGTH (type)))
     {
       struct value *value;
-      int full, top, using_enc;
+      int full, using_enc;
+      LONGEST top;
 
       /* Ugh, we have to convert back to a value here.  */
       value = value_from_contents_and_address (type, valaddr + offset,
@@ -430,7 +431,7 @@ cp_print_value_fields_rtti (struct type 
 
 static void
 cp_print_value (struct type *type, struct type *real_type,
-		const gdb_byte *valaddr, int offset, CORE_ADDR address,
+		const gdb_byte *valaddr, LONGEST offset, CORE_ADDR address,
 		struct ui_file *stream, int recurse,
 		const struct value *val,
 		const struct value_print_options *options,
@@ -440,7 +441,7 @@ cp_print_value (struct type *type, struc
     = (struct type **) obstack_next_free (&dont_print_vb_obstack);
   struct obstack tmp_obstack = dont_print_vb_obstack;
   int i, n_baseclasses = TYPE_N_BASECLASSES (type);
-  int thisoffset;
+  LONGEST thisoffset;
   struct type *thistype;
 
   if (dont_print_vb == 0)
@@ -454,7 +455,7 @@ cp_print_value (struct type *type, struc
 
   for (i = 0; i < n_baseclasses; i++)
     {
-      int boffset;
+      LONGEST boffset;
       int skip;
       struct type *baseclass = check_typedef (TYPE_BASECLASS (type, i));
       char *basename = TYPE_NAME (baseclass);
Index: gdb-7.2-patched/gdb/d-lang.h
===================================================================
--- gdb-7.2-patched.orig/gdb/d-lang.h
+++ gdb-7.2-patched/gdb/d-lang.h
@@ -25,7 +25,7 @@
 extern char *d_demangle (const char *mangled, int options);
 
 extern int d_val_print (struct type *type, const gdb_byte *valaddr,
-			int embedded_offset, CORE_ADDR address,
+			LONGEST embedded_offset, CORE_ADDR address,
 			struct ui_file *stream, int recurse,
 			const struct value *val,
 			const struct value_print_options *options);
Index: gdb-7.2-patched/gdb/d-valprint.c
===================================================================
--- gdb-7.2-patched.orig/gdb/d-valprint.c
+++ gdb-7.2-patched/gdb/d-valprint.c
@@ -29,7 +29,7 @@
    a dynamic array.  */
 static int
 dynamic_array_type (struct type *type, const gdb_byte *valaddr,
-		    int embedded_offset, CORE_ADDR address,
+		    LONGEST embedded_offset, CORE_ADDR address,
 		    struct ui_file *stream, int recurse,
 		    const struct value *val,
 		    const struct value_print_options *options)
@@ -70,7 +70,7 @@ dynamic_array_type (struct type *type, c
 
 /* Implements the la_val_print routine for language D.  */
 int
-d_val_print (struct type *type, const gdb_byte *valaddr, int embedded_offset,
+d_val_print (struct type *type, const gdb_byte *valaddr, LONGEST embedded_offset,
              CORE_ADDR address, struct ui_file *stream, int recurse,
 	     const struct value *val,
              const struct value_print_options *options)
Index: gdb-7.2-patched/gdb/doublest.c
===================================================================
--- gdb-7.2-patched.orig/gdb/doublest.c
+++ gdb-7.2-patched/gdb/doublest.c
@@ -773,7 +773,7 @@ floatformat_from_doublest (const struct 
    but not passed on by GDB.  This should be fixed.  */
 
 static const struct floatformat *
-floatformat_from_length (struct gdbarch *gdbarch, int len)
+floatformat_from_length (struct gdbarch *gdbarch, LONGEST len)
 {
   const struct floatformat *format;
 
@@ -801,8 +801,8 @@ floatformat_from_length (struct gdbarch 
   else
     format = NULL;
   if (format == NULL)
-    error (_("Unrecognized %d-bit floating-point type."),
-	   len * TARGET_CHAR_BIT);
+    error (_("Unrecognized %s-bit floating-point type."),
+	   plongest (len * TARGET_CHAR_BIT));
   return format;
 }
 
Index: gdb-7.2-patched/gdb/dwarf2loc.c
===================================================================
--- gdb-7.2-patched.orig/gdb/dwarf2loc.c
+++ gdb-7.2-patched/gdb/dwarf2loc.c
@@ -594,19 +594,19 @@ insert_bits (unsigned int datum,
    BITS_BIG_ENDIAN is taken directly from gdbarch.  */
 
 static void
-copy_bitwise (gdb_byte *dest, unsigned int dest_offset_bits,
-	      const gdb_byte *source, unsigned int source_offset_bits,
-	      unsigned int bit_count,
+copy_bitwise (gdb_byte *dest, ULONGEST dest_offset_bits,
+	      const gdb_byte *source, ULONGEST source_offset,
+	      ULONGEST bit_count,
 	      int bits_big_endian)
 {
-  unsigned int dest_avail;
+  unsigned int dest_avail, source_offset_bits;
   int datum;
 
   /* Reduce everything to byte-size pieces.  */
   dest += dest_offset_bits / 8;
   dest_offset_bits %= 8;
-  source += source_offset_bits / 8;
-  source_offset_bits %= 8;
+  source += source_offset / 8;
+  source_offset_bits = source_offset % 8;
 
   dest_avail = 8 - dest_offset_bits % 8;
 
@@ -644,12 +644,12 @@ static void
 read_pieced_value (struct value *v)
 {
   int i;
-  long offset = 0;
+  LONGEST offset = 0;
   ULONGEST bits_to_skip;
   gdb_byte *contents;
   struct piece_closure *c = (struct piece_closure *) value_computed_closure (v);
   struct frame_info *frame = frame_find_by_id (VALUE_FRAME_ID (v));
-  size_t type_len;
+  ULONGEST type_len;
   size_t buffer_size = 0;
   char *buffer = NULL;
   struct cleanup *cleanup;
@@ -676,8 +676,8 @@ read_pieced_value (struct value *v)
   for (i = 0; i < c->n_pieces && offset < type_len; i++)
     {
       struct dwarf_expr_piece *p = &c->pieces[i];
-      size_t this_size, this_size_bits;
-      long dest_offset_bits, source_offset_bits, source_offset;
+      ULONGEST this_size, this_size_bits;
+      LONGEST dest_offset_bits, source_offset_bits, source_offset;
       const gdb_byte *intermediate_buffer;
 
       /* Compute size, source, and destination offsets for copying, in
@@ -816,12 +816,12 @@ static void
 write_pieced_value (struct value *to, struct value *from)
 {
   int i;
-  long offset = 0;
+  LONGEST offset = 0;
   ULONGEST bits_to_skip;
   const gdb_byte *contents;
   struct piece_closure *c = (struct piece_closure *) value_computed_closure (to);
   struct frame_info *frame = frame_find_by_id (VALUE_FRAME_ID (to));
-  size_t type_len;
+  ULONGEST type_len;
   size_t buffer_size = 0;
   char *buffer = NULL;
   struct cleanup *cleanup;
@@ -849,8 +849,8 @@ write_pieced_value (struct value *to, st
   for (i = 0; i < c->n_pieces && offset < type_len; i++)
     {
       struct dwarf_expr_piece *p = &c->pieces[i];
-      size_t this_size_bits, this_size;
-      long dest_offset_bits, source_offset_bits, dest_offset, source_offset;
+      ULONGEST this_size_bits, this_size;
+      LONGEST dest_offset_bits, source_offset_bits, dest_offset, source_offset;
       int need_bitwise;
       const gdb_byte *source_buffer;
 
@@ -957,8 +957,8 @@ write_pieced_value (struct value *to, st
 }
 
 static int
-check_pieced_value_bits (const struct value *value, int bit_offset,
-			 int bit_length, int validity)
+check_pieced_value_bits (const struct value *value, LONGEST bit_offset,
+			 LONGEST bit_length, int validity)
 {
   struct piece_closure *c
     = (struct piece_closure *) value_computed_closure (value);
@@ -971,7 +971,7 @@ check_pieced_value_bits (const struct va
   for (i = 0; i < c->n_pieces && bit_length > 0; i++)
     {
       struct dwarf_expr_piece *p = &c->pieces[i];
-      size_t this_size_bits = p->size;
+      ULONGEST this_size_bits = p->size;
 
       if (bit_offset > 0)
 	{
@@ -1003,8 +1003,8 @@ check_pieced_value_bits (const struct va
 }
 
 static int
-check_pieced_value_validity (const struct value *value, int bit_offset,
-			     int bit_length)
+check_pieced_value_validity (const struct value *value, LONGEST bit_offset,
+			     LONGEST bit_length)
 {
   return check_pieced_value_bits (value, bit_offset, bit_length, 1);
 }
@@ -1128,7 +1128,7 @@ dwarf2_evaluate_loc_desc (struct type *t
 	  {
 	    ULONGEST value = dwarf_expr_fetch (ctx, 0);
 	    bfd_byte *contents;
-	    size_t n = ctx->addr_size;
+	    ULONGEST n = ctx->addr_size;
 
 	    retval = allocate_value (type);
 	    contents = value_contents_raw (retval);
@@ -1143,7 +1143,7 @@ dwarf2_evaluate_loc_desc (struct type *t
 	case DWARF_VALUE_LITERAL:
 	  {
 	    bfd_byte *contents;
-	    size_t n = ctx->len;
+	    ULONGEST n = ctx->len;
 
 	    retval = allocate_value (type);
 	    contents = value_contents_raw (retval);
Index: gdb-7.2-patched/gdb/dwarf2read.c
===================================================================
--- gdb-7.2-patched.orig/gdb/dwarf2read.c
+++ gdb-7.2-patched/gdb/dwarf2read.c
@@ -836,12 +836,12 @@ dwarf2_complex_location_expr_complaint (
 }
 
 static void
-dwarf2_const_value_length_mismatch_complaint (const char *arg1, int arg2,
-					      int arg3)
+dwarf2_const_value_length_mismatch_complaint (const char *arg1, LONGEST arg2,
+					      LONGEST arg3)
 {
   complaint (&symfile_complaints,
-	     _("const value length mismatch for '%s', got %d, expected %d"),
-	     arg1, arg2, arg3);
+	     _("const value length mismatch for '%s', got %s, expected %s"),
+	     arg1, plongest (arg2), plongest (arg3));
 }
 
 static void
@@ -6015,8 +6015,8 @@ dwarf2_add_field (struct field_info *fip
 	         object, and then subtract off the number of bits of
 	         the field itself.  The result is the bit offset of
 	         the LSB of the field.  */
-	      int anonymous_size;
-	      int bit_offset = DW_UNSND (attr);
+	      LONGEST anonymous_size;
+	      LONGEST bit_offset = DW_UNSND (attr);
 
 	      attr = dwarf2_attr (die, DW_AT_byte_size, cu);
 	      if (attr)
Index: gdb-7.2-patched/gdb/eval.c
===================================================================
--- gdb-7.2-patched.orig/gdb/eval.c
+++ gdb-7.2-patched/gdb/eval.c
@@ -327,7 +327,8 @@ evaluate_struct_tuple (struct value *str
       int pc = *pos;
       struct value *val = NULL;
       int nlabels = 0;
-      int bitpos, bitsize;
+      int bitsize;
+      LONGEST bitpos;
       bfd_byte *addr;
 
       /* Skip past the labels, and count them. */
@@ -468,7 +469,7 @@ init_array_element (struct value *array,
 		    enum noside noside, LONGEST low_bound, LONGEST high_bound)
 {
   LONGEST index;
-  int element_size = TYPE_LENGTH (value_type (element));
+  LONGEST element_size = TYPE_LENGTH (value_type (element));
 
   if (exp->elts[*pos].opcode == BINOP_COMMA)
     {
@@ -805,11 +806,11 @@ binop_promote (const struct language_def
     /* FIXME: Also mixed integral/booleans, with result an integer.  */
     {
       const struct builtin_type *builtin = builtin_type (gdbarch);
-      unsigned int promoted_len1 = TYPE_LENGTH (type1);
-      unsigned int promoted_len2 = TYPE_LENGTH (type2);
+      ULONGEST promoted_len1 = TYPE_LENGTH (type1);
+      ULONGEST promoted_len2 = TYPE_LENGTH (type2);
       int is_unsigned1 = TYPE_UNSIGNED (type1);
       int is_unsigned2 = TYPE_UNSIGNED (type2);
-      unsigned int result_len;
+      ULONGEST result_len;
       int unsigned_operation;
 
       /* Determine type length and signedness after promotion for
@@ -959,7 +960,7 @@ evaluate_subexp_standard (struct type *e
   int upper, lower;
   int code;
   int ix;
-  long mem_offset;
+  LONGEST mem_offset;
   struct type **arg_types;
   int save_pos1;
   struct symbol *function = NULL;
@@ -1126,7 +1127,7 @@ evaluate_subexp_standard (struct type *e
 	  struct type *range_type = TYPE_INDEX_TYPE (type);
 	  struct type *element_type = TYPE_TARGET_TYPE (type);
 	  struct value *array = allocate_value (expect_type);
-	  int element_size = TYPE_LENGTH (check_typedef (element_type));
+	  LONGEST element_size = TYPE_LENGTH (check_typedef (element_type));
 	  LONGEST low_bound, high_bound, index;
 
 	  if (get_discrete_bounds (range_type, &low_bound, &high_bound) < 0)
@@ -2065,7 +2066,8 @@ evaluate_subexp_standard (struct type *e
       {
         struct type *type = value_type (arg1);
         struct type *real_type;
-        int full, top, using_enc;
+        int full, using_enc;
+	LONGEST top;
 	struct value_print_options opts;
 
 	get_user_print_options (&opts);
Index: gdb-7.2-patched/gdb/f-lang.c
===================================================================
--- gdb-7.2-patched.orig/gdb/f-lang.c
+++ gdb-7.2-patched/gdb/f-lang.c
@@ -130,7 +130,7 @@ f_printchar (int c, struct type *type, s
 
 static void
 f_printstr (struct ui_file *stream, struct type *type, const gdb_byte *string,
-	    unsigned int length, const char *encoding, int force_ellipses,
+	    ULONGEST length, const char *encoding, int force_ellipses,
 	    const struct value_print_options *options)
 {
   unsigned int i;
Index: gdb-7.2-patched/gdb/f-lang.h
===================================================================
--- gdb-7.2-patched.orig/gdb/f-lang.h
+++ gdb-7.2-patched/gdb/f-lang.h
@@ -32,7 +32,7 @@ extern const char *f_object_address_data
   (struct type *type, struct ui_file *stream);
 extern void f_object_address_data_valid_or_error (struct type *type);
 
-extern int f_val_print (struct type *, const gdb_byte *, int, CORE_ADDR,
+extern int f_val_print (struct type *, const gdb_byte *, LONGEST, CORE_ADDR,
 			struct ui_file *, int,
 			const struct value *,
 			const struct value_print_options *);
Index: gdb-7.2-patched/gdb/f-valprint.c
===================================================================
--- gdb-7.2-patched.orig/gdb/f-valprint.c
+++ gdb-7.2-patched/gdb/f-valprint.c
@@ -44,7 +44,7 @@ static void f77_create_arrayprint_offset
 					      struct ui_file *);
 static void f77_get_dynamic_length_of_aggregate (struct type *);
 
-int f77_array_offset_tbl[MAX_FORTRAN_DIMS + 1][2];
+LONGEST f77_array_offset_tbl[MAX_FORTRAN_DIMS + 1][2];
 
 /* Array which holds offsets to be applied to get a row's elements
    for a given array. Array also holds the size of each subarray.  */
@@ -126,7 +126,7 @@ static void
 f77_create_arrayprint_offset_tbl (struct type *type, struct ui_file *stream)
 {
   struct type *tmp_type;
-  int eltlen;
+  LONGEST eltlen;
   int ndimen = 1;
   int upper, lower;
 
@@ -176,7 +176,7 @@ f77_print_array_1 (int nss, int ndimensi
 		   const struct value_print_options *options,
 		   int *elts)
 {
-  int i;
+  LONGEST i;
 
   if (nss != ndimensions)
     {
@@ -251,7 +251,7 @@ f77_print_array (struct type *type, cons
    printed.  */
 
 int
-f_val_print (struct type *type, const gdb_byte *valaddr, int embedded_offset,
+f_val_print (struct type *type, const gdb_byte *valaddr, LONGEST embedded_offset,
 	     CORE_ADDR address, struct ui_file *stream, int recurse,
 	     const struct value *original_value,
 	     const struct value_print_options *options)
@@ -470,7 +470,7 @@ f_val_print (struct type *type, const gd
       fprintf_filtered (stream, "( ");
       for (index = 0; index < TYPE_NFIELDS (type); index++)
         {
-          int offset = TYPE_FIELD_BITPOS (type, index) / 8;
+	  LONGEST offset = TYPE_FIELD_BITPOS (type, index) / 8;
 
           val_print (TYPE_FIELD_TYPE (type, index), valaddr + offset,
 		     embedded_offset, address, stream, recurse + 1,
Index: gdb-7.2-patched/gdb/findvar.c
===================================================================
--- gdb-7.2-patched.orig/gdb/findvar.c
+++ gdb-7.2-patched/gdb/findvar.c
@@ -609,7 +609,7 @@ default_value_from_register (struct type
 			     struct frame_info *frame)
 {
   struct gdbarch *gdbarch = get_frame_arch (frame);
-  int len = TYPE_LENGTH (type);
+  LONGEST len = TYPE_LENGTH (type);
   struct value *value = allocate_value (type);
 
   VALUE_LVAL (value) = lval_register;
Index: gdb-7.2-patched/gdb/frame.c
===================================================================
--- gdb-7.2-patched.orig/gdb/frame.c
+++ gdb-7.2-patched/gdb/frame.c
@@ -990,7 +990,7 @@ frame_register_read (struct frame_info *
 
 int
 get_frame_register_bytes (struct frame_info *frame, int regnum,
-			  CORE_ADDR offset, int len, gdb_byte *myaddr)
+			  CORE_ADDR offset, LONGEST len, gdb_byte *myaddr)
 {
   struct gdbarch *gdbarch = get_frame_arch (frame);
   int i;
@@ -1019,7 +1019,7 @@ get_frame_register_bytes (struct frame_i
   if (len > maxsize)
     {
       warning (_("Bad debug information detected: "
-		 "Attempt to read %d bytes from registers."), len);
+		 "Attempt to read %s bytes from registers."), plongest (len));
       return 0;
     }
 
Index: gdb-7.2-patched/gdb/gdbtypes.c
===================================================================
--- gdb-7.2-patched.orig/gdb/gdbtypes.c
+++ gdb-7.2-patched/gdb/gdbtypes.c
@@ -1930,7 +1930,7 @@ allocate_gnat_aux_type (struct type *typ
    where init_type is called with a NULL value for NAME).  */
 
 struct type *
-init_type (enum type_code code, int length, int flags,
+init_type (enum type_code code, LONGEST length, int flags,
 	   char *name, struct objfile *objfile)
 {
   struct type *type;
@@ -2086,7 +2086,7 @@ is_public_ancestor (struct type *base, s
 
 static int
 is_unique_ancestor_worker (struct type *base, struct type *dclass,
-			   int *offset,
+			   LONGEST *offset,
 			   const bfd_byte *contents, CORE_ADDR address)
 {
   int i, count = 0;
@@ -2097,7 +2097,7 @@ is_unique_ancestor_worker (struct type *
   for (i = 0; i < TYPE_N_BASECLASSES (dclass) && count < 2; ++i)
     {
       struct type *iter = check_typedef (TYPE_BASECLASS (dclass, i));
-      int this_offset = baseclass_offset (dclass, i, contents, address);
+      LONGEST this_offset = baseclass_offset (dclass, i, contents, address);
 
       if (this_offset == -1)
 	error (_("virtual baseclass botch"));
@@ -2135,7 +2135,7 @@ is_unique_ancestor_worker (struct type *
 int
 is_unique_ancestor (struct type *base, struct value *val)
 {
-  int offset = -1;
+  LONGEST offset = -1;
 
   return is_unique_ancestor_worker (base, value_type (val), &offset,
 				    value_contents (val),
@@ -2936,7 +2936,7 @@ recursive_dump_type (struct type *type, 
       break;
     }
   puts_filtered ("\n");
-  printfi_filtered (spaces, "length %d\n", TYPE_LENGTH (type));
+  printfi_filtered (spaces, "length %s\n", pulongest (TYPE_LENGTH (type)));
   if (TYPE_OBJFILE_OWNED (type))
     {
       printfi_filtered (spaces, "objfile ");
@@ -3056,8 +3056,8 @@ recursive_dump_type (struct type *type, 
 			  idx, plongest (TYPE_FIELD_ENUMVAL (type, idx)));
       else
 	printfi_filtered (spaces + 2,
-			  "[%d] bitpos %d bitsize %d type ",
-			  idx, TYPE_FIELD_BITPOS (type, idx),
+			  "[%d] bitpos %s bitsize %d type ",
+			  idx, plongest (TYPE_FIELD_BITPOS (type, idx)),
 			  TYPE_FIELD_BITSIZE (type, idx));
       gdb_print_host_address (TYPE_FIELD_TYPE (type, idx), gdb_stdout);
       printf_filtered (" name '%s' (",
@@ -3756,7 +3756,7 @@ free_all_types (void)
    CODE, LENGTH, and NAME fields.  */
 struct type *
 arch_type (struct gdbarch *gdbarch,
-	   enum type_code code, int length, char *name)
+	   enum type_code code, LONGEST length, char *name)
 {
   struct type *type;
 
Index: gdb-7.2-patched/gdb/gdbtypes.h
===================================================================
--- gdb-7.2-patched.orig/gdb/gdbtypes.h
+++ gdb-7.2-patched/gdb/gdbtypes.h
@@ -577,7 +577,7 @@ struct main_type
 	   For gdbarch_bits_big_endian=0 targets, it is the bit offset to the
 	   LSB.  */
 
-	int bitpos;
+	LONGEST bitpos;
 
 	/* Enum value.  */
 	LONGEST enumval;
@@ -758,7 +758,7 @@ struct type
      HOST_CHAR_BIT.  However, this would still fail to address
      machines based on a ternary or decimal representation.  */
   
-  unsigned length;
+  ULONGEST length;
 
   /* Core type, shared by a group of qualified types.  */
   struct main_type *main_type;
@@ -1390,11 +1390,12 @@ extern struct type *alloc_type_copy (con
 extern struct gdbarch *get_type_arch (const struct type *);
 
 /* Helper function to construct objfile-owned types.  */
-extern struct type *init_type (enum type_code, int, int, char *,
+extern struct type *init_type (enum type_code, LONGEST, int, char *,
 			       struct objfile *);
 
 /* Helper functions to construct architecture-owned types.  */
-extern struct type *arch_type (struct gdbarch *, enum type_code, int, char *);
+extern struct type *arch_type (struct gdbarch *, enum type_code, LONGEST,
+			       char *);
 extern struct type *arch_integer_type (struct gdbarch *, int, int, char *);
 extern struct type *arch_character_type (struct gdbarch *, int, int, char *);
 extern struct type *arch_boolean_type (struct gdbarch *, int, int, char *);
Index: gdb-7.2-patched/gdb/gnu-v2-abi.c
===================================================================
--- gdb-7.2-patched.orig/gdb/gnu-v2-abi.c
+++ gdb-7.2-patched/gdb/gnu-v2-abi.c
@@ -84,7 +84,7 @@ gnuv2_is_operator_name (const char *name
    TYPE is the type in which F is located.  */
 static struct value *
 gnuv2_virtual_fn_field (struct value **arg1p, struct fn_field * f, int j,
-			struct type * type, int offset)
+			struct type *type, LONGEST offset)
 {
   struct value *arg1 = *arg1p;
   struct type *type1 = check_typedef (value_type (arg1));
@@ -182,7 +182,8 @@ gnuv2_virtual_fn_field (struct value **a
 
 
 static struct type *
-gnuv2_value_rtti_type (struct value *v, int *full, int *top, int *using_enc)
+gnuv2_value_rtti_type (struct value *v, int *full, LONGEST *top,
+		       int *using_enc)
 {
   struct type *known_type;
   struct type *rtti_type;
@@ -341,7 +342,7 @@ vb_match (struct type *type, int index, 
 
    -1 is returned on error. */
 
-static int
+static LONGEST
 gnuv2_baseclass_offset (struct type *type, int index,
 			const bfd_byte *valaddr, CORE_ADDR address)
 {
@@ -369,7 +370,7 @@ gnuv2_baseclass_offset (struct type *typ
       /* Not in the fields, so try looking through the baseclasses.  */
       for (i = index + 1; i < n_baseclasses; i++)
 	{
-	  int boffset =
+	  LONGEST boffset =
 	    baseclass_offset (type, i, valaddr, address);
 
 	  if (boffset)
Index: gdb-7.2-patched/gdb/gnu-v3-abi.c
===================================================================
--- gdb-7.2-patched.orig/gdb/gnu-v3-abi.c
+++ gdb-7.2-patched/gdb/gnu-v3-abi.c
@@ -105,7 +105,7 @@ build_gdb_vtable_type (struct gdbarch *a
 {
   struct type *t;
   struct field *field_list, *field;
-  int offset;
+  LONGEST offset;
 
   struct type *void_ptr_type
     = builtin_type (arch)->builtin_data_ptr;
@@ -181,7 +181,7 @@ vtable_ptrdiff_type (struct gdbarch *gdb
 /* Return the offset from the start of the imaginary `struct
    gdb_gnu_v3_abi_vtable' object to the vtable's "address point"
    (i.e., where objects' virtual table pointers point).  */
-static int
+static LONGEST
 vtable_address_point_offset (struct gdbarch *gdbarch)
 {
   struct type *vtable_type = gdbarch_data (gdbarch, vtable_type_gdbarch_data);
@@ -271,7 +271,7 @@ gnuv3_get_vtable (struct gdbarch *gdbarc
 
 static struct type *
 gnuv3_rtti_type (struct value *value,
-                 int *full_p, int *top_p, int *using_enc_p)
+                 int *full_p, LONGEST *top_p, int *using_enc_p)
 {
   struct gdbarch *gdbarch;
   struct type *values_type = check_typedef (value_type (value));
@@ -379,7 +379,7 @@ gnuv3_get_virtual_fn (struct gdbarch *gd
 static struct value *
 gnuv3_virtual_fn_field (struct value **value_p,
                         struct fn_field *f, int j,
-			struct type *vfn_base, int offset)
+			struct type *vfn_base, LONGEST offset)
 {
   struct type *values_type = check_typedef (value_type (*value_p));
   struct gdbarch *gdbarch;
@@ -408,7 +408,7 @@ gnuv3_virtual_fn_field (struct value **v
    to (the address of)(ARG) + OFFSET.
 
    -1 is returned on error. */
-static int
+static LONGEST
 gnuv3_baseclass_offset (struct type *type, int index, const bfd_byte *valaddr,
 			CORE_ADDR address)
 {
@@ -416,7 +416,7 @@ gnuv3_baseclass_offset (struct type *typ
   struct type *ptr_type;
   struct value *vtable;
   struct value *vbase_array;
-  long int cur_base_offset, base_offset;
+  LONGEST cur_base_offset, base_offset;
 
   /* Determine architecture.  */
   gdbarch = get_type_arch (type);
@@ -439,7 +439,7 @@ gnuv3_baseclass_offset (struct type *typ
   cur_base_offset = cur_base_offset + vtable_address_point_offset (gdbarch);
   if ((- cur_base_offset) % TYPE_LENGTH (ptr_type) != 0)
     error (_("Misaligned vbase offset."));
-  cur_base_offset = cur_base_offset / ((int) TYPE_LENGTH (ptr_type));
+  cur_base_offset = cur_base_offset / ((LONGEST) TYPE_LENGTH (ptr_type));
 
   vtable = gnuv3_get_vtable (gdbarch, type, address);
   gdb_assert (vtable != NULL);
@@ -483,7 +483,7 @@ gnuv3_find_method_in (struct type *domai
      we're out of luck.  */
   for (i = 0; i < TYPE_N_BASECLASSES (domain); i++)
     {
-      int pos;
+      LONGEST pos;
       struct type *basetype;
 
       if (BASETYPE_VIA_VIRTUAL (domain, i))
Index: gdb-7.2-patched/gdb/i386-nat.c
===================================================================
--- gdb-7.2-patched.orig/gdb/i386-nat.c
+++ gdb-7.2-patched/gdb/i386-nat.c
@@ -190,7 +190,7 @@ static int i386_remove_aligned_watchpoin
    about the number of registers, or -1 on failure.  If WHAT is not a
    valid value, bombs through internal_error.  */
 static int i386_handle_nonaligned_watchpoint (i386_wp_op_t what,
-					      CORE_ADDR addr, int len,
+					      CORE_ADDR addr, LONGEST len,
 					      enum target_hw_bp_type type);
 
 /* Implementation.  */
@@ -411,8 +411,8 @@ i386_remove_aligned_watchpoint (CORE_ADD
    valid value, bombs through internal_error.  */
 
 static int
-i386_handle_nonaligned_watchpoint (i386_wp_op_t what, CORE_ADDR addr, int len,
-				   enum target_hw_bp_type type)
+i386_handle_nonaligned_watchpoint (i386_wp_op_t what, CORE_ADDR addr,
+				   LONGEST len, enum target_hw_bp_type type)
 {
   int retval = 0, status = 0;
   int max_wp_len = TARGET_HAS_DR_LEN_8 ? 8 : 4;
@@ -548,7 +548,7 @@ i386_detach_watchpoints (void)
    address ADDR and whose length is LEN bytes.  */
 
 static int
-i386_region_ok_for_watchpoint (CORE_ADDR addr, int len)
+i386_region_ok_for_watchpoint (CORE_ADDR addr, LONGEST len)
 {
   int nregs;
 
Index: gdb-7.2-patched/gdb/inf-ttrace.c
===================================================================
--- gdb-7.2-patched.orig/gdb/inf-ttrace.c
+++ gdb-7.2-patched/gdb/inf-ttrace.c
@@ -365,7 +365,7 @@ inf_ttrace_can_use_hw_breakpoint (int ty
 }
 
 static int
-inf_ttrace_region_ok_for_hw_watchpoint (CORE_ADDR addr, int len)
+inf_ttrace_region_ok_for_hw_watchpoint (CORE_ADDR addr, LONGEST len)
 {
   return 1;
 }
Index: gdb-7.2-patched/gdb/jv-lang.c
===================================================================
--- gdb-7.2-patched.orig/gdb/jv-lang.c
+++ gdb-7.2-patched/gdb/jv-lang.c
@@ -418,7 +418,7 @@ java_link_class_type (struct gdbarch *gd
   for (i = TYPE_N_BASECLASSES (type); i < nfields; i++)
     {
       int accflags;
-      int boffset;
+      LONGEST boffset;
 
       if (fields == NULL)
 	{
Index: gdb-7.2-patched/gdb/jv-lang.h
===================================================================
--- gdb-7.2-patched.orig/gdb/jv-lang.h
+++ gdb-7.2-patched/gdb/jv-lang.h
@@ -42,7 +42,7 @@ struct builtin_java_type
 
 extern const struct builtin_java_type *builtin_java_type (struct gdbarch *);
 
-extern int java_val_print (struct type *, const gdb_byte *, int, CORE_ADDR,
+extern int java_val_print (struct type *, const gdb_byte *, LONGEST, CORE_ADDR,
 			   struct ui_file *, int,
 			   const struct value *,
 			   const struct value_print_options *);
Index: gdb-7.2-patched/gdb/jv-valprint.c
===================================================================
--- gdb-7.2-patched.orig/gdb/jv-valprint.c
+++ gdb-7.2-patched/gdb/jv-valprint.c
@@ -471,7 +471,7 @@ java_print_value_fields (struct type *ty
 
 int
 java_val_print (struct type *type, const gdb_byte *valaddr,
-		int embedded_offset, CORE_ADDR address,
+		LONGEST embedded_offset, CORE_ADDR address,
 		struct ui_file *stream, int recurse,
 		const struct value *val,
 		const struct value_print_options *options)
Index: gdb-7.2-patched/gdb/language.c
===================================================================
--- gdb-7.2-patched.orig/gdb/language.c
+++ gdb-7.2-patched/gdb/language.c
@@ -1089,7 +1089,7 @@ unk_lang_printchar (int c, struct type *
 
 static void
 unk_lang_printstr (struct ui_file *stream, struct type *type,
-		   const gdb_byte *string, unsigned int length,
+		   const gdb_byte *string, ULONGEST length,
 		   const char *encoding, int force_ellipses,
 		   const struct value_print_options *options)
 {
@@ -1105,7 +1105,7 @@ unk_lang_print_type (struct type *type, 
 
 static int
 unk_lang_val_print (struct type *type, const gdb_byte *valaddr,
-		    int embedded_offset, CORE_ADDR address,
+		    LONGEST embedded_offset, CORE_ADDR address,
 		    struct ui_file *stream, int recurse,
 		    const struct value *val,
 		    const struct value_print_options *options)
Index: gdb-7.2-patched/gdb/language.h
===================================================================
--- gdb-7.2-patched.orig/gdb/language.h
+++ gdb-7.2-patched/gdb/language.h
@@ -189,7 +189,7 @@ struct language_defn
     void (*la_printchar) (int ch, struct type *chtype, struct ui_file * stream);
 
     void (*la_printstr) (struct ui_file * stream, struct type *elttype,
-			 const gdb_byte *string, unsigned int length,
+			 const gdb_byte *string, ULONGEST length,
 			 const char *encoding, int force_ellipses,
 			 const struct value_print_options *);
 
@@ -231,7 +231,7 @@ struct language_defn
 
     int (*la_val_print) (struct type *type,
 			 const gdb_byte *contents,
-			 int embedded_offset, CORE_ADDR address,
+			 LONGEST embedded_offset, CORE_ADDR address,
 			 struct ui_file *stream, int recurse,
 			 const struct value *val,
 			 const struct value_print_options *options);
Index: gdb-7.2-patched/gdb/m2-lang.c
===================================================================
--- gdb-7.2-patched.orig/gdb/m2-lang.c
+++ gdb-7.2-patched/gdb/m2-lang.c
@@ -104,10 +104,10 @@ m2_printchar (int c, struct type *type, 
 
 static void
 m2_printstr (struct ui_file *stream, struct type *type, const gdb_byte *string,
-	     unsigned int length, const char *encoding, int force_ellipses,
+	     ULONGEST length, const char *encoding, int force_ellipses,
 	     const struct value_print_options *options)
 {
-  unsigned int i;
+  ULONGEST i;
   unsigned int things_printed = 0;
   int in_quotes = 0;
   int need_comma = 0;
@@ -122,9 +122,9 @@ m2_printstr (struct ui_file *stream, str
     {
       /* Position of the character we are examining
          to see whether it is repeated.  */
-      unsigned int rep1;
+      ULONGEST rep1;
       /* Number of repetitions we have detected so far.  */
-      unsigned int reps;
+      ULONGEST reps;
 
       QUIT;
 
@@ -153,7 +153,7 @@ m2_printstr (struct ui_file *stream, str
 	      in_quotes = 0;
 	    }
 	  m2_printchar (string[i], type, stream);
-	  fprintf_filtered (stream, " <repeats %u times>", reps);
+	  fprintf_filtered (stream, " <repeats %s times>", pulongest (reps));
 	  i = rep1 - 1;
 	  things_printed += options->repeat_count_threshold;
 	  need_comma = 1;
Index: gdb-7.2-patched/gdb/m2-lang.h
===================================================================
--- gdb-7.2-patched.orig/gdb/m2-lang.h
+++ gdb-7.2-patched/gdb/m2-lang.h
@@ -32,7 +32,7 @@ extern void m2_print_typedef (struct typ
 extern int m2_is_long_set (struct type *type);
 extern int m2_is_unbounded_array (struct type *type);
 
-extern int m2_val_print (struct type *, const gdb_byte *, int, CORE_ADDR,
+extern int m2_val_print (struct type *, const gdb_byte *, LONGEST, CORE_ADDR,
 			 struct ui_file *, int,
 			 const struct value *,
 			 const struct value_print_options *);
Index: gdb-7.2-patched/gdb/m2-typeprint.c
===================================================================
--- gdb-7.2-patched.orig/gdb/m2-typeprint.c
+++ gdb-7.2-patched/gdb/m2-typeprint.c
@@ -228,9 +228,12 @@ static void m2_array (struct type *type,
 	  m2_print_bounds (TYPE_INDEX_TYPE (type), stream, show, -1, 1);
 	}
       else
-	fprintf_filtered (stream, "%d",
-			  (TYPE_LENGTH (type)
-			   / TYPE_LENGTH (TYPE_TARGET_TYPE (type))));
+        {
+	  ULONGEST val = (TYPE_LENGTH (type)
+			  / TYPE_LENGTH (TYPE_TARGET_TYPE (type)));
+
+	  fprintf_filtered (stream, "%s", pulongest (val));
+	}
     }
   fprintf_filtered (stream, "] OF ");
   m2_print_type (TYPE_TARGET_TYPE (type), "", stream, show, level);
Index: gdb-7.2-patched/gdb/m2-valprint.c
===================================================================
--- gdb-7.2-patched.orig/gdb/m2-valprint.c
+++ gdb-7.2-patched/gdb/m2-valprint.c
@@ -36,7 +36,7 @@ static int print_unpacked_pointer (struc
 				   struct ui_file *stream);
 static void
 m2_print_array_contents (struct type *type, const gdb_byte *valaddr,
-			 int embedded_offset, CORE_ADDR address,
+			 LONGEST embedded_offset, CORE_ADDR address,
 			 struct ui_file *stream, int recurse,
 			 const struct value *val,
 			 const struct value_print_options *options,
@@ -89,7 +89,7 @@ get_long_set_bounds (struct type *type, 
 
 static void
 m2_print_long_set (struct type *type, const gdb_byte *valaddr,
-		   int embedded_offset, CORE_ADDR address,
+		   LONGEST embedded_offset, CORE_ADDR address,
 		   struct ui_file *stream)
 {
   int empty_set        = 1;
@@ -180,7 +180,7 @@ m2_print_long_set (struct type *type, co
 
 static void
 m2_print_unbounded_array (struct type *type, const gdb_byte *valaddr,
-			  int embedded_offset, CORE_ADDR address,
+			  LONGEST embedded_offset, CORE_ADDR address,
 			  struct ui_file *stream, int recurse,
 			  const struct value_print_options *options)
 {
@@ -276,7 +276,7 @@ print_variable_at_address (struct type *
 
 static void
 m2_print_array_contents (struct type *type, const gdb_byte *valaddr,
-			 int embedded_offset, CORE_ADDR address,
+			 LONGEST embedded_offset, CORE_ADDR address,
 			 struct ui_file *stream, int recurse,
 			 const struct value *val,
 			 const struct value_print_options *options,
@@ -315,14 +315,14 @@ m2_print_array_contents (struct type *ty
    printed.  */
 
 int
-m2_val_print (struct type *type, const gdb_byte *valaddr, int embedded_offset,
+m2_val_print (struct type *type, const gdb_byte *valaddr, LONGEST embedded_offset,
 	      CORE_ADDR address, struct ui_file *stream, int recurse,
 	      const struct value *original_value,
 	      const struct value_print_options *options)
 {
   struct gdbarch *gdbarch = get_type_arch (type);
-  unsigned int i = 0;	/* Number of characters printed */
-  unsigned len;
+  ULONGEST i = 0;	/* Number of characters printed */
+  ULONGEST len;
   struct type *elttype;
   LONGEST val;
   CORE_ADDR addr;
@@ -348,7 +348,7 @@ m2_val_print (struct type *type, const g
 	         elements up to it.  */
 	      if (options->stop_print_at_null)
 		{
-		  unsigned int temp_len;
+		  ULONGEST temp_len;
 
 		  /* Look for a NULL char. */
 		  for (temp_len = 0;
Index: gdb-7.2-patched/gdb/mips-linux-nat.c
===================================================================
--- gdb-7.2-patched.orig/gdb/mips-linux-nat.c
+++ gdb-7.2-patched/gdb/mips-linux-nat.c
@@ -846,7 +846,7 @@ try_one_watch (struct pt_watch_regs *reg
    the specified region can be covered by the watch registers.  */
 
 static int
-mips_linux_region_ok_for_hw_watchpoint (CORE_ADDR addr, int len)
+mips_linux_region_ok_for_hw_watchpoint (CORE_ADDR addr, LONGEST len)
 {
   struct pt_watch_regs dummy_regs;
   int i;
Index: gdb-7.2-patched/gdb/objc-lang.c
===================================================================
--- gdb-7.2-patched.orig/gdb/objc-lang.c
+++ gdb-7.2-patched/gdb/objc-lang.c
@@ -343,11 +343,11 @@ objc_printchar (int c, struct type *type
 
 static void
 objc_printstr (struct ui_file *stream, struct type *type,
-	       const gdb_byte *string, unsigned int length,
+	       const gdb_byte *string, ULONGEST length,
 	       const char *encoding, int force_ellipses,
 	       const struct value_print_options *options)
 {
-  unsigned int i;
+  ULONGEST i;
   unsigned int things_printed = 0;
   int in_quotes = 0;
   int need_comma = 0;
@@ -368,9 +368,9 @@ objc_printstr (struct ui_file *stream, s
     {
       /* Position of the character we are examining to see whether it
 	 is repeated.  */
-      unsigned int rep1;
+      ULONGEST rep1;
       /* Number of repetitions we have detected so far.  */
-      unsigned int reps;
+      ULONGEST reps;
 
       QUIT;
 
@@ -399,7 +399,7 @@ objc_printstr (struct ui_file *stream, s
 	      in_quotes = 0;
 	    }
 	  objc_printchar (string[i], type, stream);
-	  fprintf_filtered (stream, " <repeats %u times>", reps);
+	  fprintf_filtered (stream, " <repeats %s times>", pulongest (reps));
 	  i = rep1 - 1;
 	  things_printed += options->repeat_count_threshold;
 	  need_comma = 1;
Index: gdb-7.2-patched/gdb/p-lang.c
===================================================================
--- gdb-7.2-patched.orig/gdb/p-lang.c
+++ gdb-7.2-patched/gdb/p-lang.c
@@ -96,8 +96,8 @@ pascal_main_name (void)
    are not multiple of TARGET_CHAR_BIT then the results are wrong
    but this does not happen for Free Pascal nor for GPC.  */
 int
-is_pascal_string_type (struct type *type,int *length_pos,
-                       int *length_size, int *string_pos,
+is_pascal_string_type (struct type *type, LONGEST *length_pos,
+		       LONGEST *length_size, LONGEST *string_pos,
 		       struct type **char_type,
 		       char **arrayname)
 {
@@ -213,12 +213,12 @@ pascal_printchar (int c, struct type *ty
 
 void
 pascal_printstr (struct ui_file *stream, struct type *type,
-		 const gdb_byte *string, unsigned int length,
+		 const gdb_byte *string, ULONGEST length,
 		 const char *encoding, int force_ellipses,
 		 const struct value_print_options *options)
 {
   enum bfd_endian byte_order = gdbarch_byte_order (get_type_arch (type));
-  unsigned int i;
+  ULONGEST i;
   unsigned int things_printed = 0;
   int in_quotes = 0;
   int need_comma = 0;
@@ -246,9 +246,9 @@ pascal_printstr (struct ui_file *stream,
     {
       /* Position of the character we are examining
          to see whether it is repeated.  */
-      unsigned int rep1;
+      ULONGEST rep1;
       /* Number of repetitions we have detected so far.  */
-      unsigned int reps;
+      ULONGEST reps;
       unsigned long int current_char;
 
       QUIT;
@@ -283,7 +283,7 @@ pascal_printstr (struct ui_file *stream,
 	      in_quotes = 0;
 	    }
 	  pascal_printchar (current_char, type, stream);
-	  fprintf_filtered (stream, " <repeats %u times>", reps);
+	  fprintf_filtered (stream, " <repeats %s times>", pulongest (reps));
 	  i = rep1 - 1;
 	  things_printed += options->repeat_count_threshold;
 	  need_comma = 1;
Index: gdb-7.2-patched/gdb/p-lang.h
===================================================================
--- gdb-7.2-patched.orig/gdb/p-lang.h
+++ gdb-7.2-patched/gdb/p-lang.h
@@ -36,7 +36,7 @@ extern void pascal_print_type (struct ty
 extern void pascal_print_typedef (struct type *, struct symbol *,
 				  struct ui_file *);
 
-extern int pascal_val_print (struct type *, const gdb_byte *, int,
+extern int pascal_val_print (struct type *, const gdb_byte *, LONGEST,
 			     CORE_ADDR, struct ui_file *, int,
 			     const struct value *,
 			     const struct value_print_options *);
@@ -50,13 +50,13 @@ extern void pascal_type_print_method_arg
 /* These are in p-lang.c: */
 
 extern int 
-  is_pascal_string_type (struct type *, int *, int *, int *,
+  is_pascal_string_type (struct type *, LONGEST *, LONGEST *, LONGEST *,
 			 struct type **, char **);
 
 extern void pascal_printchar (int, struct type *, struct ui_file *);
 
 extern void pascal_printstr (struct ui_file *, struct type *, const gdb_byte *,
-			     unsigned int, const char *, int,
+			     ULONGEST, const char *, int,
 			     const struct value_print_options *);
 
 extern struct type **const (pascal_builtin_types[]);
Index: gdb-7.2-patched/gdb/p-valprint.c
===================================================================
--- gdb-7.2-patched.orig/gdb/p-valprint.c
+++ gdb-7.2-patched/gdb/p-valprint.c
@@ -53,7 +53,7 @@
 
 int
 pascal_val_print (struct type *type, const gdb_byte *valaddr,
-		  int embedded_offset, CORE_ADDR address,
+		  LONGEST embedded_offset, CORE_ADDR address,
 		  struct ui_file *stream, int recurse,
 		  const struct value *original_value,
 		  const struct value_print_options *options)
@@ -64,8 +64,8 @@ pascal_val_print (struct type *type, con
   unsigned len;
   LONGEST low_bound, high_bound;
   struct type *elttype;
-  unsigned eltlen;
-  int length_pos, length_size, string_pos;
+  ULONGEST eltlen;
+  LONGEST length_pos, length_size, string_pos;
   struct type *char_type;
   LONGEST val;
   CORE_ADDR addr;
@@ -901,7 +901,7 @@ pascal_object_print_value (struct type *
 
   for (i = 0; i < n_baseclasses; i++)
     {
-      int boffset;
+      LONGEST boffset;
       struct type *baseclass = check_typedef (TYPE_BASECLASS (type, i));
       char *basename = type_name_no_tag (baseclass);
       const gdb_byte *base_valaddr;
Index: gdb-7.2-patched/gdb/ppc-linux-nat.c
===================================================================
--- gdb-7.2-patched.orig/gdb/ppc-linux-nat.c
+++ gdb-7.2-patched/gdb/ppc-linux-nat.c
@@ -1478,7 +1478,7 @@ ppc_linux_can_use_hw_breakpoint (int typ
 }
 
 static int
-ppc_linux_region_ok_for_hw_watchpoint (CORE_ADDR addr, int len)
+ppc_linux_region_ok_for_hw_watchpoint (CORE_ADDR addr, LONGEST len)
 {
   /* Handle sub-8-byte quantities.  */
   if (len <= 0)
Index: gdb-7.2-patched/gdb/printcmd.c
===================================================================
--- gdb-7.2-patched.orig/gdb/printcmd.c
+++ gdb-7.2-patched/gdb/printcmd.c
@@ -284,7 +284,7 @@ print_formatted (struct value *val, int 
 		 struct ui_file *stream)
 {
   struct type *type = check_typedef (value_type (val));
-  int len = TYPE_LENGTH (type);
+  LONGEST len = TYPE_LENGTH (type);
 
   if (VALUE_LVAL (val) == lval_memory)
     next_address = value_address (val) + len;
@@ -362,7 +362,7 @@ print_scalar_formatted (const void *vala
 {
   struct gdbarch *gdbarch = get_type_arch (type);
   LONGEST val_long = 0;
-  unsigned int len = TYPE_LENGTH (type);
+  ULONGEST len = TYPE_LENGTH (type);
   enum bfd_endian byte_order = gdbarch_byte_order (gdbarch);
 
   /* If we get here with a string format, try again without it.  Go
Index: gdb-7.2-patched/gdb/procfs.c
===================================================================
--- gdb-7.2-patched.orig/gdb/procfs.c
+++ gdb-7.2-patched/gdb/procfs.c
@@ -5190,7 +5190,7 @@ procfs_remove_watchpoint (CORE_ADDR addr
 }
 
 static int
-procfs_region_ok_for_hw_watchpoint (CORE_ADDR addr, int len)
+procfs_region_ok_for_hw_watchpoint (CORE_ADDR addr, LONGEST len)
 {
   /* The man page for proc(4) on Solaris 2.6 and up says that the
      system can support "thousands" of hardware watchpoints, but gives
Index: gdb-7.2-patched/gdb/python/py-prettyprint.c
===================================================================
--- gdb-7.2-patched.orig/gdb/python/py-prettyprint.c
+++ gdb-7.2-patched/gdb/python/py-prettyprint.c
@@ -634,7 +634,7 @@ print_children (PyObject *printer, const
 
 int
 apply_val_pretty_printer (struct type *type, const gdb_byte *valaddr,
-			  int embedded_offset, CORE_ADDR address,
+			  LONGEST embedded_offset, CORE_ADDR address,
 			  struct ui_file *stream, int recurse,
 			  const struct value *val,
 			  const struct value_print_options *options,
@@ -782,7 +782,7 @@ gdbpy_default_visualizer (PyObject *self
 
 int
 apply_val_pretty_printer (struct type *type, const gdb_byte *valaddr,
-			  int embedded_offset, CORE_ADDR address,
+			  LONGEST embedded_offset, CORE_ADDR address,
 			  struct ui_file *stream, int recurse,
 			  const struct value *val,
 			  const struct value_print_options *options,
Index: gdb-7.2-patched/gdb/python/python.h
===================================================================
--- gdb-7.2-patched.orig/gdb/python/python.h
+++ gdb-7.2-patched/gdb/python/python.h
@@ -33,7 +33,7 @@ void source_python_script (FILE *file, c
 void run_python_script (int argc, char **argv);
 
 int apply_val_pretty_printer (struct type *type, const gdb_byte *valaddr,
-			      int embedded_offset, CORE_ADDR address,
+			      LONGEST embedded_offset, CORE_ADDR address,
 			      struct ui_file *stream, int recurse,
 			      const struct value *val,
 			      const struct value_print_options *options,
Index: gdb-7.2-patched/gdb/regcache.c
===================================================================
--- gdb-7.2-patched.orig/gdb/regcache.c
+++ gdb-7.2-patched/gdb/regcache.c
@@ -793,7 +793,7 @@ typedef void (regcache_write_ftype) (str
 
 static void
 regcache_xfer_part (struct regcache *regcache, int regnum,
-		    int offset, int len, void *in, const void *out,
+		    LONGEST offset, LONGEST len, void *in, const void *out,
 		    void (*read) (struct regcache *regcache, int regnum,
 				  gdb_byte *buf),
 		    void (*write) (struct regcache *regcache, int regnum,
@@ -830,7 +830,7 @@ regcache_xfer_part (struct regcache *reg
 
 void
 regcache_raw_read_part (struct regcache *regcache, int regnum,
-			int offset, int len, gdb_byte *buf)
+			LONGEST offset, LONGEST len, gdb_byte *buf)
 {
   struct regcache_descr *descr = regcache->descr;
 
@@ -841,7 +841,7 @@ regcache_raw_read_part (struct regcache 
 
 void
 regcache_raw_write_part (struct regcache *regcache, int regnum,
-			 int offset, int len, const gdb_byte *buf)
+			 LONGEST offset, LONGEST len, const gdb_byte *buf)
 {
   struct regcache_descr *descr = regcache->descr;
 
@@ -852,7 +852,7 @@ regcache_raw_write_part (struct regcache
 
 void
 regcache_cooked_read_part (struct regcache *regcache, int regnum,
-			   int offset, int len, gdb_byte *buf)
+			   LONGEST offset, LONGEST len, gdb_byte *buf)
 {
   struct regcache_descr *descr = regcache->descr;
 
@@ -863,7 +863,7 @@ regcache_cooked_read_part (struct regcac
 
 void
 regcache_cooked_write_part (struct regcache *regcache, int regnum,
-			    int offset, int len, const gdb_byte *buf)
+			    LONGEST offset, LONGEST len, const gdb_byte *buf)
 {
   struct regcache_descr *descr = regcache->descr;
 
Index: gdb-7.2-patched/gdb/regcache.h
===================================================================
--- gdb-7.2-patched.orig/gdb/regcache.h
+++ gdb-7.2-patched/gdb/regcache.h
@@ -61,9 +61,9 @@ extern void regcache_raw_write_unsigned 
    write style operations.  */
 
 void regcache_raw_read_part (struct regcache *regcache, int regnum,
-			     int offset, int len, gdb_byte *buf);
+			     LONGEST offset, LONGEST len, gdb_byte *buf);
 void regcache_raw_write_part (struct regcache *regcache, int regnum,
-			      int offset, int len, const gdb_byte *buf);
+			      LONGEST offset, LONGEST len, const gdb_byte *buf);
 
 int regcache_valid_p (const struct regcache *regcache, int regnum);
 
@@ -97,9 +97,9 @@ extern void regcache_cooked_write_unsign
    write style operations.  */
 
 void regcache_cooked_read_part (struct regcache *regcache, int regnum,
-				int offset, int len, gdb_byte *buf);
+				LONGEST offset, LONGEST len, gdb_byte *buf);
 void regcache_cooked_write_part (struct regcache *regcache, int regnum,
-				 int offset, int len, const gdb_byte *buf);
+				 LONGEST offset, LONGEST len, const gdb_byte *buf);
 
 /* Special routines to read/write the PC.  */
 
Index: gdb-7.2-patched/gdb/s390-nat.c
===================================================================
--- gdb-7.2-patched.orig/gdb/s390-nat.c
+++ gdb-7.2-patched/gdb/s390-nat.c
@@ -392,7 +392,7 @@ s390_can_use_hw_breakpoint (int type, in
 }
 
 static int
-s390_region_ok_for_hw_watchpoint (CORE_ADDR addr, int cnt)
+s390_region_ok_for_hw_watchpoint (CORE_ADDR addr, LONGEST cnt)
 {
   return 1;
 }
Index: gdb-7.2-patched/gdb/spu-multiarch.c
===================================================================
--- gdb-7.2-patched.orig/gdb/spu-multiarch.c
+++ gdb-7.2-patched/gdb/spu-multiarch.c
@@ -119,7 +119,7 @@ spu_thread_architecture (struct target_o
 
 /* Override the to_region_ok_for_hw_watchpoint routine.  */
 static int
-spu_region_ok_for_hw_watchpoint (CORE_ADDR addr, int len)
+spu_region_ok_for_hw_watchpoint (CORE_ADDR addr, LONGEST len)
 {
   struct target_ops *ops_beneath = find_target_beneath (&spu_ops);
   while (ops_beneath && !ops_beneath->to_region_ok_for_hw_watchpoint)
Index: gdb-7.2-patched/gdb/stack.c
===================================================================
--- gdb-7.2-patched.orig/gdb/stack.c
+++ gdb-7.2-patched/gdb/stack.c
@@ -164,7 +164,7 @@ static int print_args_stub (void *args);
    argument (not just the first nameless argument).  */
 
 static void
-print_frame_nameless_args (struct frame_info *frame, long start, int num,
+print_frame_nameless_args (struct frame_info *frame, LONGEST start, int num,
 			   int first, struct ui_file *stream)
 {
   struct gdbarch *gdbarch = get_frame_arch (frame);
@@ -206,7 +206,7 @@ print_frame_args (struct symbol *func, s
   /* Offset of next stack argument beyond the one we have seen that is
      at the highest offset, or -1 if we haven't come to a stack
      argument yet.  */
-  long highest_offset = -1;
+  LONGEST highest_offset = -1;
   /* Number of ints of arguments that we have printed so far.  */
   int args_printed = 0;
   struct cleanup *old_chain, *list_chain;
@@ -241,8 +241,8 @@ print_frame_args (struct symbol *func, s
 	    case LOC_ARG:
 	    case LOC_REF_ARG:
 	      {
-		long current_offset = SYMBOL_VALUE (sym);
-		int arg_size = TYPE_LENGTH (SYMBOL_TYPE (sym));
+		LONGEST current_offset = SYMBOL_VALUE (sym);
+		LONGEST arg_size = TYPE_LENGTH (SYMBOL_TYPE (sym));
 
 		/* Compute address of next argument by adding the size of
 		   this argument and rounding to an int boundary.  */
@@ -408,7 +408,7 @@ print_frame_args (struct symbol *func, s
      enough about the stack to find them.  */
   if (num != -1)
     {
-      long start;
+      LONGEST start;
 
       if (highest_offset == -1)
 	start = gdbarch_frame_args_skip (get_frame_arch (frame));
Index: gdb-7.2-patched/gdb/symmisc.c
===================================================================
--- gdb-7.2-patched.orig/gdb/symmisc.c
+++ gdb-7.2-patched/gdb/symmisc.c
@@ -553,11 +553,11 @@ print_symbol (void *args)
 
 	case LOC_CONST_BYTES:
 	  {
-	    unsigned i;
+	    ULONGEST i;
 	    struct type *type = check_typedef (SYMBOL_TYPE (symbol));
 
-	    fprintf_filtered (outfile, "const %u hex bytes:",
-			      TYPE_LENGTH (type));
+	    fprintf_filtered (outfile, "const %s hex bytes:",
+			      pulongest (TYPE_LENGTH (type)));
 	    for (i = 0; i < TYPE_LENGTH (type); i++)
 	      fprintf_filtered (outfile, " %02x",
 				(unsigned) SYMBOL_VALUE_BYTES (symbol)[i]);
Index: gdb-7.2-patched/gdb/target.c
===================================================================
--- gdb-7.2-patched.orig/gdb/target.c
+++ gdb-7.2-patched/gdb/target.c
@@ -52,7 +52,7 @@ static void default_terminal_info (char 
 static int default_watchpoint_addr_within_range (struct target_ops *,
 						 CORE_ADDR, CORE_ADDR, int);
 
-static int default_region_ok_for_hw_watchpoint (CORE_ADDR, int);
+static int default_region_ok_for_hw_watchpoint (CORE_ADDR, LONGEST);
 
 static int nosymbol (char *, CORE_ADDR *);
 
@@ -132,7 +132,7 @@ static int debug_to_stopped_data_address
 static int debug_to_watchpoint_addr_within_range (struct target_ops *,
 						  CORE_ADDR, CORE_ADDR, int);
 
-static int debug_to_region_ok_for_hw_watchpoint (CORE_ADDR, int);
+static int debug_to_region_ok_for_hw_watchpoint (CORE_ADDR, LONGEST);
 
 static int debug_to_can_accel_watchpoint_condition (CORE_ADDR, int, int,
 						    struct expression *);
@@ -2755,7 +2755,7 @@ Can't determine the current address spac
 }
 
 static int
-default_region_ok_for_hw_watchpoint (CORE_ADDR addr, int len)
+default_region_ok_for_hw_watchpoint (CORE_ADDR addr, LONGEST len)
 {
   return (len <= gdbarch_ptr_bit (target_gdbarch) / TARGET_CHAR_BIT);
 }
@@ -3354,7 +3354,7 @@ debug_to_can_use_hw_breakpoint (int type
 }
 
 static int
-debug_to_region_ok_for_hw_watchpoint (CORE_ADDR addr, int len)
+debug_to_region_ok_for_hw_watchpoint (CORE_ADDR addr, LONGEST len)
 {
   CORE_ADDR retval;
 
Index: gdb-7.2-patched/gdb/target.h
===================================================================
--- gdb-7.2-patched.orig/gdb/target.h
+++ gdb-7.2-patched/gdb/target.h
@@ -441,7 +441,7 @@ struct target_ops
     int (*to_stopped_data_address) (struct target_ops *, CORE_ADDR *);
     int (*to_watchpoint_addr_within_range) (struct target_ops *,
 					    CORE_ADDR, CORE_ADDR, int);
-    int (*to_region_ok_for_hw_watchpoint) (CORE_ADDR, int);
+    int (*to_region_ok_for_hw_watchpoint) (CORE_ADDR, LONGEST);
     int (*to_can_accel_watchpoint_condition) (CORE_ADDR, int, int,
 					      struct expression *);
     void (*to_terminal_init) (void);
Index: gdb-7.2-patched/gdb/testsuite/gdb.base/longest-types.exp
===================================================================
--- gdb-7.2-patched.orig/gdb/testsuite/gdb.base/longest-types.exp
+++ gdb-7.2-patched/gdb/testsuite/gdb.base/longest-types.exp
@@ -24,3 +24,6 @@ if { [prepare_for_testing ${testfile}.ex
 
 # 64-bit array size should not overflow
 gdb_test "print &f->buf" {= \(char \(\*\)\[1099494850560\]\) 0x0}
+
+# The offset should not overflow
+gdb_test "print &f->buf2" {= \(char \(\*\)\[2\]\) 0xffff000000}
Index: gdb-7.2-patched/gdb/tracepoint.c
===================================================================
--- gdb-7.2-patched.orig/gdb/tracepoint.c
+++ gdb-7.2-patched/gdb/tracepoint.c
@@ -831,13 +831,13 @@ add_register (struct collection_list *co
 static void
 add_memrange (struct collection_list *memranges, 
 	      int type, bfd_signed_vma base,
-	      unsigned long len)
+	      ULONGEST len)
 {
   if (info_verbose)
     {
       printf_filtered ("(%d,", type);
       printf_vma (base);
-      printf_filtered (",%ld)\n", len);
+      printf_filtered (",%s)\n", pulongest (len));
     }
 
   /* type: memrange_absolute == memory, other n == basereg */
@@ -866,7 +866,7 @@ collect_symbol (struct collection_list *
 		long frame_regno, long frame_offset,
 		CORE_ADDR scope)
 {
-  unsigned long len;
+  ULONGEST len;
   unsigned int reg;
   bfd_signed_vma offset;
   int treat_as_expr = 0;
@@ -890,8 +890,8 @@ collect_symbol (struct collection_list *
 	  char tmp[40];
 
 	  sprintf_vma (tmp, offset);
-	  printf_filtered ("LOC_STATIC %s: collect %ld bytes at %s.\n",
-			   SYMBOL_PRINT_NAME (sym), len,
+	  printf_filtered ("LOC_STATIC %s: collect %s bytes at %s.\n",
+			   SYMBOL_PRINT_NAME (sym), pulongest (len),
 			   tmp /* address */);
 	}
       /* A struct may be a C++ class with static fields, go to general
@@ -923,8 +923,8 @@ collect_symbol (struct collection_list *
       offset = frame_offset + SYMBOL_VALUE (sym);
       if (info_verbose)
 	{
-	  printf_filtered ("LOC_LOCAL %s: Collect %ld bytes at offset ",
-			   SYMBOL_PRINT_NAME (sym), len);
+	  printf_filtered ("LOC_LOCAL %s: Collect %s bytes at offset ",
+			   SYMBOL_PRINT_NAME (sym), pulongest (len));
 	  printf_vma (offset);
 	  printf_filtered (" from frame ptr reg %d\n", reg);
 	}
@@ -935,8 +935,8 @@ collect_symbol (struct collection_list *
       offset = 0;
       if (info_verbose)
 	{
-	  printf_filtered ("LOC_REGPARM_ADDR %s: Collect %ld bytes at offset ",
-			   SYMBOL_PRINT_NAME (sym), len);
+	  printf_filtered ("LOC_REGPARM_ADDR %s: Collect %s bytes at offset ",
+			   SYMBOL_PRINT_NAME (sym), pulongest (len));
 	  printf_vma (offset);
 	  printf_filtered (" from reg %d\n", reg);
 	}
@@ -947,8 +947,8 @@ collect_symbol (struct collection_list *
       offset = frame_offset + SYMBOL_VALUE (sym);
       if (info_verbose)
 	{
-	  printf_filtered ("LOC_LOCAL %s: Collect %ld bytes at offset ",
-			   SYMBOL_PRINT_NAME (sym), len);
+	  printf_filtered ("LOC_LOCAL %s: Collect %s bytes at offset ",
+			   SYMBOL_PRINT_NAME (sym), pulongest (len));
 	  printf_vma (offset);
 	  printf_filtered (" from frame ptr reg %d\n", reg);
 	}
@@ -2307,7 +2307,8 @@ scope_info (char *args, int from_tty)
   struct block *block;
   char *symname, *save_args = args;
   struct dict_iterator iter;
-  int j, count = 0;
+  int count = 0;
+  LONGEST j;
   struct gdbarch *gdbarch;
   int regno;
 
@@ -2434,8 +2435,11 @@ scope_info (char *args, int from_tty)
 	      break;
 	    }
 	  if (SYMBOL_TYPE (sym))
-	    printf_filtered (", length %d.\n",
-			     TYPE_LENGTH (check_typedef (SYMBOL_TYPE (sym))));
+	    {
+	      ULONGEST len = TYPE_LENGTH (check_typedef (SYMBOL_TYPE (sym)));
+
+	      printf_filtered (", length %s.\n", pulongest (len));
+	    }
 	}
       if (BLOCK_FUNCTION (block))
 	break;
Index: gdb-7.2-patched/gdb/typeprint.c
===================================================================
--- gdb-7.2-patched.orig/gdb/typeprint.c
+++ gdb-7.2-patched/gdb/typeprint.c
@@ -124,7 +124,7 @@ whatis_exp (char *exp, int show)
   struct type *real_type = NULL;
   struct type *type;
   int full = 0;
-  int top = -1;
+  LONGEST top = -1;
   int using_enc = 0;
   struct value_print_options opts;
 
Index: gdb-7.2-patched/gdb/valarith.c
===================================================================
--- gdb-7.2-patched.orig/gdb/valarith.c
+++ gdb-7.2-patched/gdb/valarith.c
@@ -221,7 +221,7 @@ value_subscripted_rvalue (struct value *
     set_value_lazy (v, 1);
   else
     {
-      unsigned int elt_size = TYPE_LENGTH (elt_type);
+      ULONGEST elt_size = TYPE_LENGTH (elt_type);
       memcpy (value_contents_writeable (v),
 	      value_contents (array) + offset, elt_size);
     }
@@ -688,7 +688,7 @@ value_concat (struct value *arg1, struct
   struct value *inval1;
   struct value *inval2;
   struct value *outval = NULL;
-  int inval1len, inval2len;
+  ssize_t inval1len, inval2len;
   int count, idx;
   char *ptr;
   char inchar;
@@ -1408,7 +1408,7 @@ value_binop (struct value *arg1, struct 
 int
 value_logical_not (struct value *arg1)
 {
-  int len;
+  LONGEST len;
   const gdb_byte *p;
   struct type *type1;
 
@@ -1439,11 +1439,11 @@ value_logical_not (struct value *arg1)
 static int
 value_strcmp (struct value *arg1, struct value *arg2)
 {
-  int len1 = TYPE_LENGTH (value_type (arg1));
-  int len2 = TYPE_LENGTH (value_type (arg2));
+  LONGEST len1 = TYPE_LENGTH (value_type (arg1));
+  LONGEST len2 = TYPE_LENGTH (value_type (arg2));
   const gdb_byte *s1 = value_contents (arg1);
   const gdb_byte *s2 = value_contents (arg2);
-  int i, len = len1 < len2 ? len1 : len2;
+  LONGEST i, len = len1 < len2 ? len1 : len2;
 
   for (i = 0; i < len; i++)
     {
Index: gdb-7.2-patched/gdb/valops.c
===================================================================
--- gdb-7.2-patched.orig/gdb/valops.c
+++ gdb-7.2-patched/gdb/valops.c
@@ -55,11 +55,11 @@ static int typecmp (int staticp, int var
 		    struct field t1[], struct value *t2[]);
 
 static struct value *search_struct_field (const char *, struct value *, 
-					  int, struct type *, int);
+					  LONGEST, struct type *, int);
 
 static struct value *search_struct_method (const char *, struct value **,
 					   struct value **,
-					   int, int *, struct type *);
+					   LONGEST, int *, struct type *);
 
 static int find_oload_champ_namespace (struct type **, int,
 				       const char *, const char *,
@@ -87,7 +87,7 @@ oload_classification classify_oload_matc
 					   int, int);
 
 static struct value *value_struct_elt_for_reference (struct type *,
-						     int, struct type *,
+						     LONGEST, struct type *,
 						     char *,
 						     struct type *,
 						     int, enum noside);
@@ -104,8 +104,8 @@ static CORE_ADDR allocate_space_in_infer
 static struct value *cast_into_complex (struct type *, struct value *);
 
 static struct fn_field *find_method_list (struct value **, const char *,
-					  int, struct type *, int *,
-					  struct type **, int *);
+					  LONGEST, struct type *, int *,
+					  struct type **, LONGEST *);
 
 void _initialize_valops (void);
 
@@ -187,7 +187,7 @@ find_function_in_inferior (const char *n
    space.  */
 
 struct value *
-value_allocate_space_in_inferior (int len)
+value_allocate_space_in_inferior (LONGEST len)
 {
   struct objfile *objf;
   struct value *val = find_function_in_inferior ("malloc", &objf);
@@ -259,7 +259,8 @@ value_cast_structs (struct type *type, s
   if (TYPE_NAME (t2) != NULL)
     {
       /* Try downcasting using the run-time type of the value.  */
-      int full, top, using_enc;
+      int full, using_enc;
+      LONGEST top;
       struct type *real_type;
 
       real_type = value_rtti_type (v2, &full, &top, &using_enc);
@@ -394,12 +395,12 @@ value_cast (struct type *type, struct va
   if (code1 == TYPE_CODE_ARRAY)
     {
       struct type *element_type = TYPE_TARGET_TYPE (type);
-      unsigned element_length = TYPE_LENGTH (check_typedef (element_type));
+      ULONGEST element_length = TYPE_LENGTH (check_typedef (element_type));
 
       if (element_length > 0 && TYPE_ARRAY_UPPER_BOUND_IS_UNDEFINED (type))
 	{
 	  struct type *range_type = TYPE_INDEX_TYPE (type);
-	  int val_length = TYPE_LENGTH (type2);
+	  LONGEST val_length = TYPE_LENGTH (type2);
 	  LONGEST low_bound, high_bound, new_length;
 
 	  if (get_discrete_bounds (range_type, &low_bound, &high_bound) < 0)
@@ -634,7 +635,7 @@ dynamic_cast_check_1 (struct type *desir
 
   for (i = 0; i < TYPE_N_BASECLASSES (search_type) && result_count < 2; ++i)
     {
-      int offset = baseclass_offset (search_type, i, contents, address);
+      LONGEST offset = baseclass_offset (search_type, i, contents, address);
 
       if (offset == -1)
 	error (_("virtual baseclass botch"));
@@ -677,7 +678,7 @@ dynamic_cast_check_2 (struct type *desir
 
   for (i = 0; i < TYPE_N_BASECLASSES (search_type) && result_count < 2; ++i)
     {
-      int offset;
+      LONGEST offset;
 
       if (! BASETYPE_VIA_PUBLIC (search_type, i))
 	continue;
@@ -708,7 +709,8 @@ dynamic_cast_check_2 (struct type *desir
 struct value *
 value_dynamic_cast (struct type *type, struct value *arg)
 {
-  int full, top, using_enc;
+  int full, using_enc;
+  LONGEST top;
   struct type *resolved_type = check_typedef (type);
   struct type *arg_type = check_typedef (value_type (arg));
   struct type *class_type, *rtti_type;
@@ -1190,7 +1192,7 @@ value_assign (struct value *toval, struc
       {
 	const gdb_byte *dest_buffer;
 	CORE_ADDR changed_addr;
-	int changed_len;
+	LONGEST changed_len;
         gdb_byte buffer[sizeof (LONGEST)];
 
 	if (value_bitsize (toval))
@@ -1270,7 +1272,7 @@ value_assign (struct value *toval, struc
 	    if (value_bitsize (toval))
 	      {
 		struct value *parent = value_parent (toval);
-		int offset = value_offset (parent) + value_offset (toval);
+		LONGEST offset = value_offset (parent) + value_offset (toval);
 		int changed_len;
 		gdb_byte buffer[sizeof (LONGEST)];
 
@@ -1727,7 +1729,7 @@ value_array (int lowbound, int highbound
 {
   int nelem;
   int idx;
-  unsigned int typelength;
+  ULONGEST typelength;
   struct value *val;
   struct type *arraytype;
 
@@ -1922,7 +1924,7 @@ typecmp (int staticp, int varargs, int n
    fields, look for a baseclass named NAME.  */
 
 static struct value *
-search_struct_field (const char *name, struct value *arg1, int offset,
+search_struct_field (const char *name, struct value *arg1, LONGEST offset,
 		     struct type *type, int looking_for_baseclass)
 {
   int i;
@@ -1979,7 +1981,7 @@ search_struct_field (const char *name, s
 		   <variant field>.  */
 
 		struct value *v;
-		int new_offset = offset;
+		LONGEST new_offset = offset;
 
 		/* This is pretty gross.  In G++, the offset in an
 		   anonymous union is relative to the beginning of the
@@ -2016,7 +2018,7 @@ search_struct_field (const char *name, s
 
       if (BASETYPE_VIA_VIRTUAL (type, i))
 	{
-	  int boffset;
+	  LONGEST boffset;
 	  struct value *v2;
 
 	  boffset = baseclass_offset (type, i,
@@ -2082,7 +2084,7 @@ search_struct_field (const char *name, s
 
 static struct value *
 search_struct_method (const char *name, struct value **arg1p,
-		      struct value **args, int offset,
+		      struct value **args, LONGEST offset,
 		      int *static_memfuncp, struct type *type)
 {
   int i;
@@ -2145,7 +2147,7 @@ search_struct_method (const char *name, 
 
   for (i = TYPE_N_BASECLASSES (type) - 1; i >= 0; i--)
     {
-      int base_offset;
+      LONGEST base_offset;
 
       if (BASETYPE_VIA_VIRTUAL (type, i))
 	{
@@ -2314,8 +2316,8 @@ value_struct_elt (struct value **argp, s
 
 static struct fn_field *
 find_method_list (struct value **argp, const char *method,
-		  int offset, struct type *type, int *num_fns,
-		  struct type **basetype, int *boffset)
+		  LONGEST offset, struct type *type, int *num_fns,
+		  struct type **basetype, LONGEST *boffset)
 {
   int i;
   struct fn_field *f;
@@ -2348,7 +2350,7 @@ find_method_list (struct value **argp, c
   /* Not found in object, check in base subobjects.  */
   for (i = TYPE_N_BASECLASSES (type) - 1; i >= 0; i--)
     {
-      int base_offset;
+      LONGEST base_offset;
 
       if (BASETYPE_VIA_VIRTUAL (type, i))
 	{
@@ -2387,7 +2389,7 @@ find_method_list (struct value **argp, c
 struct fn_field *
 value_find_oload_method_list (struct value **argp, const char *method,
 			      int offset, int *num_fns, 
-			      struct type **basetype, int *boffset)
+			      struct type **basetype, LONGEST *boffset)
 {
   struct type *t;
 
@@ -2478,7 +2480,7 @@ find_overload_match (struct type **arg_t
   /* Number of overloaded instances being considered.  */
   int num_fns = 0;
   struct type *basetype = NULL;
-  int boffset;
+  LONGEST boffset;
 
   struct cleanup *all_cleanups = make_cleanup (null_cleanup, NULL);
 
@@ -3160,7 +3162,7 @@ compare_parameters (struct type *t1, str
    the form "DOMAIN::NAME".  */
 
 static struct value *
-value_struct_elt_for_reference (struct type *domain, int offset,
+value_struct_elt_for_reference (struct type *domain, LONGEST offset,
 				struct type *curtype, char *name,
 				struct type *intype, 
 				int want_address,
@@ -3196,7 +3198,7 @@ value_struct_elt_for_reference (struct t
 	  if (want_address)
 	    return value_from_longest
 	      (lookup_memberptr_type (TYPE_FIELD_TYPE (t, i), domain),
-	       offset + (LONGEST) (TYPE_FIELD_BITPOS (t, i) >> 3));
+	       offset + (TYPE_FIELD_BITPOS (t, i) >> 3));
 	  else if (noside == EVAL_AVOID_SIDE_EFFECTS)
 	    return allocate_value (TYPE_FIELD_TYPE (t, i));
 	  else
@@ -3329,7 +3331,7 @@ value_struct_elt_for_reference (struct t
   for (i = TYPE_N_BASECLASSES (t) - 1; i >= 0; i--)
     {
       struct value *v;
-      int base_offset;
+      LONGEST base_offset;
 
       if (BASETYPE_VIA_VIRTUAL (t, i))
 	base_offset = 0;
@@ -3420,7 +3422,7 @@ value_maybe_namespace_elt (const struct 
 
 struct type *
 value_rtti_target_type (struct value *v, int *full, 
-			int *top, int *using_enc)
+			LONGEST *top, int *using_enc)
 {
   struct value *target;
 
@@ -3442,12 +3444,12 @@ value_rtti_target_type (struct value *v,
 struct value *
 value_full_object (struct value *argp, 
 		   struct type *rtype, 
-		   int xfull, int xtop,
+		   int xfull, LONGEST xtop,
 		   int xusing_enc)
 {
   struct type *real_type;
   int full = 0;
-  int top = -1;
+  LONGEST top = -1;
   int using_enc = 0;
   struct value *new_val;
 
Index: gdb-7.2-patched/gdb/valprint.c
===================================================================
--- gdb-7.2-patched.orig/gdb/valprint.c
+++ gdb-7.2-patched/gdb/valprint.c
@@ -259,7 +259,7 @@ scalar_type_p (struct type *type)
 static int
 valprint_check_validity (struct ui_file *stream,
 			 struct type *type,
-			 int offset,
+			 LONGEST offset,
 			 const struct value *val)
 {
   CHECK_TYPEDEF (type);
@@ -295,7 +295,7 @@ valprint_check_validity (struct ui_file 
 
 
 int
-val_print (struct type *type, const gdb_byte *valaddr, int embedded_offset,
+val_print (struct type *type, const gdb_byte *valaddr, LONGEST embedded_offset,
 	   CORE_ADDR address, struct ui_file *stream, int recurse,
 	   const struct value *val,
 	   const struct value_print_options *options,
@@ -1005,7 +1005,7 @@ print_decimal_chars (struct ui_file *str
 
 void
 print_hex_chars (struct ui_file *stream, const gdb_byte *valaddr,
-		 unsigned len, enum bfd_endian byte_order)
+		 ULONGEST len, enum bfd_endian byte_order)
 {
   const gdb_byte *p;
 
@@ -1139,18 +1139,18 @@ val_print_array_elements (struct type *t
 			  int recurse,
 			  const struct value *val,
 			  const struct value_print_options *options,
-			  unsigned int i)
+			  ULONGEST i)
 {
   unsigned int things_printed = 0;
-  unsigned len;
+  ULONGEST len;
   struct type *saved_type = type;
   struct type *elttype, *index_type;
-  unsigned eltlen;
+  ULONGEST eltlen;
   /* Position of the array element we are examining to see
      whether it is repeated.  */
-  unsigned int rep1;
+  ULONGEST rep1;
   /* Number of repetitions we have detected so far.  */
-  unsigned int reps;
+  ULONGEST reps;
   LONGEST low_bound_index = 0;
   struct cleanup *back_to;
   CORE_ADDR saved_address = address;
@@ -1240,7 +1240,7 @@ val_print_array_elements (struct type *t
 	  val_print (elttype, valaddr + i * eltlen, 0, address + i * eltlen,
 		     stream, recurse + 1, val, options, current_language);
 	  annotate_elt_rep (reps);
-	  fprintf_filtered (stream, " <repeats %u times>", reps);
+	  fprintf_filtered (stream, " <repeats %s times>", pulongest (reps));
 	  annotate_elt_rep_end ();
 
 	  i = rep1 - 1;
Index: gdb-7.2-patched/gdb/valprint.h
===================================================================
--- gdb-7.2-patched.orig/gdb/valprint.h
+++ gdb-7.2-patched/gdb/valprint.h
@@ -123,7 +123,7 @@ extern void val_print_array_elements (st
 				      CORE_ADDR, struct ui_file *, int,
 				      const struct value *,
 				      const struct value_print_options *,
-				      unsigned int);
+				      ULONGEST);
 
 extern void val_print_type_code_int (struct type *, const gdb_byte *,
 				     struct ui_file *);
@@ -142,7 +142,7 @@ extern void print_decimal_chars (struct 
 				 unsigned int, enum bfd_endian);
 
 extern void print_hex_chars (struct ui_file *, const gdb_byte *,
-			     unsigned int, enum bfd_endian);
+			     ULONGEST, enum bfd_endian);
 
 extern void print_char_chars (struct ui_file *, struct type *,
 			      const gdb_byte *, unsigned int, enum bfd_endian);
Index: gdb-7.2-patched/gdb/value.c
===================================================================
--- gdb-7.2-patched.orig/gdb/value.c
+++ gdb-7.2-patched/gdb/value.c
@@ -100,7 +100,7 @@ struct value
      lval == lval_register, this is a further offset from
      location.address within the registers structure.  Note also the
      member embedded_offset below.  */
-  int offset;
+  LONGEST offset;
 
   /* Only used for bitfields; number of bits contained in them.  */
   int bitsize;
@@ -108,7 +108,7 @@ struct value
   /* Only used for bitfields; position of start of field.  For
      gdbarch_bits_big_endian=0 targets, it is the position of the LSB.  For
      gdbarch_bits_big_endian=1 targets, it is the position of the MSB. */
-  int bitpos;
+  LONGEST bitpos;
 
   /* Only used for bitfields; the containing value.  This allows a
      single read from the target when displaying multiple
@@ -163,8 +163,8 @@ struct value
      `type', and `embedded_offset' is zero, so everything works
      normally.  */
   struct type *enclosing_type;
-  int embedded_offset;
-  int pointed_to_offset;
+  LONGEST embedded_offset;
+  LONGEST pointed_to_offset;
 
   /* Values are stored in a chain, so that they can be deleted easily
      over calls to the inferior.  Values assigned to internal
@@ -361,13 +361,13 @@ deprecated_set_value_type (struct value 
   value->type = type;
 }
 
-int
+LONGEST
 value_offset (const struct value *value)
 {
   return value->offset;
 }
 void
-set_value_offset (struct value *value, int offset)
+set_value_offset (struct value *value, LONGEST offset)
 {
   value->offset = offset;
 }
@@ -526,7 +526,7 @@ value_entirely_optimized_out (const stru
 }
 
 int
-value_bits_valid (const struct value *value, int offset, int length)
+value_bits_valid (const struct value *value, LONGEST offset, LONGEST length)
 {
   if (value == NULL || !value->optimized_out)
     return 1;
@@ -537,26 +537,26 @@ value_bits_valid (const struct value *va
 							 length);
 }
 
-int
+LONGEST
 value_embedded_offset (struct value *value)
 {
   return value->embedded_offset;
 }
 
 void
-set_value_embedded_offset (struct value *value, int val)
+set_value_embedded_offset (struct value *value, LONGEST val)
 {
   value->embedded_offset = val;
 }
 
-int
+LONGEST
 value_pointed_to_offset (struct value *value)
 {
   return value->pointed_to_offset;
 }
 
 void
-set_value_pointed_to_offset (struct value *value, int val)
+set_value_pointed_to_offset (struct value *value, LONGEST val)
 {
   value->pointed_to_offset = val;
 }
@@ -1326,7 +1326,7 @@ get_internalvar_function (struct interna
 }
 
 void
-set_internalvar_component (struct internalvar *var, int offset, int bitpos,
+set_internalvar_component (struct internalvar *var, LONGEST offset, LONGEST bitpos,
 			   int bitsize, struct value *newval)
 {
   gdb_byte *addr;
@@ -2058,7 +2058,7 @@ value_change_enclosing_type (struct valu
    FIELDNO says which field. */
 
 struct value *
-value_primitive_field (struct value *arg1, int offset,
+value_primitive_field (struct value *arg1, LONGEST offset,
 		       int fieldno, struct type *arg_type)
 {
   struct value *v;
@@ -2085,7 +2085,7 @@ value_primitive_field (struct value *arg
 	 Otherwise, adjust offset to the byte containing the first
 	 bit.  Assume that the address, offset, and embedded offset
 	 are sufficiently aligned.  */
-      int bitpos = TYPE_FIELD_BITPOS (arg_type, fieldno);
+      LONGEST bitpos = TYPE_FIELD_BITPOS (arg_type, fieldno);
       int container_bitsize = TYPE_LENGTH (type) * 8;
 
       v = allocate_value_lazy (type);
@@ -2172,7 +2172,7 @@ value_field (struct value *arg1, int fie
 
 struct value *
 value_fn_field (struct value **arg1p, struct fn_field *f, int j, struct type *type,
-		int offset)
+		LONGEST offset)
 {
   struct value *v;
   struct type *ftype = TYPE_FN_FIELD_TYPE (f, j);
@@ -2242,7 +2242,7 @@ value_fn_field (struct value **arg1p, st
 
 LONGEST
 unpack_bits_as_long (struct type *field_type, const gdb_byte *valaddr,
-		     int bitpos, int bitsize)
+		     LONGEST bitpos, int bitsize)
 {
   enum bfd_endian byte_order = gdbarch_byte_order (get_type_arch (field_type));
   ULONGEST val;
@@ -2293,7 +2293,7 @@ unpack_bits_as_long (struct type *field_
 LONGEST
 unpack_field_as_long (struct type *type, const gdb_byte *valaddr, int fieldno)
 {
-  int bitpos = TYPE_FIELD_BITPOS (type, fieldno);
+  LONGEST bitpos = TYPE_FIELD_BITPOS (type, fieldno);
   int bitsize = TYPE_FIELD_BITSIZE (type, fieldno);
   struct type *field_type = TYPE_FIELD_TYPE (type, fieldno);
 
@@ -2309,7 +2309,7 @@ unpack_field_as_long (struct type *type,
 
 void
 modify_field (struct type *type, gdb_byte *addr,
-	      LONGEST fieldval, int bitpos, int bitsize)
+	      LONGEST fieldval, LONGEST bitpos, int bitsize)
 {
   enum bfd_endian byte_order = gdbarch_byte_order (get_type_arch (type));
   ULONGEST oword;
Index: gdb-7.2-patched/gdb/value.h
===================================================================
--- gdb-7.2-patched.orig/gdb/value.h
+++ gdb-7.2-patched/gdb/value.h
@@ -83,8 +83,8 @@ struct value *value_parent (struct value
    within the registers structure.  Note also the member
    embedded_offset below.  */
 
-extern int value_offset (const struct value *);
-extern void set_value_offset (struct value *, int offset);
+extern LONGEST value_offset (const struct value *);
+extern void set_value_offset (struct value *, LONGEST offset);
 
 /* The comment from "struct value" reads: ``Is it modifiable?  Only
    relevant if lval != not_lval.''.  Shouldn't the value instead be
@@ -138,10 +138,10 @@ extern void deprecated_set_value_modifia
 extern struct type *value_enclosing_type (struct value *);
 extern struct value *value_change_enclosing_type (struct value *val,
 						  struct type *new_type);
-extern int value_pointed_to_offset (struct value *value);
-extern void set_value_pointed_to_offset (struct value *value, int val);
-extern int value_embedded_offset (struct value *value);
-extern void set_value_embedded_offset (struct value *value, int val);
+extern LONGEST value_pointed_to_offset (struct value *value);
+extern void set_value_pointed_to_offset (struct value *value, LONGEST val);
+extern LONGEST value_embedded_offset (struct value *value);
+extern void set_value_embedded_offset (struct value *value, LONGEST val);
 
 /* For lval_computed values, this structure holds functions used to
    retrieve and set the value (or portions of the value).
@@ -167,7 +167,8 @@ struct lval_funcs
   /* Check the validity of some bits in VALUE.  This should return 1
      if all the bits starting at OFFSET and extending for LENGTH bits
      are valid, or 0 if any bit is invalid.  */
-  int (*check_validity) (const struct value *value, int offset, int length);
+  int (*check_validity) (const struct value *value, LONGEST offset,
+			 LONGEST length);
 
   /* Return 1 if any bit in VALUE is valid, 0 if they are all invalid.  */
   int (*check_any_valid) (const struct value *value);
@@ -335,7 +336,7 @@ extern struct value *coerce_array (struc
    bits in the given range are valid, zero if any bit is invalid.  */
 
 extern int value_bits_valid (const struct value *value,
-			     int offset, int length);
+			     LONGEST offset, LONGEST length);
 
 
 
@@ -358,7 +359,7 @@ extern DOUBLEST unpack_double (struct ty
 			       int *invp);
 extern CORE_ADDR unpack_pointer (struct type *type, const gdb_byte *valaddr);
 LONGEST unpack_bits_as_long (struct type *field_type, const gdb_byte *valaddr,
-			     int bitpos, int bitsize);
+			     LONGEST bitpos, int bitsize);
 extern LONGEST unpack_field_as_long (struct type *type,
 				     const gdb_byte *valaddr,
 				     int fieldno);
@@ -474,7 +475,7 @@ extern struct value *value_static_field 
 extern struct fn_field *value_find_oload_method_list (struct value **,
 						      const char *,
 						      int, int *,
-						      struct type **, int *);
+						      struct type **, LONGEST *);
 
 enum oload_search_type { NON_METHOD, METHOD, BOTH };
 
@@ -487,16 +488,16 @@ extern int find_overload_match (struct t
 
 extern struct value *value_field (struct value *arg1, int fieldno);
 
-extern struct value *value_primitive_field (struct value *arg1, int offset,
+extern struct value *value_primitive_field (struct value *arg1, LONGEST offset,
 					    int fieldno,
 					    struct type *arg_type);
 
 
-extern struct type *value_rtti_target_type (struct value *, int *, int *,
+extern struct type *value_rtti_target_type (struct value *, int *, LONGEST *,
 					    int *);
 
 extern struct value *value_full_object (struct value *, struct type *, int,
-					int, int);
+					LONGEST, int);
 
 extern struct value *value_cast_pointers (struct type *, struct value *);
 
@@ -588,8 +589,8 @@ extern void set_internalvar_string (stru
 extern void clear_internalvar (struct internalvar *var);
 
 extern void set_internalvar_component (struct internalvar *var,
-				       int offset,
-				       int bitpos, int bitsize,
+				       LONGEST offset,
+				       LONGEST bitpos, int bitsize,
 				       struct value *newvalue);
 
 extern struct internalvar *lookup_only_internalvar (const char *name);
@@ -666,7 +667,7 @@ extern struct value *value_x_unop (struc
 				   enum noside noside);
 
 extern struct value *value_fn_field (struct value **arg1p, struct fn_field *f,
-				     int j, struct type *type, int offset);
+				     int j, struct type *type, LONGEST offset);
 
 extern int binop_types_user_defined_p (enum exp_opcode op,
 				       struct type *type1,
@@ -692,7 +693,8 @@ extern void release_value (struct value 
 extern int record_latest_value (struct value *val);
 
 extern void modify_field (struct type *type, gdb_byte *addr,
-			  LONGEST fieldval, int bitpos, int bitsize);
+			  LONGEST fieldval, LONGEST bitpos,
+			  int bitsize);
 
 extern void type_print (struct type *type, char *varstring,
 			struct ui_file *stream, int show);
@@ -722,7 +724,7 @@ extern void value_print_array_elements (
 extern struct value *value_release_to_mark (struct value *mark);
 
 extern int val_print (struct type *type, const gdb_byte *valaddr,
-		      int embedded_offset, CORE_ADDR address,
+		      LONGEST embedded_offset, CORE_ADDR address,
 		      struct ui_file *stream, int recurse,
 		      const struct value *val,
 		      const struct value_print_options *options,
@@ -770,7 +772,7 @@ extern struct value *value_literal_compl
 extern struct value *find_function_in_inferior (const char *,
 						struct objfile **);
 
-extern struct value *value_allocate_space_in_inferior (int);
+extern struct value *value_allocate_space_in_inferior (LONGEST);
 
 extern struct value *value_of_local (const char *name, int complain);
 
Index: gdb-7.2-patched/gdb/frame.h
===================================================================
--- gdb-7.2-patched.orig/gdb/frame.h
+++ gdb-7.2-patched/gdb/frame.h
@@ -517,7 +517,7 @@ extern void put_frame_register (struct f
 /* Read LEN bytes from one or multiple registers starting with REGNUM
    in frame FRAME, starting at OFFSET, into BUF.  */
 extern int get_frame_register_bytes (struct frame_info *frame, int regnum,
-				     CORE_ADDR offset, int len,
+				     CORE_ADDR offset, LONGEST len,
 				     gdb_byte *myaddr);
 
 /* Write LEN bytes to one or multiple registers starting with REGNUM
Index: gdb-7.2-patched/gdb/c-typeprint.c
===================================================================
--- gdb-7.2-patched.orig/gdb/c-typeprint.c
+++ gdb-7.2-patched/gdb/c-typeprint.c
@@ -612,9 +612,9 @@ c_type_print_varspec_suffix (struct type
 	}
       else if (TYPE_LENGTH (TYPE_TARGET_TYPE (type)) > 0
 	&& !TYPE_ARRAY_UPPER_BOUND_IS_UNDEFINED (type))
-	fprintf_filtered (stream, "%d",
-			  (TYPE_LENGTH (type)
-			   / TYPE_LENGTH (TYPE_TARGET_TYPE (type))));
+	fprintf_filtered (stream, "%s",
+			  pulongest ((TYPE_LENGTH (type)
+			   / TYPE_LENGTH (TYPE_TARGET_TYPE (type)))));
       fprintf_filtered (stream, "]");
 
       c_type_print_varspec_suffix (TYPE_TARGET_TYPE (type), stream, show,
Index: gdb-7.2-patched/gdb/monitor.c
===================================================================
--- gdb-7.2-patched.orig/gdb/monitor.c
+++ gdb-7.2-patched/gdb/monitor.c
@@ -1998,8 +1998,8 @@ monitor_read_memory (CORE_ADDR memaddr, 
    MYADDR.  Returns 0 for success, errno code for failure. TARGET is
    unused. */
 
-static int
-monitor_xfer_memory (CORE_ADDR memaddr, gdb_byte *myaddr, int len, int write,
+static LONGEST
+monitor_xfer_memory (CORE_ADDR memaddr, gdb_byte *myaddr, LONGEST len, int write,
 		     struct mem_attrib *attrib, struct target_ops *target)
 {
   int res;
Index: gdb-7.2-patched/gdb/scm-lang.c
===================================================================
--- gdb-7.2-patched.orig/gdb/scm-lang.c
+++ gdb-7.2-patched/gdb/scm-lang.c
@@ -46,7 +46,7 @@ scm_printchar (int c, struct type *type,
 
 static void
 scm_printstr (struct ui_file *stream, struct type *type, const gdb_byte *string,
-	      unsigned int length, const char *encoding, int force_ellipses,
+	      ULONGEST length, const char *encoding, int force_ellipses,
 	      const struct value_print_options *options)
 {
   fprintf_filtered (stream, "\"%s\"", string);
Index: gdb-7.2-patched/gdb/scm-lang.h
===================================================================
--- gdb-7.2-patched.orig/gdb/scm-lang.h
+++ gdb-7.2-patched/gdb/scm-lang.h
@@ -48,7 +48,7 @@ struct value;
 extern int scm_value_print (struct value *, struct ui_file *,
 			    const struct value_print_options *);
 
-extern int scm_val_print (struct type *, const gdb_byte *, int, CORE_ADDR,
+extern int scm_val_print (struct type *, const gdb_byte *, LONGEST, CORE_ADDR,
 			  struct ui_file *, int,
 			  const struct value *,
 			  const struct value_print_options *);
Index: gdb-7.2-patched/gdb/scm-valprint.c
===================================================================
--- gdb-7.2-patched.orig/gdb/scm-valprint.c
+++ gdb-7.2-patched/gdb/scm-valprint.c
@@ -420,7 +420,7 @@ taloop:
 
 int
 scm_val_print (struct type *type, const gdb_byte *valaddr,
-	       int embedded_offset, CORE_ADDR address,
+	       LONGEST embedded_offset, CORE_ADDR address,
 	       struct ui_file *stream, int recurse,
 	       const struct value *val,
 	       const struct value_print_options *options)
