From 9bfccf03741918b09d4d458c8d4f8b1e704f1ffb Mon Sep 17 00:00:00 2001
From: siddhesh <siddhesh>
Date: Thu, 26 Jul 2012 02:03:14 +0000
Subject: [PATCH] 	* dwarf2loc.c (dwarf2_evaluate_loc_desc_full): Expand parameter
 	SIZE to size_t.
 	(dwarf2_evaluate_loc_desc): Likewise.
 	(dwarf2_loc_desc_needs_frame): Likewise.
 	(locexpr_describe_location_1): Likewise.
 	* dwarf2loc.h (struct dwarf2_locexpr_baton): Make SIZE as
 	size_t.
 	(struct dwarf2_loclist_baton): Likewise.
 	* dwarf2read.c (struct dwarf_block): Likewise.
 	(dump_die_shallow): Use pulongest to print dwarf_block.size.
 	(decode_locdesc): Expand SIZE and I to size_t.

---
 gdb/ChangeLog    |   14 ++++++++++++++
 gdb/dwarf2loc.c  |   12 ++++++------
 gdb/dwarf2loc.h  |    6 +++---
 gdb/dwarf2read.c |   14 +++++++-------
 4 files changed, 30 insertions(+), 16 deletions(-)

Index: gdb-7.2/gdb/dwarf2loc.c
===================================================================
--- gdb-7.2.orig/gdb/dwarf2loc.c
+++ gdb-7.2/gdb/dwarf2loc.c
@@ -51,7 +51,7 @@ dwarf_expr_frame_base_1 (struct symbol *
 static struct value *dwarf2_evaluate_loc_desc (struct type *type,
 					       struct frame_info *frame,
 					       const gdb_byte *data,
-					       unsigned short size,
+					       size_t size,
 					     struct dwarf2_per_cu_data *per_cu);
 
 /* A helper function for dealing with location lists.  Given a
@@ -1054,7 +1054,7 @@ static struct lval_funcs pieced_value_fu
 
 static struct value *
 dwarf2_evaluate_loc_desc (struct type *type, struct frame_info *frame,
-			  const gdb_byte *data, unsigned short size,
+			  const gdb_byte *data, size_t size,
 			  struct dwarf2_per_cu_data *per_cu)
 {
   struct value *retval;
@@ -1241,7 +1241,7 @@ needs_frame_dwarf_call (struct dwarf_exp
    requires a frame to evaluate.  */
 
 static int
-dwarf2_loc_desc_needs_frame (const gdb_byte *data, unsigned short size,
+dwarf2_loc_desc_needs_frame (const gdb_byte *data, size_t size,
 			     struct dwarf2_per_cu_data *per_cu)
 {
   struct needs_frame_baton baton;
@@ -2486,7 +2486,7 @@ disassemble_dwarf_expression (struct ui_
 static void
 locexpr_describe_location_1 (struct symbol *symbol, CORE_ADDR addr,
 			     struct ui_file *stream,
-			     const gdb_byte *data, int size,
+			     const gdb_byte *data, size_t size,
 			     struct objfile *objfile, unsigned int addr_size,
 			     int offset_size)
 {
Index: gdb-7.2/gdb/dwarf2loc.h
===================================================================
--- gdb-7.2.orig/gdb/dwarf2loc.h
+++ gdb-7.2/gdb/dwarf2loc.h
@@ -60,7 +60,7 @@ struct dwarf2_locexpr_baton
   const gdb_byte *data;
 
   /* Length of the location expression.  */
-  unsigned long size;
+  size_t size;
 
   /* The compilation unit containing the symbol whose location
      we're computing.  */
@@ -77,7 +77,7 @@ struct dwarf2_loclist_baton
   const gdb_byte *data;
 
   /* Length of the location list.  */
-  unsigned long size;
+  size_t size;
 
   /* The compilation unit containing the symbol whose location
      we're computing.  */
Index: gdb-7.2/gdb/dwarf2read.c
===================================================================
--- gdb-7.2.orig/gdb/dwarf2read.c
+++ gdb-7.2/gdb/dwarf2read.c
@@ -702,7 +702,7 @@ struct function_range
 /* Blocks are a bunch of untyped bytes. */
 struct dwarf_block
   {
-    unsigned int size;
+    size_t size;
     gdb_byte *data;
   };
 
@@ -12557,12 +12557,12 @@ dump_die_shallow (struct ui_file *f, int
 	case DW_FORM_block4:
 	case DW_FORM_block:
 	case DW_FORM_block1:
-	  fprintf_unfiltered (f, "block: size %d",
-			      DW_BLOCK (&die->attrs[i])->size);
+	  fprintf_unfiltered (f, "block: size %s",
+			      pulongest (DW_BLOCK (&die->attrs[i])->size));
 	  break;
 	case DW_FORM_exprloc:
-	  fprintf_unfiltered (f, "expression: size %u",
-			      DW_BLOCK (&die->attrs[i])->size);
+	  fprintf_unfiltered (f, "expression: size %s",
+			      pulongest (DW_BLOCK (&die->attrs[i])->size));
 	  break;
 	case DW_FORM_ref1:
 	case DW_FORM_ref2:
@@ -13076,8 +13076,8 @@ static CORE_ADDR
 decode_locdesc (struct dwarf_block *blk, struct dwarf2_cu *cu)
 {
   struct objfile *objfile = cu->objfile;
-  int i;
-  int size = blk->size;
+  size_t i;
+  size_t size = blk->size;
   gdb_byte *data = blk->data;
   CORE_ADDR stack[64];
   int stacki;
