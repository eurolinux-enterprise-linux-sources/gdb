Original message by Sergio Durigan Junior:

  <https://sourceware.org/ml/gdb-patches/2013-08/msg00290.html>
  Message-ID: <m3a9kny3b6.fsf@redhat.com>

This commit fixes a regression introduced on AVR by the previous patch.

====

commit 959b6a66c570308a7b7a30ad0751c03a0beb7575
Author: Sergio Durigan Junior <sergiodj@redhat.com>
Date:   Mon Aug 12 03:50:58 2013 +0000

    Because of:
    
    <http://sourceware.org/ml/gdb-patches/2013-08/msg00289.html>
    
    I have chosen to revert the patch applied to the AVR target-dependent code.
    Therefore, this patch does just that.  It is better to keep the tree
    buildable than to keep this patch in, for now.
    
    2013-08-12  Sergio Durigan Junior  <sergiodj@redhat.com>
    
    	Revert implementation of gdbarch_gdb_signal_{to,from}_target for
    	AVR.
    	* avr-tdep.c: Remove include of "linux-tdep.h".  Remove enum with
    	different signals between the generic Linux kernel implementation
    	and AVR's.
    	(avr_linux_gdb_signal_from_target): Delete.
    	(avr_linux_gdb_signal_to_target): Delete.
    	(avr_gdbarch_init): Don't set gdbarch_gdb_signal_{to,from}_target.

Index: gdb-7.2/gdb/avr-tdep.c
===================================================================
--- gdb-7.2.orig/gdb/avr-tdep.c
+++ gdb-7.2/gdb/avr-tdep.c
@@ -37,7 +37,6 @@
 #include "regcache.h"
 #include "gdb_string.h"
 #include "dis-asm.h"
-#include "linux-tdep.h"
 
 /* AVR Background:
 
@@ -195,19 +194,6 @@ struct gdbarch_tdep
   struct type *pc_type;
 };
 
-/* This enum represents the signals' numbers on the AVR
-   architecture.  It just contains the signal definitions which are
-   different from the generic implementation.
-
-   It is derived from the file <arch/avr32/include/uapi/asm/signal.h>,
-   from the Linux kernel tree.  */
-
-enum
-  {
-    AVR_LINUX_SIGRTMIN = 32,
-    AVR_LINUX_SIGRTMAX = 63,
-  };
-
 /* Lookup the name of a register given it's number. */
 
 static const char *
@@ -1356,38 +1342,6 @@ avr_dwarf_reg_to_regnum (struct gdbarch
   return -1;
 }
 
-/* Implementation of `gdbarch_gdb_signal_to_target', as defined in
-   gdbarch.h.  */
-
-static int
-avr_linux_gdb_signal_to_target (struct gdbarch *gdbarch,
-				enum target_signal signal)
-{
-  switch (signal)
-    {
-    /* TARGET_SIGNAL_REALTIME_32 is not continuous in <gdb/signals.def>,
-       therefore we have to handle it here.  */
-    case TARGET_SIGNAL_REALTIME_32:
-      return AVR_LINUX_SIGRTMIN;
-
-    /* TARGET_SIGNAL_REALTIME_64 is not valid on AVR.  */
-    case TARGET_SIGNAL_REALTIME_64:
-      return -1;
-    }
-
-  /* TARGET_SIGNAL_REALTIME_33 to _63 are continuous.
-     AVR does not have _64.  */
-  if (signal >= TARGET_SIGNAL_REALTIME_33
-      && signal <= TARGET_SIGNAL_REALTIME_63)
-    {
-      int offset = signal - TARGET_SIGNAL_REALTIME_33;
-
-      return AVR_LINUX_SIGRTMIN + 1 + offset;
-    }
-
-  return linux_gdb_signal_to_target (gdbarch, signal);
-}
-
 /* Initialize the gdbarch structure for the AVR's. */
 
 static struct gdbarch *
@@ -1491,9 +1445,6 @@ avr_gdbarch_init (struct gdbarch_info in
   set_gdbarch_unwind_pc (gdbarch, avr_unwind_pc);
   set_gdbarch_unwind_sp (gdbarch, avr_unwind_sp);
 
-  set_gdbarch_gdb_signal_to_target (gdbarch,
-				    avr_linux_gdb_signal_to_target);
-
   return gdbarch;
 }
 
