URL: <https://sourceware.org/ml/gdb-patches/2011-05/msg00495.html>
Message-ID: <4DD6B72D.3060706@redhat.com>

  From: Keith Seitz <keiths at redhat dot com>
  To: gdb-patches at sourceware dot org
  Subject: [RFA] "Error in re-setting breakpoint," c++/12750
  Date: Fri, 20 May 2011 11:47:09 -0700

  Hi,

  This bug is a regression caused by some breakpoint canonicalization 
  churn that committed a while ago. Basically:

  (gdb) break xxx::fun1
  Breakpoint 1 at 0xblahblah: file main.cc, line blah.
  (gdb) run
  Starting program: a.out
  Error in re-setting breakpoint 1: Can't find member of namespace, class, 
    struct, or union named "main.cc:xxx::fun1"

  As you can see, the first time decode_line_1 is called (with 
  "xxx::fun1"), parsing the linespec succeeds. The breakpoint code stores 
  a canonicalized version of this string ("main.cc:xxx::fun1"), and 
  decode_line_1 is unable to properly parse this.

  The attached patch is an attempt to correct this. It essentially makes 
  two changes: 1) look up the file symtab first; 2) pass this file symtab 
  to any function which might call lookup_symbol[_*], and use this symtab 
  to determine the appropriate block to search.

  The test case included here will require the patch for symtab/12704. I 
  ran across this bug while working on that bug, so I've included a test 
  for that specific case, too.

Comments from Sergio Durigan Junior:

  I had to adapt this patch in two places, otherwise it would not
  build/run properly.  The first place is on decode_line_1, where I
  had to declare the variable file_exception; the other place was
  decode_variable, where I had to include code to set the
  not_found_ptr variable properly.

commit e8eb7bc5344476226012298ca2b1eb72c8d5cc03
Author: Keith Seitz <keiths@redhat.com>
Date:   Tue May 31 22:13:51 2011 +0000

    	PR c++/12750
    	* linespec.c (get_search_block): New function.
    	(find_methods): Add FILE_SYMTATB parameter and use it and
    	get_search_block to pass an appropriate block to
    	lookup_symbol_in_namespace.
    	(decode_line_1): Record if *ARGPTR is single-quote enclosed.
    	Check if *ARGPTR starts with a filename first.
    	If it does, call locate_first_half again to locate the next
    	"first half" of the linespec.
    	Pass FILE_SYMTATB to decode_objc and decode_compound.
    	Swallow the trailing single-quote if IS_SQUOTE_ENCLOSED.
    	(locate_first_half): Stop on the first colon seen.
    	(decode_compound): Add FILE_SYMTAB parameter.
    	Pass FILE_SYMTAB to lookup_prefix_sym and find_method.
    	(lookup_prefix_sym): Add FILE_SYMTAB parameter and use
    	get_search_block with lookup_symbol.
    	(find_method): Add FILE_SYMTAB parameter and pass it to
    	find_methods.
    	(decode_objc): Use get_search_block.

Index: gdb-7.2.old/gdb/linespec.c
===================================================================
--- gdb-7.2.old.orig/gdb/linespec.c
+++ gdb-7.2.old/gdb/linespec.c
@@ -65,11 +65,13 @@ static struct symtabs_and_lines decode_o
 static struct symtabs_and_lines decode_compound (char **argptr,
 						 int funfirstline,
 						 struct linespec_result *canonical,
+						 struct symtab *file_symtab,
 						 char *saved_arg,
 						 char *p,
 						 int *not_found_ptr);
 
-static struct symbol *lookup_prefix_sym (char **argptr, char *p);
+static struct symbol *lookup_prefix_sym (char **argptr, char *p,
+					 struct symtab *);
 
 static struct symtabs_and_lines find_method (int funfirstline,
 					     struct linespec_result *canonical,
@@ -77,6 +79,7 @@ static struct symtabs_and_lines find_met
 					     char *copy,
 					     struct type *t,
 					     struct symbol *sym_class,
+					     struct symtab *,
 					     int *not_found_ptr);
 
 static void cplusplus_error (const char *name, const char *fmt, ...)
@@ -85,7 +88,7 @@ static void cplusplus_error (const char
 static int total_number_of_methods (struct type *type);
 
 static int find_methods (struct type *, char *,
-			 enum language, struct symbol **);
+			 enum language, struct symbol **, struct symtab *);
 
 static int add_matching_methods (int method_counter, struct type *t,
 				 enum language language,
@@ -198,6 +201,30 @@ total_number_of_methods (struct type *ty
   return count;
 }
 
+/* Returns the block to be used for symbol searches for the given SYMTAB,
+   which may be NULL.  */
+
+static struct block *
+get_search_block (struct symtab *symtab)
+{
+  struct block *block;
+
+  if (symtab != NULL)
+    block = BLOCKVECTOR_BLOCK (BLOCKVECTOR (symtab), STATIC_BLOCK);
+  else
+    {
+      enum language save_language;
+
+      /* get_selected_block can change the current language when there is
+	 no selected frame yet.  */
+      save_language = current_language->la_language;
+      block = get_selected_block (0);
+      set_language (save_language);
+    }
+
+  return block;
+}
+
 /* Recursive helper function for decode_line_1.
    Look for methods named NAME in type T.
    Return number of matches.
@@ -207,7 +234,7 @@ total_number_of_methods (struct type *ty
 
 static int
 find_methods (struct type *t, char *name, enum language language,
-	      struct symbol **sym_arr)
+	      struct symbol **sym_arr, struct symtab *file_symtab)
 {
   int i1 = 0;
   int ibase;
@@ -217,7 +244,7 @@ find_methods (struct type *t, char *name
      unless we figure out how to get the physname without the name of
      the class, then the loop can't do any good.  */
   if (class_name
-      && (lookup_symbol_in_language (class_name, (struct block *) NULL,
+      && (lookup_symbol_in_language (class_name, get_search_block (file_symtab),
 			 STRUCT_DOMAIN, language, (int *) NULL)))
     {
       int method_counter;
@@ -272,7 +299,7 @@ find_methods (struct type *t, char *name
   if (i1 == 0)
     for (ibase = 0; ibase < TYPE_N_BASECLASSES (t); ibase++)
       i1 += find_methods (TYPE_BASECLASS (t, ibase), name,
-			  language, sym_arr + i1);
+			  language, sym_arr + i1, file_symtab);
 
   return i1;
 }
@@ -732,8 +759,11 @@ decode_line_1 (char **argptr, int funfir
   char *saved_arg = *argptr;
   /* If IS_QUOTED, the end of the quoted bit.  */
   char *end_quote = NULL;
+  /* Is *ARGPTR enclosed in single quotes?  */
+  int is_squote_enclosed = 0;
   /* The "first half" of the linespec.  */
   char *first_half;
+  volatile struct gdb_exception file_exception;
 
   if (not_found_ptr)
     *not_found_ptr = 0;
@@ -754,7 +784,11 @@ decode_line_1 (char **argptr, int funfir
 	       && strchr (get_gdb_completer_quote_characters (),
 			  **argptr) != NULL);
   if (is_quoted)
-    end_quote = skip_quoted (*argptr);
+    {
+      end_quote = skip_quoted (*argptr);
+      if (*end_quote == '\0')
+	is_squote_enclosed = 1;
+    }
 
   /* Check to see if it's a multipart linespec (with colons or
      periods).  */
@@ -767,6 +801,30 @@ decode_line_1 (char **argptr, int funfir
 
   first_half = p = locate_first_half (argptr, &is_quote_enclosed);
 
+  /* First things first: if ARGPTR starts with a filename, get its
+     symtab and strip the filename from ARGPTR.  */
+  TRY_CATCH (file_exception, RETURN_MASK_ERROR)
+    {
+      file_symtab = symtab_from_filename (argptr, p, is_quote_enclosed,
+					  not_found_ptr);
+    }
+
+  if (file_exception.reason >= 0)
+    {
+      /* Check for single quotes on the non-filename part.  */
+      is_quoted = (**argptr
+		   && strchr (get_gdb_completer_quote_characters (),
+			      **argptr) != NULL);
+      if (is_quoted)
+	end_quote = skip_quoted (*argptr);
+
+      /* Locate the next "half" of the linespec.  */
+      first_half = p = locate_first_half (argptr, &is_quote_enclosed);
+    }
+
+  if (not_found_ptr)
+    *not_found_ptr = 0;
+
   /* Check if this is an Objective-C method (anything that starts with
      a '+' or '-' and a '[').  */
   if (is_objc_method_format (p))
@@ -777,7 +835,7 @@ decode_line_1 (char **argptr, int funfir
   {
     struct symtabs_and_lines values;
 
-    values = decode_objc (argptr, funfirstline, NULL,
+    values = decode_objc (argptr, funfirstline, file_symtab,
 			  canonical, saved_arg);
     if (values.sals != NULL)
       return values;
@@ -801,8 +859,8 @@ decode_line_1 (char **argptr, int funfir
 	  if (is_quote_enclosed)
 	    ++saved_arg;
 	  values = decode_compound (argptr, funfirstline, canonical,
-				    saved_arg, p, not_found_ptr);
-	  if (is_quoted && **argptr == '\'')
+				    file_symtab, saved_arg, p, not_found_ptr);
+	  if ((is_quoted || is_squote_enclosed) && **argptr == '\'')
 	    *argptr = *argptr + 1;
 	  return values;
 	}
@@ -857,7 +915,7 @@ decode_line_1 (char **argptr, int funfir
   if (**argptr == '$')		/* May be a convenience variable.  */
     /* One or two $ chars possible.  */
     p = skip_quoted (*argptr + (((*argptr)[1] == '$') ? 2 : 1));
-  else if (is_quoted)
+  else if (is_quoted || is_squote_enclosed)
     {
       p = end_quote;
       if (p[-1] != '\'')
@@ -896,7 +954,7 @@ decode_line_1 (char **argptr, int funfir
       copy[p - *argptr - 1] = '\0';
       copy++;
     }
-  else if (is_quoted)
+  else if (is_quoted || is_squote_enclosed)
     copy[p - *argptr - 1] = '\0';
   while (*p == ' ' || *p == '\t')
     p++;
@@ -1060,13 +1118,11 @@ locate_first_half (char **argptr, int *i
 	  break;
 	}
       /* Check for the end of the first half of the linespec.  End of
-         line, a tab, a double colon or the last single colon, or a
-         space.  But if enclosed in double quotes we do not break on
-         enclosed spaces.  */
+         line, a tab, a colon or a space.  But if enclosed in double
+	 quotes we do not break on enclosed spaces.  */
       if (!*p
 	  || p[0] == '\t'
-	  || ((p[0] == ':')
-	      && ((p[1] == ':') || (strchr (p + 1, ':') == NULL)))
+	  || (p[0] == ':')
 	  || ((p[0] == ' ') && !*is_quote_enclosed))
 	break;
       if (p[0] == '.' && strchr (p, ':') == NULL)
@@ -1126,20 +1182,8 @@ decode_objc (char **argptr, int funfirst
   values.sals = NULL;
   values.nelts = 0;
 
-  if (file_symtab != NULL)
-    block = BLOCKVECTOR_BLOCK (BLOCKVECTOR (file_symtab), STATIC_BLOCK);
-  else
-    {
-      enum language save_language;
-
-      /* get_selected_block can change the current language when there is
-	 no selected frame yet.  */
-      save_language = current_language->la_language;
-      block = get_selected_block (0);
-      set_language (save_language);
-    }
-
-  copy = find_imps (file_symtab, block, *argptr, NULL, &i1, &i2); 
+  copy = find_imps (file_symtab, get_search_block (file_symtab), *argptr,
+		    NULL, &i1, &i2);
     
   if (i1 > 0)
     {
@@ -1217,6 +1261,7 @@ decode_objc (char **argptr, int funfirst
 static struct symtabs_and_lines
 decode_compound (char **argptr, int funfirstline,
 		 struct linespec_result *canonical,
+		 struct symtab *file_symtab,
 		 char *the_real_saved_arg, char *p, int *not_found_ptr)
 {
   struct symtabs_and_lines values;
@@ -1364,7 +1409,7 @@ decode_compound (char **argptr, int funf
   /* Before the call, argptr->"AAA::inA::fun",
      p->"", p2->"::fun".  After the call: argptr->"fun", p, p2
      unchanged.  */
-  sym_class = lookup_prefix_sym (argptr, p2);
+  sym_class = lookup_prefix_sym (argptr, p2, file_symtab);
 
   /* If sym_class has been found, and if "AAA::inA" is a class, then
      we're in case 1 above.  So we look up "fun" as a method of that
@@ -1469,7 +1514,8 @@ decode_compound (char **argptr, int funf
 	 we'll lookup the whole string in the symbol tables.  */
 
       values = find_method (funfirstline, canonical, saved_arg,
-			    copy, t, sym_class, not_found_ptr);
+			    copy, t, sym_class, file_symtab,
+			    not_found_ptr);
       if (saved_java_argptr != NULL && values.nelts == 1)
 	{
 	  /* The user specified a specific return type for a java method.
@@ -1547,7 +1593,7 @@ decode_compound (char **argptr, int funf
    example, say ARGPTR is "AAA::inA::fun" and P is "::inA::fun".  */
 
 static struct symbol *
-lookup_prefix_sym (char **argptr, char *p)
+lookup_prefix_sym (char **argptr, char *p, struct symtab *file_symtab)
 {
   char *p1;
   char *copy;
@@ -1570,7 +1616,8 @@ lookup_prefix_sym (char **argptr, char *
   /* At this point p1->"::inA::fun", p->"inA::fun" copy->"AAA",
      argptr->"inA::fun" */
 
-  sym = lookup_symbol (copy, 0, STRUCT_DOMAIN, 0);
+  sym = lookup_symbol (copy, get_search_block (file_symtab),
+		       STRUCT_DOMAIN, 0);
   if (sym == NULL)
     {
       /* Typedefs are in VAR_DOMAIN so the above symbol lookup will
@@ -1600,7 +1647,8 @@ lookup_prefix_sym (char **argptr, char *
 static struct symtabs_and_lines
 find_method (int funfirstline, struct linespec_result *canonical,
 	     char *saved_arg,
-	     char *copy, struct type *t, struct symbol *sym_class, int *not_found_ptr)
+	     char *copy, struct type *t, struct symbol *sym_class,
+	     struct symtab *file_symtab, int *not_found_ptr)
 {
   struct symtabs_and_lines values;
   struct symbol *sym = NULL;
@@ -1611,7 +1659,8 @@ find_method (int funfirstline, struct li
   /* Find all methods with a matching name, and put them in
      sym_arr.  */
 
-  i1 = find_methods (t, copy, SYMBOL_LANGUAGE (sym_class), sym_arr);
+  i1 = find_methods (t, copy, SYMBOL_LANGUAGE (sym_class), sym_arr,
+		     file_symtab);
 
   if (i1 == 1)
     {
@@ -1917,13 +1966,12 @@ decode_variable (char *copy, int funfirs
   struct symbol *sym;
   struct minimal_symbol *msymbol;
 
-  sym = lookup_symbol (copy,
-		       (file_symtab
-			? BLOCKVECTOR_BLOCK (BLOCKVECTOR (file_symtab),
-					     STATIC_BLOCK)
-			: get_selected_block (0)),
+  sym = lookup_symbol (copy, get_search_block (file_symtab),
 		       VAR_DOMAIN, 0);
 
+  if (not_found_ptr)
+    *not_found_ptr = 0;
+
   if (sym != NULL)
     return symbol_found (funfirstline, canonical, copy, sym, file_symtab);
 
