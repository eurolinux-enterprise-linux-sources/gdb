From a962b808682570763a45279b35abe4fd058b21d2 Mon Sep 17 00:00:00 2001
From: siddhesh <siddhesh>
Date: Mon, 23 Jul 2012 18:08:27 +0000
Subject: [PATCH] 	* p-valprint.c (pascal_object_print_value): Replace potentially
 	unsafe alloca with xmalloc/xfree.
 	* valops.c (search_struct_method): Likewise.

---
 gdb/ChangeLog    |    6 ++++++
 gdb/p-valprint.c |    8 ++++++--
 gdb/valops.c     |   10 ++++++++--
 3 files changed, 20 insertions(+), 4 deletions(-)

2012-07-23  Siddhesh Poyarekar  <siddhesh@redhat.com>

	* p-valprint.c (pascal_object_print_value): Replace potentially
	unsafe alloca with xmalloc/xfree.
	* valops.c (search_struct_method): Likewise.

Index: gdb-7.2/gdb/p-valprint.c
===================================================================
--- gdb-7.2.orig/gdb/p-valprint.c
+++ gdb-7.2/gdb/p-valprint.c
@@ -941,13 +941,18 @@ pascal_object_print_value (struct type *
 
       if (boffset != -1 && (boffset < 0 || boffset >= TYPE_LENGTH (type)))
 	{
-	  /* FIXME (alloc): not safe is baseclass is really really big. */
-	  gdb_byte *buf = alloca (TYPE_LENGTH (baseclass));
+	  gdb_byte *buf;
+	  struct cleanup *back_to;
+
+	  buf = xmalloc (TYPE_LENGTH (baseclass));
+	  back_to = make_cleanup (xfree, buf);
 
 	  base_valaddr = buf;
 	  if (target_read_memory (address + boffset, buf,
 				  TYPE_LENGTH (baseclass)) != 0)
 	    boffset = -1;
+
+	  do_cleanups (back_to);
 	}
       else
 	base_valaddr = valaddr + boffset;
Index: gdb-7.2/gdb/valops.c
===================================================================
--- gdb-7.2.orig/gdb/valops.c
+++ gdb-7.2/gdb/valops.c
@@ -2156,12 +2156,17 @@ search_struct_method (const char *name, 
 
 	  if (offset < 0 || offset >= TYPE_LENGTH (type))
 	    {
-	      gdb_byte *tmp = alloca (TYPE_LENGTH (baseclass));
+	      gdb_byte *tmp;
+	      struct cleanup *back_to;
+
+	      tmp = xmalloc (TYPE_LENGTH (baseclass));
+	      back_to = make_cleanup (xfree, tmp);
 
 	      if (target_read_memory (value_address (*arg1p) + offset,
 				      tmp, TYPE_LENGTH (baseclass)) != 0)
 		error (_("virtual baseclass botch"));
 	      base_valaddr = tmp;
+	      do_cleanups (back_to);
 	    }
 	  else
 	    base_valaddr = value_contents (*arg1p) + offset;
