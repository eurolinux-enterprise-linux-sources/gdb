commit e03ed3c64a048522ba4bc12092f8a75bcfab6ea8
Author: Andreas Arnez <arnez@linux.vnet.ibm.com>
Date:   Fri Jul 10 10:36:02 2015 +0200

    gnu_vector.exp: Skip infcall tests on x86/x86_64
    
    Since the new KFAILs/KPASSs for the infcall tests on x86 and x86_64
    targets generated unnecessary noise, this change skips them with
    UNSUPPORTED instead.
    
    gdb/testsuite/ChangeLog:
    
    	* gdb.base/gnu_vector.exp: On x86 and x86_64 targets, skip the
    	infcall tests instead of setting up for KFAIL.

### a/gdb/testsuite/ChangeLog
### b/gdb/testsuite/ChangeLog
## -1,3 +1,8 @@
+2015-07-10  Andreas Arnez  <arnez@linux.vnet.ibm.com>
+
+	* gdb.base/gnu_vector.exp: On x86 and x86_64 targets, skip the
+	infcall tests instead of setting up for KFAIL.
+
 2015-07-10  Markus Metzger  <markus.t.metzger@intel.com>
 
 	* gdb.btrace/record_goto-step.exp: New.
--- a/gdb/testsuite/gdb.base/gnu_vector.exp
+++ b/gdb/testsuite/gdb.base/gnu_vector.exp
@@ -177,16 +177,19 @@ gdb_test "ptype struct_with_vector_1" "type = struct {\r\n\[\t \]+int i;\r\n\[\t
 
 # Test inferior function calls with vector arguments and/or vector
 # return values.
-setup_kfail gdb/18537 "i?86-*-*" "x86_64-*-*"
+if { [istarget "i?86-*-*"] || [istarget "x86_64-*-*" ] } {
+    # These platforms don't support infcalls with vector arguments
+    # and/or vector return values, so skip the remaining tests.
+    # See also PR exp/18537.
+    unsupported "skip remaining vector ABI tests on this arch"
+    return
+}
 gdb_test "print add_some_intvecs(i4a, i4b, 3 * i4a)" "= \\{17, 34, 72, 132\\}" \
     "call add_some_intvecs"
-setup_kfail gdb/18537 "i?86-*-*" "x86_64-*-*"
 gdb_test "print add_many_charvecs(c4, c4, c4, c4, c4, c4, c4, c4, c4, c4)" \
     "= \\{10, 20, 30, 40\\}" "call add_many_charvecs"
-setup_kfail gdb/18537 "i?86-*-*" "x86_64-*-*"
 gdb_test "print add_various_floatvecs(2, f4a, f4b)" "= \\{3, 6, 16, 20\\}" \
     "call add_various_floatvecs"
-setup_kfail gdb/18537 "i?86-*-*" "x86_64-*-*"
 gdb_test "print add_structvecs(i2, (struct just_int2)\{2*i2\}, (struct two_int2)\{3*i2, 4*i2\})" \
     "= \\{i = \\{10, 20\\}\\}" "call add_structvecs"
 gdb_test "print add_singlevecs((char1) \{6\}, (int1) \{12\}, (double1) \{24\})" "= \\{42\\}" \
@@ -195,7 +198,6 @@ gdb_test "print add_singlevecs((char1) \{6\}, (int1) \{12\}, (double1) \{24\})"
 # Test vector return value handling with "finish" and "return".
 gdb_breakpoint "add_some_intvecs"
 gdb_continue "add_some_intvecs"
-setup_kfail gdb/18537 "i?86-*-*" "x86_64-*-*"
 gdb_test "finish" "Value returned is .* = \\{10, 20, 48, 72\\}" \
     "finish shows vector return value"
 gdb_continue "add_some_intvecs"
@@ -203,5 +205,4 @@ gdb_test "return (int4) \{4, 2, 7, 6\}" \
     "#0 .* main .*" \
     "set vector return value" \
     "Make add_some_intvecs return now. .y or n.*" "y"
-setup_kfail gdb/18537 "i?86-*-*" "x86_64-*-*"
 gdb_test "continue" "4 2 7 6\r\n.*" "verify vector return value"
